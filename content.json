{"meta":{"title":"JoinYon's Blog","subtitle":"一个会思考的机器人","description":null,"author":"JoinYon","url":"http://joinyon.top"},"pages":[{"title":"categories","date":"2018-06-07T05:46:07.000Z","updated":"2018-06-07T05:47:48.514Z","comments":true,"path":"categories/index.html","permalink":"http://joinyon.top/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-06-07T06:09:01.000Z","updated":"2018-09-25T08:22:37.551Z","comments":true,"path":"about/index.html","permalink":"http://joinyon.top/about/index.html","excerpt":"","text":"码农一枚，现居杭州。 座右铭 你是这个世界上独一无二的。 存在的就是合理的。 还没有第三条，等着我去发现。 交友宣言喜欢以茶会友，交朋友是拓展自己见闻的有效途径。 联系方式 关注我 新浪微博 GitHub coding.net 兴趣爱好我只是一个会coding的程序猿，我还有一些特殊爱好： 读书（微信读书，欢迎和我互相关注，点赞哦！） 写作（文笔不好，七八九流的，自我娱乐） 炒币（山寨币，虚拟币，梦想还是有的，说不定哪天财富自由了，偷笑。。。） 游泳（没有正规训练过，释放心情的好去处） 吃货（没有什么比美食诱人了）简历"},{"title":"标签","date":"2018-06-07T05:41:48.000Z","updated":"2018-06-07T05:43:57.562Z","comments":true,"path":"tags/index.html","permalink":"http://joinyon.top/tags/index.html","excerpt":"","text":""},{"title":"工具","date":"2018-06-08T06:34:46.000Z","updated":"2018-06-08T06:36:23.319Z","comments":true,"path":"resources/index.html","permalink":"http://joinyon.top/resources/index.html","excerpt":"","text":""}],"posts":[{"title":"ehcache.xml中使用本地ehcache.xsd文件","slug":"ehcache-xml中使用本地ehcache-xsd文件","date":"2020-07-07T10:29:10.000Z","updated":"2020-07-07T10:53:00.707Z","comments":true,"path":"2020/07/07/ehcache-xml中使用本地ehcache-xsd文件/","link":"","permalink":"http://joinyon.top/2020/07/07/ehcache-xml中使用本地ehcache-xsd文件/","excerpt":"","text":"用springboot做缓存使用EhCache时IDEA报错。12&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;ehcache.xsd&quot;&gt; 直接上去http://www.ehcache.org/ehcache.xsd访问，新建ehcahe.xsd文件，将内容复制到文档中并保存。把保存在本地的ehcache.xsd文件 拉到和ehcache.xml同级目录下这样就不会报错了 解决了ehcache.xml在idea中的报错","categories":[],"tags":[],"keywords":[]},{"title":"Mac环境下安装Redis","slug":"Mac环境下安装Redis","date":"2020-07-06T12:14:14.000Z","updated":"2020-07-06T12:27:31.262Z","comments":true,"path":"2020/07/06/Mac环境下安装Redis/","link":"","permalink":"http://joinyon.top/2020/07/06/Mac环境下安装Redis/","excerpt":"","text":"一、首先是官网下载redis下载 stable 版本，稳定版本。 安装与编译先找到usr/local目录，也可以直接命令行完成，建议windows可以这样操作，自己mac系统直接命令行出现了错误，找不到改目录，于是手动移动安装目录。 主要分为两步，先是打开访达，command+shift+G跳转目录。也可以自定义目录安装 步骤: 解压:tar zxvf redis-X.X.XX.tar.gz 你下载的文件名 移动到:mv redis-4.0.10 /usr/local/ 切换到:cd /usr/local/redis-4.0.10/ 编译测试: sudo make test 编译安装: sudo make install安装成功测试1.安装成功后，输入redis-server启动redis12345678910111213141516171819202122232425zhangjunyangdeMacBook-Pro:blog Young$ redis-server5955:C 06 Jul 2020 20:19:16.362 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo5955:C 06 Jul 2020 20:19:16.362 # Redis version=6.0.5, bits=64, commit=00000000, modified=0, pid=5955, just started5955:C 06 Jul 2020 20:19:16.362 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf5955:M 06 Jul 2020 20:19:16.363 * Increased maximum number of open files to 10032 (it was originally set to 256). _._ _.-``__ &apos;&apos;-._ _.-`` `. `_. &apos;&apos;-._ Redis 6.0.5 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ &apos;&apos;-._ ( &apos; , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|&apos;` _.-&apos;| Port: 6379 | `-._ `._ / _.-&apos; | PID: 5955 `-._ `-._ `-./ _.-&apos; _.-&apos; |`-._`-._ `-.__.-&apos; _.-&apos;_.-&apos;| | `-._`-._ _.-&apos;_.-&apos; | http://redis.io `-._ `-._`-.__.-&apos;_.-&apos; _.-&apos; |`-._`-._ `-.__.-&apos; _.-&apos;_.-&apos;| | `-._`-._ _.-&apos;_.-&apos; | `-._ `-._`-.__.-&apos;_.-&apos; _.-&apos; `-._ `-.__.-&apos; _.-&apos; `-._ _.-&apos; `-.__.-&apos; 5955:M 06 Jul 2020 20:19:16.367 # Server initialized5955:M 06 Jul 2020 20:19:16.368 * Ready to accept connections 2.测试redis新建一个终端窗口，输入命令行redis-cli1234567zhangjunyangdeMacBook-Pro:~ Young$ redis-cli127.0.0.1:6379&gt; set 666 0OK127.0.0.1:6379&gt; get 666&quot;0&quot;127.0.0.1:6379&gt; 关闭redis 使用 command+C redis常用命令 命令 用途 set key value 设置 key 的值 get key 获取 key 的值 exists key 查看此 key 是否存在 keys * 查看所有的 key flushall 消除所有的 key 注意 以上使用的是默认的启用方式另有启动Redis并加载配置文件方式。","categories":[],"tags":[],"keywords":[]},{"title":"Spring Boot中使用Redis缓存数据","slug":"Spring-Boot中使用Redis缓存数据","date":"2020-07-06T06:21:58.000Z","updated":"2020-07-07T06:18:12.956Z","comments":true,"path":"2020/07/06/Spring-Boot中使用Redis缓存数据/","link":"","permalink":"http://joinyon.top/2020/07/06/Spring-Boot中使用Redis缓存数据/","excerpt":"","text":"在程序中可以使用缓存的技术来节省对数据库的开销。Spring Boot对缓存提供了很好的支持，我们几乎不用做过多的配置即可使用各种缓存实现。这里主要介绍平日里个人接触较多的Ehcache和Redis缓存实现。 准备工作可根据Spring-Boot中使用Mybatis.html搭建一个Spring Boot项目，然后yml中配置日志输出级别以观察SQL的执行情况：12345logging: level: com: springboot: mapper: debug 其中com.spring.mapper为MyBatis的Mapper接口路径。 然后编写如下测试方法：12345678910111213141516@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = Application.class)public class ApplicationTest &#123; @Autowired private StudentService studentService; @Test public void test() throws Exception &#123; Student student1 = this.studentService.queryStudentBySno(&quot;001&quot;); System.out.println(&quot;学号&quot; + student1.getSno() + &quot;的学生姓名为：&quot; + student1.getName()); Student student2 = this.studentService.queryStudentBySno(&quot;001&quot;); System.out.println(&quot;学号&quot; + student2.getSno() + &quot;的学生姓名为：&quot; + student2.getName()); &#125;&#125; run as junit test123456782017-11-17 16:34:26.535 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-17 16:34:26.688 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-17 16:34:26.716 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang2017-11-17 16:34:26.720 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-17 16:34:26.720 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-17 16:34:26.721 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang 可发现第二个查询虽然和第一个查询完全一样，但其还是对数据库进行了查询。接下来引入缓存来改善这个结果。 使用缓存要开启Spring Boot的缓存功能，需要在pom中引入spring-boot-starter-cache：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;&lt;/dependency&gt; 接着在Spring Boot入口类中加入@EnableCaching注解开启缓存功能：1234567@SpringBootApplication@EnableCachingpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class,args); &#125;&#125; 在StudentService接口中加入缓存注解：123456789101112@CacheConfig(cacheNames = &quot;student&quot;)@Repositorypublic interface StudentService &#123; @CachePut(key = &quot;#p0.sno&quot;) Student update(Student student); @CacheEvict(key = &quot;#p0&quot;, allEntries = true) void deleteStudentBySno(String sno); @Cacheable(key = &quot;#p0&quot;) Student queryStudentBySno(String sno);&#125; 我们在StudentService接口中加入了@CacheConfig注解，queryStudentBySno方法使用了注解@Cacheable(key=”#p0”)，即将id作为redis中的key值。当我们更新数据的时候，应该使用@CachePut(key=”#p0.sno”)进行缓存数据的更新，否则将查询到脏数据，因为该注解保存的是方法的返回值，所以这里应该返回Student。 其实现类：123456789101112131415161718192021@Repository(&quot;studentService&quot;)public class StudentServiceImpl implements StudentService&#123; @Autowired private StudentMapper studentMapper; @Override public Student update(Student student) &#123; this.studentMapper.update(student); return this.studentMapper.queryStudentBySno(student.getSno()); &#125; @Override public void deleteStudentBySno(String sno) &#123; this.studentMapper.deleteStudentBySno(sno); &#125; @Override public Student queryStudentBySno(String sno) &#123; return this.studentMapper.queryStudentBySno(sno); &#125;&#125; 在Spring Boot中可使用的缓存注解有： 缓存注解 1.@CacheConfig：主要用于配置该类中会用到的一些共用的缓存配置。在这里@CacheConfig(cacheNames = “student”)：配置了该数据访问对象中返回的内容将存储于名为student的缓存对象中，我们也可以不使用该注解，直接通过@Cacheable自己配置缓存集的名字来定义； 2.@Cacheable：配置了queryStudentBySno函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数： value、cacheNames：两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了@CacheConfig，因此在Spring 3中原本必须有的value属性，也成为非必需项了； key：缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：@Cacheable(key = “#p0”)：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考； condition：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key = “#p0”, condition = “#p0.length() &lt; 3”)，表示只有当第一个参数的长度小于3的时候才会被缓存； unless：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断； keyGenerator：用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现org.springframework.cache.interceptor.KeyGenerator接口，并使用该参数来指定； cacheManager：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用； cacheResolver：用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定； 3.@CachePut：配置于函数上，能够根据参数定义条件来进行缓存，其缓存的是方法的返回值，它与@Cacheable不同的是，它每次都会真实调用函数，所以主要用于数据新增和修改操作上。它的参数与@Cacheable类似，具体功能可参考上面对@Cacheable参数的解析； 4.@CacheEvict：配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同@Cacheable一样的参数之外，它还有下面两个参数： allEntries：非必需，默认为false。当为true时，会移除所有数据； beforeInvocation：非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。缓存实现要使用上Spring Boot的缓存功能，还需要提供一个缓存的具体实现。Spring Boot根据下面的顺序去侦测缓存实现： Generic JCache (JSR-107) EhCache 2.x Hazelcast Infinispan Redis Guava Simple 除了按顺序侦测外，我们也可以通过配置属性spring.cache.type来强制指定。 接下来主要介绍基于Redis和Ehcache的缓存实现。 RedisRedis的下载地址为https://github.com/MicrosoftArchive/redis/releases,Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到C盘。打开一个CMD窗口，输入如下命令：123456789101112131415161718192021222324C:\\Users\\Administrator&gt;cd c:\\Redis-x64-3.2.100c:\\Redis-x64-3.2.100&gt;redis-server.exe redis.windows.conf _._ _.-``__ &apos;&apos;-._ _.-`` `. `_. &apos;&apos;-._ Redis 3.2.100 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ &apos;&apos;-._ ( &apos; , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|&apos;` _.-&apos;| Port: 6379 | `-._ `._ / _.-&apos; | PID: 6404 `-._ `-._ `-./ _.-&apos; _.-&apos; |`-._`-._ `-.__.-&apos; _.-&apos;_.-&apos;| | `-._`-._ _.-&apos;_.-&apos; | http://redis.io `-._ `-._`-.__.-&apos;_.-&apos; _.-&apos; |`-._`-._ `-.__.-&apos; _.-&apos;_.-&apos;| | `-._`-._ _.-&apos;_.-&apos; | `-._ `-._`-.__.-&apos;_.-&apos; _.-&apos; `-._ `-.__.-&apos; _.-&apos; `-._ _.-&apos; `-.__.-&apos;[6404] 25 Dec 09:47:58.890 # Server started, Redis version 3.2.100[6404] 25 Dec 09:47:58.898 * DB loaded from disk: 0.007 seconds[6404] 25 Dec 09:47:58.898 * The server is now ready to accept connections on port 6379 然后打开另外一个CMD终端，输入：1234C:\\Users\\Administrator&gt;cd c:\\Redis-x64-3.2.100c:\\Redis-x64-3.2.100&gt;redis-cli.exe -p 6379127.0.0.1:6379&gt; 准备工作做完后，接下来开始在Spring Boot项目里引入Redis： 12345&lt;!-- spring-boot redis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 在application.yml中配置Redis：12345678910111213141516171819spring: redis: # Redis数据库索引（默认为0） database: 0 # Redis服务器地址 host: localhost # Redis服务器连接端口 port: 6379 pool: # 连接池最大连接数（使用负值表示没有限制） max-active: 8 # 连接池最大阻塞等待时间（使用负值表示没有限制） max-wait: -1 # 连接池中的最大空闲连接 max-idle: 8 # 连接池中的最小空闲连接 min-idle: 0 # 连接超时时间（毫秒） timeout: 0 更多关于Spring Boot Redis配置可参考这里接着创建一个Redis配置类：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@Configurationpublic class RedisConfig extends CachingConfigurerSupport &#123; // 自定义缓存key生成策略 @Bean public KeyGenerator keyGenerator() &#123; return new KeyGenerator() &#123; @Override public Object generate(Object target, java.lang.reflect.Method method, Object... params) &#123; StringBuffer sb = new StringBuffer(); sb.append(target.getClass().getName()); sb.append(method.getName()); for (Object obj : params) &#123; sb.append(obj.toString()); &#125; return sb.toString(); &#125; &#125;; &#125; // 缓存管理器 @Bean public CacheManager cacheManager(@SuppressWarnings(&quot;rawtypes&quot;) RedisTemplate redisTemplate) &#123; RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate); // 设置缓存过期时间（秒） cacheManager.setDefaultExpiration(3600); return cacheManager; &#125; @Bean public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory factory) &#123; StringRedisTemplate template = new StringRedisTemplate(factory); setSerializer(template);// 设置序列化工具 template.afterPropertiesSet(); return template; &#125; private void setSerializer(StringRedisTemplate template) &#123; @SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;) Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om); template.setValueSerializer(jackson2JsonRedisSerializer); &#125;&#125; 运行测试，控制台输出：123452017-11-17 18:17:06.995 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-17 18:17:07.128 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-17 18:17:07.152 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang学号001的学生姓名为：KangKang 第二次查询没有访问数据库，而是从缓存中获取的，在redis中查看该值：12345127.0.0.1:6379&gt; keys *1) &quot;student~keys&quot;2) &quot;001&quot;127.0.0.1:6379&gt; get 001&quot;[\\&quot;com.springboot.bean.Student\\&quot;,&#123;\\&quot;sno\\&quot;:\\&quot;001\\&quot;,\\&quot;name\\&quot;:\\&quot;KangKang\\&quot;,\\&quot;sex\\&quot;:\\&quot;M \\&quot;&#125;]&quot; 在测试方法中测试更新：1234567891011@Testpublic void test() throws Exception &#123; Student student1 = this.studentService.queryStudentBySno(&quot;001&quot;); System.out.println(&quot;学号&quot; + student1.getSno() + &quot;的学生姓名为：&quot; + student1.getName()); student1.setName(&quot;康康&quot;); this.studentService.update(student1); Student student2 = this.studentService.queryStudentBySno(&quot;001&quot;); System.out.println(&quot;学号&quot; + student2.getSno() + &quot;的学生姓名为：&quot; + student2.getName());&#125; 控制台输出： 123456789学号001的学生姓名为：KangKang2017-11-17 19:30:05.813 INFO 11244 --- [main] com.alibaba.druid.pool.DruidDataSource : &#123;dataSource-1&#125; inited2017-11-17 19:30:05.823 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update : ==&gt; Preparing: update student set sname=?,ssex=? where sno=? 2017-11-17 19:30:05.941 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update : ==&gt; Parameters: 康康(String), M (String), 001(String)2017-11-17 19:30:05.953 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update : &lt;== Updates: 12017-11-17 19:30:05.957 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-17 19:30:05.959 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-17 19:30:05.976 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：康康 在redis中查看：12127.0.0.1:6379&gt; get 001&quot;[\\&quot;com.springboot.bean.Student\\&quot;,&#123;\\&quot;sno\\&quot;:\\&quot;001\\&quot;,\\&quot;name\\&quot;:\\&quot;\\xe5\\xba\\xb7\\xe5\\xba\\xb7\\&quot;,\\&quot;sex\\&quot;:\\&quot;M \\&quot;&#125;]&quot; 可见更新数据库的同时，缓存也得到了更新。1源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/09.Spring-Boot-Redis-Cache Ehcache引入Ehcache依赖：12345&lt;!-- ehcache --&gt;&lt;dependency&gt; &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache&lt;/artifactId&gt;&lt;/dependency&gt; 在src/main/resources目录下新建ehcache.xml： 123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;ehcache.xsd&quot;&gt; &lt;defaultCache maxElementsInMemory=&quot;10000&quot; eternal=&quot;false&quot; timeToIdleSeconds=&quot;3600&quot; timeToLiveSeconds=&quot;0&quot; overflowToDisk=&quot;false&quot; diskPersistent=&quot;false&quot; diskExpiryThreadIntervalSeconds=&quot;120&quot; /&gt; &lt;cache name=&quot;student&quot; maxEntriesLocalHeap=&quot;2000&quot; eternal=&quot;false&quot; timeToIdleSeconds=&quot;3600&quot; timeToLiveSeconds=&quot;0&quot; overflowToDisk=&quot;false&quot; statistics=&quot;true&quot;/&gt;&lt;/ehcache&gt; 关于Ehcahe的一些说明： name：缓存名称。 maxElementsInMemory：缓存最大数目 maxElementsOnDisk：硬盘最大缓存个数。 eternal：对象是否永久有效，一但设置了，timeout将不起作用。 overflowToDisk：是否保存到磁盘。 timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。 timeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0，也就是对象存活时间无穷大。 diskPersistent：是否缓存虚拟机重启期数据，默认值为false。 diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。 diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。 memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。 clearOnFlush：内存数量最大时是否清除。 memoryStoreEvictionPolicy：Ehcache的三种清空策略：FIFO，first in first out，这个是大家最熟的，先进先出。LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。接着在application.yml中指定ehcache配置的路径：1234spring: cache: ehcache: config: &apos;classpath:ehcache.xml&apos; 这样就可以开始使用ehcache了，运行测试类，观察控制台：12345672017-11-18 09:10:40.201 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-18 09:10:40.343 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-18 09:10:40.364 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang学号001的学生姓名为：KangKang可看到第二次是从缓存中获取的。测试更新： 2017-11-18 09:18:04.230 DEBUG 11556 — [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select from student where sno=?2017-11-18 09:18:04.397 DEBUG 11556 — [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-18 09:18:04.427 DEBUG 11556 — [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang2017-11-18 09:18:04.433 DEBUG 11556 — [main] c.s.mapper.StudentMapper.update : ==&gt; Preparing: update student set sname=?,ssex=? where sno=?2017-11-18 09:18:04.438 DEBUG 11556 — [main] c.s.mapper.StudentMapper.update : ==&gt; Parameters: 康康(String), M (String), 001(String)2017-11-18 09:18:04.440 DEBUG 11556 — [main] c.s.mapper.StudentMapper.update : &lt;== Updates: 12017-11-18 09:18:04.440 DEBUG 11556 — [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select from student where sno=?2017-11-18 09:18:04.441 DEBUG 11556 — [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-18 09:18:04.442 DEBUG 11556 — [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：康康可见，即使更新方法加了@CachePut注解，第二次查询因为Student对象更新了，其是从数据库获取数据的，所以对于Ehcache来说，更新方法加不加@CachePut注解，结果都一样。","categories":[],"tags":[],"keywords":[]},{"title":"Spring Boot中使用thymeleaf","slug":"Spring-Boot中使用thymeleaf","date":"2020-07-03T10:35:58.000Z","updated":"2020-07-06T02:13:57.324Z","comments":true,"path":"2020/07/03/Spring-Boot中使用thymeleaf/","link":"","permalink":"http://joinyon.top/2020/07/03/Spring-Boot中使用thymeleaf/","excerpt":"","text":"Spring Boot支持FreeMarker、Groovy、Thymeleaf和Mustache四种模板解析引擎，官方推荐使用Thymeleaf。 spring-boot-starter-thymeleaf在Spring Boot中使用Thymeleaf只需在pom中加入Thymeleaf的starter即可：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; 在Spring Boot 1.5.9.RELEASE版本中，默认的Thymeleaf版本为2.1.6.RELEASE版本，这里推荐使用3.0以上版本。在pom中将Thymeleaf的版本修改为3.0.2.RELEASE： 1234&lt;properties&gt; &lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt; &lt;thymeleaf-layout-dialect.version&gt;2.0.1&lt;/thymeleaf-layout-dialect.version&gt;&lt;/properties&gt; 在Spring Boot中，默认的html页面地址为src/main/resources/templates，默认的静态资源地址为src/main/resources/static。 Thymeleaf默认配置在Spring Boot配置文件中可对Thymeleaf的默认配置进行修改：123456789101112131415161718192021222324#开启模板缓存（默认值：true）spring.thymeleaf.cache=true #Check that the template exists before rendering it.spring.thymeleaf.check-template=true #检查模板位置是否正确（默认值:true）spring.thymeleaf.check-template-location=true#Content-Type的值（默认值：text/html）spring.thymeleaf.content-type=text/html#开启MVC Thymeleaf视图解析（默认值：true）spring.thymeleaf.enabled=true#模板编码spring.thymeleaf.encoding=UTF-8#要被排除在解析之外的视图名称列表，用逗号分隔spring.thymeleaf.excluded-view-names=#要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5)spring.thymeleaf.mode=HTML5#在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/）spring.thymeleaf.prefix=classpath:/templates/#在构建URL时添加到视图名称后的后缀（默认值：.html）spring.thymeleaf.suffix=.html#Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。spring.thymeleaf.template-resolver-order=#可解析的视图名称列表，用逗号分隔spring.thymeleaf.view-names= 一般开发中将spring.thymeleaf.cache设置为false，其他保持默认值即可。 简单示例编写一个简单的Controller：1234567891011121314@Controllerpublic class IndexController &#123; @RequestMapping(&quot;/account&quot;) public String index(Model m) &#123; List&lt;Account&gt; list = new ArrayList&lt;Account&gt;(); list.add(new Account(&quot;KangKang&quot;, &quot;康康&quot;, &quot;e10adc3949ba59abbe56e&quot;, &quot;超级管理员&quot;, &quot;17777777777&quot;)); list.add(new Account(&quot;Mike&quot;, &quot;麦克&quot;, &quot;e10adc3949ba59abbe56e&quot;, &quot;管理员&quot;, &quot;13444444444&quot;)); list.add(new Account(&quot;Jane&quot;,&quot;简&quot;,&quot;e10adc3949ba59abbe56e&quot;,&quot;运维人员&quot;,&quot;18666666666&quot;)); list.add(new Account(&quot;Maria&quot;, &quot;玛利亚&quot;, &quot;e10adc3949ba59abbe56e&quot;, &quot;清算人员&quot;, &quot;19999999999&quot;)); m.addAttribute(&quot;accountList&quot;,list); return &quot;account&quot;; &#125;&#125; 编写account.html页面：12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt; &lt;title&gt;account&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; th:href=&quot;@&#123;/css/style.css&#125;&quot; type=&quot;text/css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;no&lt;/th&gt; &lt;th&gt;account&lt;/th&gt; &lt;th&gt;name&lt;/th&gt; &lt;th&gt;password&lt;/th&gt; &lt;th&gt;accountType&lt;/th&gt; &lt;th&gt;tel&lt;/th&gt; &lt;/tr&gt; &lt;tr th:each=&quot;list,stat : $&#123;accountList&#125;&quot;&gt; &lt;td th:text=&quot;$&#123;stat.count&#125;&quot;&gt;&lt;/td&gt; &lt;td th:text=&quot;$&#123;list.account&#125;&quot;&gt;&lt;/td&gt; &lt;td th:text=&quot;$&#123;list.name&#125;&quot;&gt;&lt;/td&gt; &lt;td th:text=&quot;$&#123;list.password&#125;&quot;&gt;&lt;/td&gt; &lt;td th:text=&quot;$&#123;list.accountType&#125;&quot;&gt;&lt;/td&gt; &lt;td th:text=&quot;$&#123;list.tel&#125;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[],"keywords":[]},{"title":"Spring Boot AOP记录用户操作日志","slug":"Spring-Boot-AOP记录用户操作日志","date":"2020-06-30T11:52:16.000Z","updated":"2020-07-03T10:22:51.394Z","comments":true,"path":"2020/06/30/Spring-Boot-AOP记录用户操作日志/","link":"","permalink":"http://joinyon.top/2020/06/30/Spring-Boot-AOP记录用户操作日志/","excerpt":"","text":"在Spring框架中，使用AOP配合自定义注解可以方便的实现用户操作的监控。首先搭建一个基本的Spring Boot Web环境开启Spring Boot，然后引入必要依赖：123456789101112131415161718192021222324&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- aop依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- mysql驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt;&lt;!-- druid数据源驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt; 自定义注解定义一个方法级别的@Log注解，用于标注需要监控的方法：12345@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface Log &#123; String value() default &quot;&quot;;&#125; 创建库表和实体在数据库中创建一张sys_log表，用于保存用户的操作日志，数据库采用mysql：1234567891011121314151617181920CREATE TABLE &quot;SCOTT&quot;.&quot;SYS_LOG&quot; ( &quot;ID&quot; NUMBER(20) NOT NULL , &quot;USERNAME&quot; VARCHAR2(50 BYTE) NULL , &quot;OPERATION&quot; VARCHAR2(50 BYTE) NULL , &quot;TIME&quot; NUMBER(11) NULL , &quot;METHOD&quot; VARCHAR2(200 BYTE) NULL , &quot;PARAMS&quot; VARCHAR2(500 BYTE) NULL , &quot;IP&quot; VARCHAR2(64 BYTE) NULL , &quot;CREATE_TIME&quot; DATE NULL );COMMENT ON COLUMN &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;USERNAME&quot; IS &apos;用户名&apos;;COMMENT ON COLUMN &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;OPERATION&quot; IS &apos;用户操作&apos;;COMMENT ON COLUMN &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;TIME&quot; IS &apos;响应时间&apos;;COMMENT ON COLUMN &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;METHOD&quot; IS &apos;请求方法&apos;;COMMENT ON COLUMN &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;PARAMS&quot; IS &apos;请求参数&apos;;COMMENT ON COLUMN &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;IP&quot; IS &apos;IP地址&apos;;COMMENT ON COLUMN &quot;SCOTT&quot;.&quot;SYS_LOG&quot;.&quot;CREATE_TIME&quot; IS &apos;创建时间&apos;;CREATE SEQUENCE seq_sys_log START WITH 1 INCREMENT BY 1; 库表对应的实体：1234567891011121314public class SysLog implements Serializable&#123; private static final long serialVersionUID = -6309732882044872298L; private Integer id; private String username; private String operation; private Integer time; private String method; private String params; private String ip; private Date createTime; // get,set略&#125; 保存日志的方法为了方便，这里直接使用Spring JdbcTemplate来操作数据库。定义一个SysLogDao接口，包含一个保存操作日志的抽象方法：123public interface SysLogDao &#123; void saveSysLog(SysLog syslog);&#125; 其实现方法：1234567891011121314151617@Repositorypublic class SysLogDaoImp implements SysLogDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Override public void saveSysLog(SysLog syslog) &#123; StringBuffer sql = new StringBuffer(&quot;insert into sys_log &quot;); sql.append(&quot;(id,username,operation,time,method,params,ip,create_time) &quot;); sql.append(&quot;values(seq_sys_log.nextval,:username,:operation,:time,:method,&quot;); sql.append(&quot;:params,:ip,:createTime)&quot;); NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(this.jdbcTemplate.getDataSource()); npjt.update(sql.toString(), new BeanPropertySqlParameterSource(syslog)); &#125;&#125; 切面和切点定义一个LogAspect类，使用@Aspect标注让其成为一个切面，切点为使用@Log注解标注的方法，使用@Around环绕通知： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364@Aspect@Componentpublic class LogAspect &#123; @Autowired private SysLogDao sysLogDao; @Pointcut(&quot;@annotation(com.springboot.annotation.Log)&quot;) public void pointcut() &#123; &#125; @Around(&quot;pointcut()&quot;) public Object around(ProceedingJoinPoint point) &#123; Object result = null; long beginTime = System.currentTimeMillis(); try &#123; // 执行方法 result = point.proceed(); &#125; catch (Throwable e) &#123; e.printStackTrace(); &#125; // 执行时长(毫秒) long time = System.currentTimeMillis() - beginTime; // 保存日志 saveLog(point, time); return result; &#125; private void saveLog(ProceedingJoinPoint joinPoint, long time) &#123; MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); SysLog sysLog = new SysLog(); Log logAnnotation = method.getAnnotation(Log.class); if (logAnnotation != null) &#123; // 注解上的描述 sysLog.setOperation(logAnnotation.value()); &#125; // 请求的方法名 String className = joinPoint.getTarget().getClass().getName(); String methodName = signature.getName(); sysLog.setMethod(className + &quot;.&quot; + methodName + &quot;()&quot;); // 请求的方法参数值 Object[] args = joinPoint.getArgs(); // 请求的方法参数名称 LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer(); String[] paramNames = u.getParameterNames(method); if (args != null &amp;&amp; paramNames != null) &#123; String params = &quot;&quot;; for (int i = 0; i &lt; args.length; i++) &#123; params += &quot; &quot; + paramNames[i] + &quot;: &quot; + args[i]; &#125; sysLog.setParams(params); &#125; // 获取request HttpServletRequest request = HttpContextUtils.getHttpServletRequest(); // 设置IP地址 sysLog.setIp(IPUtils.getIpAddr(request)); // 模拟一个用户名 sysLog.setUsername(&quot;mrbird&quot;); sysLog.setTime((int) time); sysLog.setCreateTime(new Date()); // 保存系统日志 sysLogDao.saveSysLog(sysLog); &#125;&#125; 测试TestController：1234567891011121314151617@RestControllerpublic class TestController &#123; @Log(&quot;执行方法一&quot;) @GetMapping(&quot;/one&quot;) public void methodOne(String name) &#123; &#125; @Log(&quot;执行方法二&quot;) @GetMapping(&quot;/two&quot;) public void methodTwo() throws InterruptedException &#123; Thread.sleep(2000); &#125; @Log(&quot;执行方法三&quot;) @GetMapping(&quot;/three&quot;) public void methodThree(String name, String age) &#123; &#125;&#125; 以上方式原是使用Oracle数据库，放到mysql有问题，故采取以下方式完成。SpringBoot + AOP + MySQL监控系统数据变更实战 记录一下Spring AOP切入DAO层，进行数据监控。 在写这个需求时，从网上找了很多的资料，大部分都是没有解决相关问题的。当然也有少数部分解决，但用的还是SSM架构的xml配置。一开始我的出发点是通过注解@annotation的方式来切入DAO需要监控的方法，但是并没有用。接下来剖析下个人的实现和思路。 相关依赖 spring-boot-starter-web mysql-connector-java lombok spring-boot-starter-aop mybatis-spring-boot-starterSpring AOP两种代理 jdk代理使用Java动态代理来创建AOP代理，在程序运行期间由JVM根据反射等机制动态的生成（当然此接口要有实现类）。 cglib代理代理类不是接口时，Spring会切换为使用CGLIB代理，它的工作原理是：直接在class字节码文件添加增强的代码。 思路在这里只针对ADD、UPDATE、DELETE做相关数据处理。 直接使用注解@annotation的方式是不能实现，所以我先通过execution的方式切到DAO层，再通过一个自定义注解区分数据操作的类型以及区分所操作的是哪一张表，具体详情如下： 记录ADD操作：使用@After注解，由于新增一条数据中如果有自增的值，也需要把自增对应字段的值也要记录，所有在执行完之后记录 记录DELETE操作：使用@Before注解，在执行删除之前，记录原数据。如果在删除之后再记录的话，那条数据已经没有了 记录UPDATE操作：使用@Around注解，记录更新前后的数据，旧数据与新数据有父子关系，这样数据才能一一对应。 主要核心代码 自定义注解类 1234567891011121314@Target(&#123;ElementType.METHOD&#125;)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface AuditAction &#123; /** * 操作类型 */ Action action() default Action.GET; /** * 目标table */ String targetTable() default &quot;&quot;;&#125; 操作类型枚举类 123456public enum Action &#123; ADD, DELETE, UPDATE, GET&#125; 相关DAO层接口中，在需要监控的方法上加上注解 1234567891011121314@Mapperpublic interface CompanyDao &#123; Company getCompanyByNum(int companyNum); @AuditAction(action = Action.ADD, targetTable = &quot;company&quot;) int addCompany(Company company); @AuditAction(action = Action.UPDATE, targetTable = &quot;company&quot;) int updateCompany(Company company); @AuditAction(action = Action.DELETE, targetTable = &quot;company&quot;) int deleteCompany(int companyNum);&#125; 定义切面类 123456@Slf4j@Aspect@Componentpublic class SystemAudioAspect &#123; // 省略相关业务代码，详细代码请看博客末尾&#125; 切面类: 监控DELETE操作 对应DELETE操作，这里我采用在执行之前拦截@Before，@Before(value = &quot;execution(public * com.jtcoding.auditlog.dao...delete(..))&quot;)** 拦截所有的delete*方法，通过@AuditAction注解来判定是否需要监控，再通过注解中的targetTable来区分对应是对哪个表的操作，具体代码如下： 12345678910111213141516171819202122232425262728 /** * 拦截DELETE操作，记录被删除的数据 * @param joinPoint */@Before(value = &quot;execution(public * com.jtcoding.auditlog.dao..*.delete*(..))&quot;)public void doBefore(JoinPoint joinPoint) &#123; // 获取方法中的参数 Object[] args = joinPoint.getArgs(); // 获取该方法上的 @AuditAction注解 AuditAction audioAction = this.getAudioActionByJoinPoint(joinPoint); if (audioAction != null &amp;&amp; audioAction.action() == Action.DELETE) &#123; Object obj = null; String targetTable = audioAction.targetTable(); switch (targetTable) &#123; case &quot;company&quot;: int companyNum = (int) args[0]; obj = companyService.getCompanyByNum(companyNum); break; case &quot;plan&quot;: int planNum = (int) args[0]; obj = planService.getPlanByNum(planNum); break; &#125; if (obj != null) &#123; this.addAudioLog(obj, AuditLogDao.DELETE, targetTable, null); &#125; &#125;&#125; 测试 Add Company : /companies POST Request Delete Company : /companies/{companyNum} DELETE Request Update Company : /companies PUT Request","categories":[],"tags":[],"keywords":[]},{"title":"Spring Boot MyBatis配置Druid多数据源","slug":"Spring-Boot-MyBatis配置Druid多数据源","date":"2020-06-30T07:49:41.000Z","updated":"2020-06-30T07:49:42.011Z","comments":true,"path":"2020/06/30/Spring-Boot-MyBatis配置Druid多数据源/","link":"","permalink":"http://joinyon.top/2020/06/30/Spring-Boot-MyBatis配置Druid多数据源/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"Spring Boot中使用JdbcTemplate","slug":"Spring-Boot中使用JdbcTemplate","date":"2020-06-29T15:11:02.000Z","updated":"2020-06-30T11:52:31.651Z","comments":true,"path":"2020/06/29/Spring-Boot中使用JdbcTemplate/","link":"","permalink":"http://joinyon.top/2020/06/29/Spring-Boot中使用JdbcTemplate/","excerpt":"","text":"JdbcTemplate和MyBaits，Hibernate等数据库框架一样，方便操作上手，对SQL的操作也更为直观方便，所以在项目中也是一个不错的选择。在Spring Boot开启JdbcTemplate很简单，只需要引入spring-boot-starter-jdbc依赖即可。JdbcTemplate封装了许多SQL操作，具体可查阅官方文档。 引入依赖spring-boot-starter-jdbc：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt; 注意:配置好之后登陆druid数据源出现(*) property for user to setup 这个时候只需要在项目中成功发送一次请求，需要连接一次数据库，简单查询一些数据就可以了。 数据库驱动为mysql*，数据源采用Druid。具体可参考。 代码编写数据准备：123456789CREATE TABLE &quot;SCOTT&quot;.&quot;STUDENT&quot; ( &quot;SNO&quot; VARCHAR2(3 BYTE) NOT NULL , &quot;SNAME&quot; VARCHAR2(9 BYTE) NOT NULL , &quot;SSEX&quot; CHAR(2 BYTE) NOT NULL );INSERT INTO &quot;SCOTT&quot;.&quot;STUDENT&quot; VALUES (&apos;001&apos;, &apos;KangKang&apos;, &apos;M &apos;);INSERT INTO &quot;SCOTT&quot;.&quot;STUDENT&quot; VALUES (&apos;002&apos;, &apos;Mike&apos;, &apos;M &apos;);INSERT INTO &quot;SCOTT&quot;.&quot;STUDENT&quot; VALUES (&apos;003&apos;, &apos;Jane&apos;, &apos;F &apos;); 这里主要演示在Dao的实现类里使用JdbcTemplate，所以其它模块代码的编写就不展示了，具体可参考文末的源码。StudentDaoImp类代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152@Repository(&quot;studentDao&quot;)public class StudentDaoImp implements StudentDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Override public int add(Student student) &#123; // String sql = &quot;insert into student(sno,sname,ssex) values(?,?,?)&quot;; // Object[] args = &#123; student.getSno(), student.getName(), student.getSex() &#125;; // int[] argTypes = &#123; Types.VARCHAR, Types.VARCHAR, Types.VARCHAR &#125;; // return this.jdbcTemplate.update(sql, args, argTypes); String sql = &quot;insert into student(sno,sname,ssex) values(:sno,:name,:sex)&quot;; NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(this.jdbcTemplate.getDataSource()); return npjt.update(sql, new BeanPropertySqlParameterSource(student)); &#125; @Override public int update(Student student) &#123; String sql = &quot;update student set sname = ?,ssex = ? where sno = ?&quot;; Object[] args = &#123; student.getName(), student.getSex(), student.getSno() &#125;; int[] argTypes = &#123; Types.VARCHAR, Types.VARCHAR, Types.VARCHAR &#125;; return this.jdbcTemplate.update(sql, args, argTypes); &#125; @Override public int deleteBysno(String sno) &#123; String sql = &quot;delete from student where sno = ?&quot;; Object[] args = &#123; sno &#125;; int[] argTypes = &#123; Types.VARCHAR &#125;; return this.jdbcTemplate.update(sql, args, argTypes); &#125; @Override public List&lt;Map&lt;String, Object&gt;&gt; queryStudentsListMap() &#123; String sql = &quot;select * from student&quot;; return this.jdbcTemplate.queryForList(sql); &#125; @Override public Student queryStudentBySno(String sno) &#123; String sql = &quot;select * from student where sno = ?&quot;; Object[] args = &#123; sno &#125;; int[] argTypes = &#123; Types.VARCHAR &#125;; List&lt;Student&gt; studentList = this.jdbcTemplate.query(sql, args, argTypes, new StudentMapper()); if (studentList != null &amp;&amp; studentList.size() &gt; 0) &#123; return studentList.get(0); &#125; else &#123; return null; &#125; &#125;&#125; 在引入spring-boot-starter-jdbc驱动后，可直接在类中注入JdbcTemplate。由上面代码可发现，对于保存操作有两种不同的方法，当插入的表字段较多的情况下，推荐使用NamedParameterJdbcTemplate。 对于返回结果，可以直接使用List&lt;Map&lt;String, Object&gt;&gt;来接收，这也是个人比较推荐使用的方式，毕竟比较简单方便；也可以使用库表对应的实体对象来接收，不过这时候我们就需要手动创建一个实现了org.springframework.jdbc.core.RowMapper的对象，用于将实体对象属性和库表字段一一对应： 12345678910public class StudentMapper implements RowMapper&lt;Student&gt;&#123; @Override public Student mapRow(ResultSet rs, int rowNum) throws SQLException &#123; Student student = new Student(); student.setSno(rs.getString(&quot;sno&quot;)); student.setName(rs.getString(&quot;sname&quot;)); student.setSex(rs.getString(&quot;ssex&quot;)); return student; &#125;&#125; 启动项目，测试插入数据http://localhost:8080/web/addstudent?sno=004&amp;name=Maria&amp;sex=F： 查询所有学生数据http://localhost:8080/web/queryallstudent:","categories":[],"tags":[],"keywords":[]},{"title":"Spring Boot中使用MyBatis","slug":"Spring-Boot中使用MyBatis","date":"2020-06-28T09:21:45.000Z","updated":"2020-06-30T01:52:26.775Z","comments":true,"path":"2020/06/28/Spring-Boot中使用MyBatis/","link":"","permalink":"http://joinyon.top/2020/06/28/Spring-Boot中使用MyBatis/","excerpt":"","text":"整合MyBatis之前，先搭建一个基本的Spring Boot项目开启Spring Boot。然后引入mybatis-spring-boot-starter和数据库连接驱动（这里使用MySQL数据库）。 mybatis-spring-boot-starter在pom中引入：12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.3&lt;/version&gt;&lt;/dependency&gt; 不同版本的Spring Boot和MyBatis版本对应不一样，具体可查看官方文档：http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/。 通过dependency:tree命令查看mybatis-spring-boot-starter都有哪些隐性依赖： 12345678[INFO] \\- org.mybatis.spring.boot:mybatis-spring-boot-starter:jar:2.1.3:compile[INFO] +- org.springframework.boot:spring-boot-starter-jdbc:jar:2.3.1.RELEASE:compile[INFO] | +- com.zaxxer:HikariCP:jar:3.4.5:compile[INFO] | \\- org.springframework:spring-jdbc:jar:5.2.7.RELEASE:compile[INFO] | \\- org.springframework:spring-tx:jar:5.2.7.RELEASE:compile[INFO] +- org.mybatis.spring.boot:mybatis-spring-boot-autoconfigure:jar:2.1.3:compile[INFO] +- org.mybatis:mybatis:jar:3.5.5:compile[INFO] \\- org.mybatis:mybatis-spring:jar:2.0.5:compile 可发现其包含了spring-boot-starter-jdbc依赖，默认使用tomcat-jdbc数据源。 mysql-connector-java在pom中引入：12345&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; Druid数据源Druid是一个关系型数据库连接池，是阿里巴巴的一个开源项目，地址：https://github.com/alibaba/druid。Druid不但提供连接池的功能，还提供监控功能，可以实时查看数据库连接池和SQL查询的工作情况。 配置Druid依赖Druid为Spring Boot项目提供了对应的starter： 123456&lt;!--集成druid连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt; &lt;/dependency&gt; Druid数据源配置上面通过查看mybatis starter的隐性依赖发现，Spring Boot的数据源配置的默认类型是org.apache.tomcat.jdbc.pool.Datasource，为了使用Druid连接池，需要在application.yml下配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263server: context-path: /webspring: datasource: druid: # 数据库访问配置, 使用druid数据源 type: com.alibaba.druid.pool.DruidDataSource driver-class-name: oracle.jdbc.driver.OracleDriver url: jdbc:oracle:thin:@localhost:1521:ORCL username: scott password: 123456 # 连接池配置 initial-size: 5 min-idle: 5 max-active: 20 # 连接等待超时时间 max-wait: 30000 # 配置检测可以关闭的空闲连接间隔时间 time-between-eviction-runs-millis: 60000 # 配置连接在池中的最小生存时间 min-evictable-idle-time-millis: 300000 validation-query: select &apos;1&apos; from dual test-while-idle: true test-on-borrow: false test-on-return: false # 打开PSCache，并且指定每个连接上PSCache的大小 pool-prepared-statements: true max-open-prepared-statements: 20 max-pool-prepared-statement-per-connection-size: 20 # 配置监控统计拦截的filters, 去掉后监控界面sql无法统计, &apos;wall&apos;用于防火墙 filters: stat,wall # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔 aop-patterns: com.springboot.servie.* # WebStatFilter配置 web-stat-filter: enabled: true # 添加过滤规则 url-pattern: /* # 忽略过滤的格式 exclusions: &apos;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&apos; # StatViewServlet配置 stat-view-servlet: enabled: true # 访问路径为/druid时，跳转到StatViewServlet url-pattern: /druid/* # 是否能够重置数据 reset-enable: false # 需要账号密码才能访问控制台 login-username: druid login-password: druid123 # IP白名单 # allow: 127.0.0.1 # IP黑名单（共同存在时，deny优先于allow） # deny: 192.168.1.218 # 配置StatFilter filter: stat: log-slow-sql: true 这里需要注意yml和properties的区别:1234567891011121314151617181920212223242526272829303132333435363738SpringBoot的配置文件有两种：一种是properties结尾的，一种是yaml或者yml文件结尾的。application.propertiesapplication.yml1.默认情况下是properties结尾的配置文件，都放在src/main/resources目录。例：application.properties文件配置：//随机端口号server.port=$&#123;random.int[1024,9999]&#125;server.port=9090gx.msg=hi,hello world转换为application.yml文件配置：server: port: 9090gx: msg: hi,hello world【以空格的缩进程度来控制层级关系，空格个数不重要】。2.区别 正常的情况是先加载yml，接下来加载properties文件。如果相同的配置存在于两个文件中。最后会使用properties中的配置。最后读取的优先集最高。 两个配置文件中的端口号不一样会读取properties中的端口号 以空格的缩进程度来控制层级关系，空格个数不重要，冒号后面要有空格 上述配置不但配置了Druid作为连接池，而且还开启了Druid的监控功能。 其他配置可参考官方wiki——https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter此时，运行项目，访问http://localhost:8080/druid/login.html： 输入账号密码即可看到Druid监控后台：账号密码为配置的:login-username、login-password关于Druid的更多说明，可查看官方wiki 使用MyBatis使用的库表：123456789CREATE TABLE &quot;SCOTT&quot;.&quot;STUDENT&quot; ( &quot;SNO&quot; VARCHAR2(3 BYTE) NOT NULL , &quot;SNAME&quot; VARCHAR2(9 BYTE) NOT NULL , &quot;SSEX&quot; CHAR(2 BYTE) NOT NULL );INSERT INTO &quot;SCOTT&quot;.&quot;STUDENT&quot; VALUES (&apos;001&apos;, &apos;KangKang&apos;, &apos;M &apos;);INSERT INTO &quot;SCOTT&quot;.&quot;STUDENT&quot; VALUES (&apos;002&apos;, &apos;Mike&apos;, &apos;M &apos;);INSERT INTO &quot;SCOTT&quot;.&quot;STUDENT&quot; VALUES (&apos;003&apos;, &apos;Jane&apos;, &apos;F &apos;); 创建对应实体：1234567public class Student implements Serializable&#123; private static final long serialVersionUID = -339516038496531943L; private String sno; private String name; private String sex; // get,set略&#125; 创建一个包含基本CRUD的StudentMapper：12345public interface StudentMapper &#123; int add(Student student); int update(Student student); Student queryStudentById(Long id);&#125; [原文](https://github.com/wuyouzhuguli/SpringAll) StudentMapper的实现可以基于xml也可以基于注解。 使用注解方式继续编辑StudentMapper：12345678910111213141516171819@Component@Mapperpublic interface StudentMapper &#123; @Insert(&quot;insert into student(sno,sname,ssex) values(#&#123;sno&#125;,#&#123;name&#125;,#&#123;sex&#125;)&quot;) int add(Student student); @Update(&quot;update student set sname=#&#123;name&#125;,ssex=#&#123;sex&#125; where sno=#&#123;sno&#125;&quot;) int update(Student student); @Delete(&quot;delete from student where sno=#&#123;sno&#125;&quot;) int deleteBysno(String sno); @Select(&quot;select * from student where sno=#&#123;sno&#125;&quot;) @Results(id = &quot;student&quot;,value= &#123; @Result(property = &quot;sno&quot;, column = &quot;sno&quot;, javaType = String.class), @Result(property = &quot;name&quot;, column = &quot;sname&quot;, javaType = String.class), @Result(property = &quot;sex&quot;, column = &quot;ssex&quot;, javaType = String.class) &#125;) Student queryStudentBySno(String sno); 简单的语句只需要使用@Insert、@Update、@Delete、@Select这4个注解即可，动态SQL语句需要使用@InsertProvider、@UpdateProvider、@DeleteProvider、@SelectProvider等注解。具体可参考MyBatis官方文档 使用xml方式使用xml方式需要在application.yml中进行一些额外的配置：1234567mybatis: # type-aliases扫描路径 # type-aliases-package: # mapper xml实现扫描路径 mapper-locations: classpath:mapper/*.xml property: order: BEFORE 测试接下来编写Service：123456public interface StudentService &#123; int add(Student student); int update(Student student); int deleteBysno(String sno); Student queryStudentBySno(String sno);&#125; 实现类：12345678910111213141516171819202122232425@Service(&quot;studentService&quot;)public class StudentServiceImp implements StudentService&#123; @Autowired private StudentMapper studentMapper; @Override public int add(Student student) &#123; return this.studentMapper.add(student); &#125; @Override public int update(Student student) &#123; return this.studentMapper.update(student); &#125; @Override public int deleteBysno(String sno) &#123; return this.studentMapper.deleteBysno(sno); &#125; @Override public Student queryStudentBySno(String sno) &#123; return this.studentMapper.queryStudentBySno(sno); &#125;&#125; 编写controller：1234567891011@RestControllerpublic class TestController &#123; @Autowired private StudentService studentService; @RequestMapping( value = &quot;/querystudent&quot;, method = RequestMethod.GET) public Student queryStudentBySno(String sno) &#123; return this.studentService.queryStudentBySno(sno); &#125;&#125; 查看SQL监控情况： 可看到其记录的就是刚刚访问/querystudent得到的SQL。","categories":[],"tags":[],"keywords":[]},{"title":"Spring Boot一些基础配置","slug":"Spring-Boot一些基础配置","date":"2020-06-24T09:06:43.000Z","updated":"2020-06-24T11:13:49.385Z","comments":true,"path":"2020/06/24/Spring-Boot一些基础配置/","link":"","permalink":"http://joinyon.top/2020/06/24/Spring-Boot一些基础配置/","excerpt":"","text":"定制BannerSpring Boot项目在启动的时候会有一个默认的启动图案：12345678 . ____ _ __ _ _ /\\\\ / ___&apos;_ __ _ _(_)_ __ __ _ \\ \\ \\ \\( ( )\\___ | &apos;_ | &apos;_| | &apos;_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) &apos; |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.3.1.RELEASE) 我们可以把这个图案修改为自己想要的。在src/main/resources目录下新建banner.txt文件，然后将自己的图案黏贴进去即可。ASCII图案可通过网站http://www.network-science.de/ascii/一键生成，比如输入mrbird生成图案后复制到banner.txt，启动项目，eclipse控制台输出如下：12345678910 | | | | / ___|_ _| | _ \\ / _ \\ |_ _|_ _| | | _ | | | | \\___ \\ | | | | | | | | | | | | | | || |_| | |_| |___) || | | |_| | |_| | | | | | |_| \\___/ \\___/|____/ |_| |____/ \\___/ |___| |_| (_):: Spring Boot :: (v2.3.1.RELEASE)2020-06-24 17:15:39.530 INFO 20478 --- [ main] com.example.demo.DemoApplication : Starting DemoApplication on zhangjunyangdeMacBook-Pro.local with PID 20478 (/Users/zhangjunyang/java/spring/demo/target/classes started by Young in /Users/zhangjunyang/java/spring/demo)2020-06-24 17:15:39.535 INFO 20478 --- [ main] com.example.demo.DemoApplication : No active profile set, falling back to default profiles: default2020-06-24 17:15:40.715 INFO 20478 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) banner也可以关闭，在main方法中：12345public static void main(String[] args) &#123; SpringApplication app = new SpringApplication(DemoApplication.class); app.setBannerMode(Mode.OFF); app.run(args);&#125; 全局配置文件在src/main/resources目录下，Spring Boot提供了一个名为application.properties的全局配置文件，可对一些默认配置的配置值进行修改。 附：application.properties中可配置所有官方属性 自定义属性值Spring Boot允许我们在application.properties下自定义一些属性，比如：12mrbird.blog.name=mrbird&apos;s blogmrbird.blog.title=Spring Boot 定义一个BlogProperties Bean，通过@Value(“${属性名}”)来加载配置文件中的属性值：1234567891011@Componentpublic class BlogProperties &#123; @Value(&quot;$&#123;mrbird.blog.name&#125;&quot;) private String name; @Value(&quot;$&#123;mrbird.blog.title&#125;&quot;) private String title; // get,set略 &#125; 编写IndexController，注入该Bean：12345678910@RestControllerpublic class IndexController &#123; @Autowired private BlogProperties blogProperties; @RequestMapping(&quot;/&quot;) String index() &#123; return blogProperties.getName()+&quot;——&quot;+blogProperties.getTitle(); &#125;&#125; Notice:这里的 @RequestMapping(&quot;/&quot;)不能和其他的一样，否则会启动的时候会报错:1234567891011 at com.example.demo.DemoApplication.main(DemoApplication.java:18) [classes/:na]Caused by: java.lang.IllegalStateException: Ambiguous mapping. Cannot map &apos;indexController&apos; method com.example.demo.controller.IndexController#index()to &#123; /&#125;: There is already &apos;demoApplication&apos; bean methodcom.example.demo.DemoApplication#index() mapped. at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.validateMethodMapping(AbstractHandlerMethodMapping.java:636) ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:603) ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.registerHandlerMethod(AbstractHandlerMethodMapping.java:318) ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.registerHandlerMethod(RequestMappingHandlerMapping.java:378) ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.registerHandlerMethod(RequestMappingHandlerMapping.java:75) ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lambda$detectHandlerMethods$1(AbstractHandlerMethodMapping.java:288) ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE] 启动项目，访问http://localhost:8080 在属性非常多的情况下，也可以定义一个和配置文件对应的Bean：123456@ConfigurationProperties(prefix=&quot;mrbird.blog&quot;)public class ConfigBean &#123; private String name; private String title; // get,set略&#125; 通过注解@ConfigurationProperties(prefix=&quot;mrbird.blog&quot;)指明了属性的通用前缀，通用前缀加属性名和配置文件的属性名一一对应。 除此之外还需在Spring Boot入口类加上注解@EnableConfigurationProperties({ConfigBean.class})来启用该配置：12345678@SpringBootApplication@EnableConfigurationProperties(&#123;ConfigBean.class&#125;)public class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 之后便可在IndexController中注入该Bean，并使用了：12345678910@RestControllerpublic class IndexController &#123; @Autowired private ConfigBean configBean; @RequestMapping(&quot;/&quot;) String index() &#123; return configBean.getName()+&quot;——&quot;+configBean.getTitle(); &#125;&#125; 属性间的引用在application.properties配置文件中，各个属性可以相互引用，如下：123mrbird.blog.name=mrbird&apos;s blogmrbird.blog.title=Spring Bootmrbird.blog.wholeTitle=$&#123;mrbird.blog.name&#125;--$&#123;mrbird.blog.title&#125; 自定义配置文件除了可以在application.properties里配置属性，我们还可以自定义一个配置文件。在src/main/resources目录下新建一个test.properties: 12test.name=KangKangtest.age=25 定义一个对应该配置文件的Bean：123456789@Configuration@ConfigurationProperties(prefix=&quot;test&quot;)@PropertySource(&quot;classpath:test.properties&quot;)@Componentpublic class TestConfigBean &#123; private String name; private int age; // get,set略&#125; 注解@PropertySource(&quot;classpath:test.properties&quot;)指明了使用哪个配置文件。要使用该配置Bean，同样也需要在入口类里使用注解@EnableConfigurationProperties({TestConfigBean.class})来启用该配置。 通过命令行设置属性值在运行Spring Boot jar文件时，可以使用命令java -jar xxx.jar --server.port=8081来改变端口的值。这条命令等价于我们手动到application.properties中修改（如果没有这条属性的话就添加）server.port属性的值为8081。 如果不想项目的配置被命令行修改，可以在入口文件的main方法中进行如下设置：12345public static void main(String[] args) &#123; SpringApplication app = new SpringApplication(Application.class); app.setAddCommandLineProperties(false); app.run(args);&#125; 使用xml配置虽然Spring Boot并不推荐我们继续使用xml配置，但如果出现不得不使用xml配置的情况，Spring Boot允许我们在入口类里通过注解@ImportResource({&quot;classpath:some-application.xml&quot;})来引入xml配置文件。 Profile配置Profile用来针对不同的环境下使用不同的配置文件，多环境配置文件必须以application-{profile}.properties的格式命，其中{profile}为环境标识。比如定义两个配置文件： application-dev.properties：开发环境 1server.port=8080 application-prod.properties：生产环境 1server.port=8081 至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。 如：spring.profiles.active=dev就会加载application-dev.properties配置文件内容。可以在运行jar文件的时候使用命令java -jar xxx.jar –spring.profiles.active={profile}切换不同的环境配置。1source code","categories":[],"tags":[],"keywords":[]},{"title":"开启Spring Boot","slug":"开启Spring-Boot","date":"2020-06-24T06:45:32.000Z","updated":"2020-06-24T09:06:02.813Z","comments":true,"path":"2020/06/24/开启Spring-Boot/","link":"","permalink":"http://joinyon.top/2020/06/24/开启Spring-Boot/","excerpt":"","text":"Spring Boot是在Spring框架上创建的一个全新的框架，其设计目的是简化Spring应用的搭建和开发过程。开启Spring Boot有许多种方法可供选择，这里仅介绍使用http://start.spring.io/来构建一个简单的Spring Boot项目。 生成项目文件访问http://start.spring.io/，页面显示如下：最后点击页面的generate project按钮生成项目文件。文件下载后是一个压缩包，进行解压然后使用eclipse以Maven项目的形式导入。导入后IDEA会自动编译项目并下载相应的依赖，项目目录如下所示： 简单演示项目根目录下生成了一个artifactId+Application命名规则的入口类，为了演示简单，不再新建控制器，直接在入口类中编写代码：1234567891011121314151617181920package com.example.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@SpringBootApplicationpublic class DemoApplication &#123; @RequestMapping(&quot;/&quot;) String index() &#123; return &quot;hello spring boot&quot;; &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125; 然后右键点击DemoAppliction，选择run → DemoAppliction 访问http://localhost:8080，页面显示如下： 打包发布 ？？？","categories":[],"tags":[],"keywords":[]},{"title":"使用IDEA搭建一个简单的SpringBoot项目","slug":"使用IDEA搭建一个简单的SpringBoot项目","date":"2020-06-19T10:18:12.000Z","updated":"2020-06-20T03:06:33.545Z","comments":true,"path":"2020/06/19/使用IDEA搭建一个简单的SpringBoot项目/","link":"","permalink":"http://joinyon.top/2020/06/19/使用IDEA搭建一个简单的SpringBoot项目/","excerpt":"","text":"一、创建项目 1.File-&gt;new-&gt;project；或者刚打开IDEA时 Create New Project 2.选择“Spring Initializr”，点击next；（jdk1.8默认即可） 3.完善项目信息，组名可不做修改，项目名可做修改；最终建的项目名为：test，src-&gt;main-&gt;java下包名会是：com-&gt;example-&gt;test；点击next； 4.Web下勾选Spring Web Start，（网上创建springboot项目多是勾选Web选项，而较高版本的Springboot没有此选项，勾选Spring Web Start即可，2.1.8版本是Spring Web）；Template Englines勾选Thymeleaf；SQL勾选：MySQL Driver，JDBC API 和 MyBatis Framework三项；点击next； 5.选择项目路径，点击finish；打开新的窗口； 6.观察一下刚创建好的项目目录结构二、Maven配置 7.点击右侧的Maven，点击设置（扳手图标）进行项目Maven仓库的配置； 8.（1）选择本地Maven路径；（2）勾选配置文件后边的选项，然后修改为本地Maven的配置文件，它会根据配置文件直接找到本地仓库位置； 9.配置完后，如果没有自动导包，可以点击左上角重新导包按钮，或者呢个下载按钮，选择下载所有源文件和文档 10.在templates文件下新建index.html页面，作为启动的初始页面； 11.在com.example.test下新建controller文件夹，在controller文件夹下建一个简单的helloController类；（Controller类要添加@Controller注解，项目启动时，SpringBoot会自动扫描加载Controller） 12.在resources文件夹下application中先配置DataSource基本信息，application文件有两种文件格式，一种是以.properties为后缀，一种是以.yml为后缀的，两种配置方式略有差别，详情可参考这里在这我是用.yml后缀的文件格式。右键application文件选择Refact，选择Rename，将后缀改为yml； 13.运行项目启动类TestApplication.java 14.在浏览器中输入localhost:8080,回车显示初始的index界面；到这项目的初步搭建已经完成，下面可以下一些简单的业务逻辑，比如从数据库获取信息，登录之类的简单功能三、连接数据库 15.在进行下一步编写时，我们先来链接一下数据库；点击右侧的Database，点“加号”，新建数据库链接； 16.填写数据库相关信息，点击Test Connection； 17.如果链接失败可能是驱动的问题，点击左上角的小扳手，进入数据库设置界面 18.连接成功后，显示数据库信息，user表的基本信息也显示了，下面就照这个来了；四、SpringBoot项目结构 19.SpringBoot项目大概分为四层（1）DAO层：包括XxxMapper.java(数据库访问接口类)，XxxMapper.xml(数据库链接实现)；（这个命名，有人喜欢用Dao命名，有人喜欢用Mapper，看个人习惯了吧） （2）Bean层：也叫model层，模型层，entity层，实体层，就是数据库表的映射实体类，存放POJO对象； （3）Service层：也叫服务层，业务层，包括XxxService.java(业务接口类)，XxxServiceImpl.java（业务实现类）；（可以在service文件夹下新建impl文件放业务实现类，也可以把业务实现类单独放一个文件夹下，更清晰） （4）Web层：就是Controller层，实现与web前端的交互。 20.代码展示： （1）在application配置文件中添加MyBatis配置： 123456789101112spring: datasource: name: test #数据库名 url: jdbc:mysql://localhost:3306/test #url username: root #用户名 password: 123456 #密码 driver-class-name: com.mysql.jdbc.Driver #数据库链接驱动 mybatis: mapper-locations: classpath:mapper/*.xml #配置映射文件 type-aliases-package: com.example.test.bean #配置实体类 （2）pom.xml文件配置信息（备注：这个文件以前没有，2019/12/9日粉丝发现的，这个里面也添加了单元测试所需的配置，记得要重新导一下Maven包哦） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;test&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;test&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--thymeleaf模板引擎配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--Web依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--MyBatis配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--MySQL数据库配置--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.41&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--单元测试配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; (3)Bean实体类，依据数据库表，生成set和get方法； 12345678910111213141516171819202122232425262728293031package com.example.test.bean; public class UserBean &#123; private int id; private String name; private String password; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125;&#125; * （4）DAO层访问数据库接口文件： 123456789package com.example.test.mapper; import com.example.test.bean.UserBean; public interface UserMapper &#123; UserBean getInfo(String name,String password); &#125; * （5）DAO层访问数据库实现文件，注意&lt;mapper&gt;标签的namespace属性要填写 访问数据库接口类文件路径： 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;com.example.test.mapper.UserMapper&quot;&gt; &lt;select id=&quot;getInfo&quot; parameterType=&quot;String&quot; resultType=&quot;com.example.test.bean.UserBean&quot;&gt; SELECT * FROM user WHERE name = #&#123;name&#125; AND password = #&#123;password&#125; &lt;/select&gt; &lt;/mapper&gt; * （6）Service层业务接口类编写： 123456789package com.example.test.service; import com.example.test.bean.UserBean; public interface UserService &#123; UserBean loginIn(String name,String password); &#125; * （7）Service层业务实现类编写，注意要注解@Service，注入DAO： 1234567891011121314151617181920package com.example.test.serviceImpl; import com.example.test.bean.UserBean;import com.example.test.mapper.UserMapper;import com.example.test.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service; @Servicepublic class UserServiceImpl implements UserService &#123; //将DAO注入Service层 @Autowired private UserMapper userMapper; @Override public UserBean loginIn(String name, String password) &#123; return userMapper.getInfo(name,password); &#125;&#125; * （8）项目启动类要添加注解@MapperScan项目启动时扫描mapper接口，否则会报错找不到mapper文件： 123456789101112131415package com.example.test; import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication@MapperScan(&quot;com.example.test.mapper&quot;)public class TestApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(TestApplication.class, args); &#125; &#125; * （9）编写测试类，看是否能成功 访问数据库，获取数据库信息： 12345678910111213141516171819202122232425package com.example.test; import com.example.test.bean.UserBean;import com.example.test.service.UserService;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner; @RunWith(SpringRunner.class)@SpringBootTestpublic class TestApplicationTests &#123; @Autowired UserService userService; @Test public void contextLoads() &#123; UserBean userBean = userService.loginIn(&quot;a&quot;,&quot;a&quot;); System.out.println(&quot;该用户ID为：&quot;); System.out.println(userBean.getId()); &#125; &#125; * （10） controller层，注意添加@controller注解，注入Service服务： 12345678910111213141516171819202122232425262728293031package com.example.test.controller; import com.example.test.bean.UserBean;import com.example.test.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod; @Controllerpublic class LoginController &#123; //将Service注入Web层 @Autowired UserService userService; @RequestMapping(&quot;/login&quot;) public String show()&#123; return &quot;login&quot;; &#125; @RequestMapping(value = &quot;/loginIn&quot;,method = RequestMethod.POST) public String login(String name,String password)&#123; UserBean userBean = userService.loginIn(name,password); if(userBean!=null)&#123; return &quot;success&quot;; &#125;else &#123; return &quot;error&quot;; &#125; &#125;&#125; * （11）html文件： 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;login&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form role=&quot;form&quot; action = &quot;/loginIn&quot; method=&quot;post&quot;&gt; 账号：&lt;input type=&quot;text&quot; id=&quot;name&quot; name = &quot;name&quot;&gt; &lt;br&gt; 密码：&lt;input type=&quot;password&quot; id = &quot;password&quot; name = &quot;password&quot;&gt; &lt;br&gt; &lt;input type=&quot;submit&quot; id = &quot;login&quot; value = &quot;login&quot;&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;success&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;登录成功！&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;error&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;登录失败！&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 运行 21.先运行测试类，看是否成功获取数据库信息： 22.同时发现一条警告信息，是数据库连接的jar包问题12019-08-02 11:25:04.150 WARN 16868 --- [ main] com.zaxxer.hikari.util.DriverDataSource : Registered driver with driverClassName=com.mysql.jdbc.Driver was not found, trying direct instantiation. 打开pom.xml文件，发现配置文件中未指定数据库连接的jar包的版本号，用version标签引入1&lt;version&gt;5.1.41&lt;/version&gt; 重新运行测试类，WARN警告消除 23.运行TestApplication.java文件，启动项目，无任何WARN警告信息，进入浏览器输入localhost:8080/login 项目到这里就算完美结束了。 总结 注意数据库连接数据库名称要正确，注意看测试的报错信息，数据库名和表名称要和mysql里面的一致。 IDE报红mapper包下的UserMapper使用Repository进行注解 其他需要多练习","categories":[],"tags":[],"keywords":[]},{"title":"智能POS终端MAC计算","slug":"智能POS终端MAC计算","date":"2020-06-18T08:25:19.000Z","updated":"2020-06-18T09:38:31.891Z","comments":true,"path":"2020/06/18/智能POS终端MAC计算/","link":"","permalink":"http://joinyon.top/2020/06/18/智能POS终端MAC计算/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"MAC系统上MySQL密码忘记重置方法","slug":"MAC系统上MySQL密码忘记重置方法","date":"2020-06-12T07:34:58.000Z","updated":"2020-06-12T09:05:39.832Z","comments":true,"path":"2020/06/12/MAC系统上MySQL密码忘记重置方法/","link":"","permalink":"http://joinyon.top/2020/06/12/MAC系统上MySQL密码忘记重置方法/","excerpt":"","text":"好记性不如一个乱笔头！我的 Mac 系统上安装的 MySQL 很久时间，突然有一天想自己连一下，发现密码忘记了。所以到网上搜了一下重置方法，一些没有用试了多次发现这个管用，故记录之。 在重置数据库密码之前，需要先把数据库的服务给停止了。可以直接在系统偏好设置里面停止，也可以用一下命令来停止。1sudo /usr/local/mysql/support-files/mysql.server stop 输入开机登录密码 服务停止后，进入文件夹1cd /usr/local/mysql/bin 执行下面的命令，获取权限1sudo su 重启服务器1./mysqld_safe --skip-grant-tables &amp; 再开启另外一个终端进入 bin 目录，输入 mysql，然后再输入 use mysql。12345678910111213141516171819zhangjunyangdeMacBook-Pro:~ Young$ mysqlWelcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 40Server version: 5.7.19 MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.mysql&gt; use mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; mysql5.7 以前的重置密码执行一下语句 1update user set password=password(&quot;123456&quot;) where user=&quot;root&quot;; 5.7 之后改了字段名，需执行下面的语句。 1update user set authentication_string = password(&quot;123456&quot;) where user = &quot;root&quot;; 结果如下： 123 mysql&gt; update user set authentication_string = password(&quot;123456&quot;) where user = &quot;root&quot;;Query OK, 0 rows affected, 1 warning (0.01 sec)Rows matched: 0 Changed: 0 Warnings: 1 修改成功后，需要重新加载一下权限。执行，flush privileges; 然后在输入 quit，退出 mysql。1234567mysql&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)mysql&gt; quitByezhangjunyangdeMacBook-Pro:~ Young$ 然后，另开一个窗口，执行 mysqladmin -u root -p shutdown 命令，然后根据提示输入密码，这个密码就是我们刚才重置后的密码。 执行完成后，你会发现第一个窗口的日志停止输出了。至此，修改密码已经大功告成了。我们再次启动 MySQL 的服务，就可以使用重置后的密码登录连接了。 注意这里有个很大的坑 mysql的数据名被改掉了,然后不记得了，一致在使用 1set password for &apos;root&apos;@&apos;localhost&apos; = password(&apos;root&apos;); 结果报:1ERROR 1133 (42000): Can&apos;t find any matching row in the user table 这个时候你需要执行1select * from mysql.user; 来查询你的用户名。12345678+-----------+---------------+-------------+-------------+-------------+-------------+-------------+-----------+-------------+---------------+--------------+-----------+------------+-----------------+------------+------------+--------------+------------+-----------------------+------------------+--------------+-----------------+------------------+------------------+----------------+---------------------+--------------------+------------------+------------+--------------+------------------------+----------+------------+-------------+--------------+---------------+-------------+-----------------+----------------------+-----------------------+-------------------------------------------+------------------+-----------------------+-------------------+----------------+| Host | User | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin | authentication_string | password_expired | password_last_changed | password_lifetime | account_locked |+-----------+---------------+-------------+-------------+-------------+-------------+-------------+-----------+-------------+---------------+--------------+-----------+------------+-----------------+------------+------------+--------------+------------+-----------------------+------------------+--------------+-----------------+------------------+------------------+----------------+---------------------+--------------------+------------------+------------+--------------+------------------------+----------+------------+-------------+--------------+---------------+-------------+-----------------+----------------------+-----------------------+-------------------------------------------+------------------+-----------------------+-------------------+----------------+| localhost | dns | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 | N | 2017-09-29 11:08:30 | NULL | N || localhost | mysql.session | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | Y | N | N | N | N | N | N | N | N | N | N | N | N | N | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N | 2017-09-29 10:24:30 | NULL | Y || localhost | mysql.sys | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | N | | | | | 0 | 0 | 0 | 0 | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | N | 2017-09-29 10:24:30 | NULL | Y |rows in set (0.00 sec) 这里被我改成dns啦故需要执行1set password for &apos;dns&apos;@&apos;localhost&apos;=password(&apos;root&apos;); 记住要:set password for &#39;dns&#39;@&#39;localhost&#39;=password(&#39;root@123&#39;);刷新，然后退出12mysql&gt; quitBye mysql 登录1zhangjunyangdeMacBook-Pro:~ Young$ mysql -u usename -p","categories":[],"tags":[],"keywords":[]},{"title":"关于银行卡，你应该知道的事","slug":"关于银行卡，你应该知道的事","date":"2020-06-10T01:39:55.000Z","updated":"2020-06-10T01:39:55.765Z","comments":true,"path":"2020/06/10/关于银行卡，你应该知道的事/","link":"","permalink":"http://joinyon.top/2020/06/10/关于银行卡，你应该知道的事/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"Android 获取基站信息","slug":"Android-获取基站信息","date":"2020-06-09T14:31:41.000Z","updated":"2020-06-10T04:02:05.791Z","comments":true,"path":"2020/06/09/Android-获取基站信息/","link":"","permalink":"http://joinyon.top/2020/06/09/Android-获取基站信息/","excerpt":"","text":"背景 《银联卡收单机构mPOS业务风险防控指引》(中国银联风险管理委员会第五届第一次会议审议通过)中第6条商户交易监控.6.1交易信息采集及上送，建议收单机构采集并向银联准确上送以下信息: a. 交易信息： 终端编号、 终端硬件序列号、 交易地理位置信息（GPS、 IP、 基站位置信息等）、 上位机设备号； b. 重要注册信息： 应用软件用户绑定的手机号码、 终端激活（开通） 时间及地理位置、 收款卡号等。 以上信息具体规范另行制定。 6.2 交易监控 收单机构应针对 mPOS 业务加强套现、 伪卡和移机等欺诈交易的监控， 及时提示和预警相关异常交易， 包括但不限于下列情形： a. 商户交易单笔金额及总额与其业务类型不相符； b. 商户交易金额出现较大波动； c. 连续大额交易， 并贴近交易限额； d. 非正常营业时间的交易，特别是凌晨时段的交易； e. 商户 终端在短期内频繁交易， 并有多次交易授权失败； f. 商户 申领终端后迅速出现大额、 高频连续交易，或长期未发生交易的“休眠商户” 突然出现大额或连续交易； g. 终端使用位置与注册地址不一致， 并且与商户业务特点不符； h. 终端超出商户本省范围使用； i. 注册地址不同的多个终端短时间内在同一位置发生交易。 其中要求上送交易地理位置信息，就提到了基站。上游渠道也明确建议了上送基站信息，故对终端进行了改造，上送格式为TLV形式，作为59域的子域，也有第三方收单机构放在62域，组合形式都不一样但上送的也就是以下几个重要信息。基站定位 Android 基站分CdmaCellLocation和GsmCellLocation，要根据不同的SIM卡转成不同的对象 基站参数说明 MCC，Mobile Country Code，移动国家代码（中国的为460）； MNC，Mobile Network Code，移动网络号码（中国移动为0，中国联通为1，中国电信为2）； LAC，Location Area Code，位置区域码; CID，Cell Identity，基站编号； BSSS，Base station signal strength，基站信号强度。 1 获取当前手机连接的基站信息 12345678910111213141516171819202122232425262728293031323334353637383940414243TelephonyManager mTelephonyManager = (TelephonyManager) mContext.getApplicationContext().getSystemService(Context.TELEPHONY_SERVICE); if (mTelephonyManager == null) &#123; return; &#125; String operator = mTelephonyManager.getNetworkOperator(); //获取的基站信息是 if (operator == null || operator.length() &lt; 5) &#123; //获取基站信息有问题,可能是手机没插sim卡 return; &#125; int mcc = Integer.parseInt(operator.substring(0, 3)); int mnc = Integer.parseInt(operator.substring(3)); int lac; int cellId; CellLocation cellLocation = mTelephonyManager.getCellLocation(); if (cellLocation == null) &#123; //可能是手机没插sim卡之类的,返回获取基站失败 return; &#125;//因为移动联通电信基站的不同，所以需要区分基站类型//中国移动和中国联通获取LAC,CID的方式if (mTelephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_GSM) &#123; //当前连接的是gsm基站 GsmCellLocation location = (GsmCellLocation) cellLocation; lac = location.getLac(); cellId = location.getCid(); BaseStationInfo baseStationInfo = new BaseStationInfo(); baseStationInfo.setMcc(mcc); baseStationInfo.setMnc(mnc); baseStationInfo.setLac(lac); baseStationInfo.setCid(cellId); baseStationInfo.setBaseType(0);&#125;//中国电信获取LAC,CID的方式if (mTelephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA) &#123; //当前连接是cdma基站 CdmaCellLocation cdma = (CdmaCellLocation) mTelephonyManager.getCellLocation(); BaseStationInfo baseStationInfo = new BaseStationInfo(); baseStationInfo.setBaseType(1); baseStationInfo.setSid(cdma.getSystemId()); baseStationInfo.setNid(cdma.getNetworkId()); baseStationInfo.setBid(cdma.getBaseStationId());&#125; 2 获取获取附近的基站信息 123456// 获取邻区基站信息List&lt;CellInfo&gt; infos = mTelephonyManager.getAllCellInfo();if(infos==null)&#123; //没有获取附近任何的基站信息 return;&#125; 3 基站类型的话，也是分为好几种类型的,需要做区分的处理 12345678910111213141516171819202122for (CellInfo i : infos) &#123; if (i instanceof CellInfoGsm) &#123;//gsm基站 Log.i(TAG, &quot;附近发现gsm基站Mcc = &quot; + cellIdentityGsm.getMcc()); Log.i(TAG, &quot;附近发现gsm基站Mnc = &quot; + cellIdentityGsm.getMnc()); Log.i(TAG, &quot;附近发现gsm基站Lac = &quot; + cellIdentityGsm.getLac()); Log.i(TAG, &quot;附近发现gsm基站Cid = &quot; + cellIdentityGsm.getCid()); &#125;else if (i instanceof CellInfoCdma) &#123;//cdma基站 Log.i(TAG, &quot;附近发现cdma基站sid = &quot; + cellIdentityCdma.getSystemId()); Log.i(TAG, &quot;附近发现cdma基站nid = &quot; + cellIdentityCdma.getNetworkId()); Log.i(TAG, &quot;附近发现cdma基站sid = &quot; + cellIdentityCdma.getBasestationId()); &#125;else if (i instanceof CellInfoLte) &#123;//lte基站 Log.i(TAG, &quot;附近发现lte基站Mcc = &quot; + cellIdentityLte.getMcc()); Log.i(TAG, &quot;附近发现lte基站Mnc = &quot; + cellIdentityLte.getMnc()); Log.i(TAG, &quot;附近发现lte基站Lac = &quot; + cellIdentityLte.getTac()); Log.i(TAG, &quot;附近发现lte基站Cid = &quot; + cellIdentityLte.getCi()); &#125;else if (i instanceof CellInfoWcdma) &#123;//wcdma基站 Log.i(TAG, &quot;附近发现wcdma基站Mcc = &quot; + cellIdentityWcdma.getMcc()); Log.i(TAG, &quot;附近发现wcdma基站Mnc = &quot; + cellIdentityWcdma.getMnc()); Log.i(TAG, &quot;附近发现wcdma基站Lac = &quot; + cellIdentityWcdma.getLac()); Log.i(TAG, &quot;附近发现wcdma基站Cid = &quot; + cellIdentityWcdma.getCid()); &#125;&#125; 验证网站http://www.cellocation.com/interfac/测试获取到的信息为: 1MCC = 460 MNC = 0 LAC = 22705 CID = 193641985 将参数分别代入1http://api.cellocation.com:81/cell/?mcc=460&amp;mnc=0&amp;lac=22705&amp;ci=193641985&amp;output=xml 验证结果输出为:1234567&lt;response&gt;&lt;errcode&gt;0&lt;/errcode&gt;&lt;lat&gt;30.325141&lt;/lat&gt;&lt;lon&gt;120.172637&lt;/lon&gt;&lt;radius&gt;502&lt;/radius&gt;&lt;address&gt;浙江省杭州市下城区东新街道万家星城12幢;东文路与长浜路路口西111米&lt;/address&gt;&lt;/response&gt; 这是我现在的位置附近。 WIFI定位WiFi定位的原理大致是，因为每一个无线AP都有一个全球唯一的MAC地址，就是获取到WiFi的MAC地址然后去后台数据库去匹配(这个需要后台数据库足够强大，越强大匹配的越准)。代码 123456&lt;!--WiFi状态读取权限--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);//获取当前连接的WiFiWifiInfo info = wifiManager .getConnectionInfo(); info.getBSSID 即为mac地址。 GPS定位1234&lt;!-- GPS权限 --&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt; 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162LocationManager locationManager = (LocationManager) mContext.getSystemService(Context.LOCATION_SERVICE);//获取所有可用的位置提供器List&lt;String&gt; providers = locationManager.getProviders(true);if (providers.contains(LocationManager.GPS_PROVIDER)) &#123; //GPS定位 locationProvider = LocationManager.GPS_PROVIDER; startRequestLocationUpdates(locationProvider, 0, 0);&#125; else if (providers.contains(LocationManager.NETWORK_PROVIDER)) &#123; // Network定位 locationProvider = LocationManager.NETWORK_PROVIDER; if (locationManager.getAllProviders().contains(LocationManager.NETWORK_PROVIDER) &amp;&amp; locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) &#123; startRequestLocationUpdates(locationProvider, 0, 0); &#125;&#125; else &#123; //没有可用的位置提供器，GPS定位失败&#125;/*** 开始请求gps定位** @param locationProvider 参数1，设备：有GPS_PROVIDER和NETWORK_PROVIDER两种，前者是GPS,后者是GPRS以及WIFI定位* @param minTime 位置信息更新周期.单位是毫秒* @param minDistance 位置变化最小距离：当位置距离变化超过此值时，将更新位置信息* 备注：参数2和3，如果参数3不为0，则以参数3为准；参数3为0，则通过时间来定时更新；两者为0，则随时刷新*/ private void startRequestLocationUpdates(String locationProvider, long minTime, float minDistance) &#123; locationManager.requestLocationUpdates(locationProvider, minTime, minDistance, locationListener); &#125;//监听回调LocationListener locationListener = new LocationListener() &#123; @Override public void onLocationChanged(Location location) &#123; //位置信息变化时触发，一旦触发这个回调就证明GPS定位成功，这个方法是一直都会回调的，在一定的时间内，需要设置一个超时，以免耗电。 &#125; @Override public void onStatusChanged(String provider, int status, Bundle extras) &#123; switch (status) &#123; case LocationProvider.AVAILABLE: //当前GPS状态为可见状态 break; case LocationProvider.OUT_OF_SERVICE: //当前GPS状态为服务区外状态 break; case LocationProvider.TEMPORARILY_UNAVAILABLE: //当前GPS状态为暂停服务状态 break; default: break; &#125; &#125; @Override public void onProviderEnabled(String provider) &#123; //GPS开启时触发 &#125; @Override public void onProviderDisabled(String provider) &#123; //GPS禁用时触发 &#125;&#125; thanksLBS数据仓库android 获取基站信息BingoLis","categories":[],"tags":[],"keywords":[]},{"title":"手把手解析8583报文","slug":"手把手解析8583报文","date":"2020-06-08T07:19:55.000Z","updated":"2020-06-10T04:02:12.550Z","comments":true,"path":"2020/06/08/手把手解析8583报文/","link":"","permalink":"http://joinyon.top/2020/06/08/手把手解析8583报文/","excerpt":"","text":"前言报文示例报文长度，在报文的前四位 0144 是代表只后面的长度是在16进制下是0144 十进制就是 324 后面有648个字符串/2=324说明报文是合法的。 tpdu TPDU,全称Transport Protocol Data Unit，是指传送协议数据单元。代表从一个传输实体发送至另一个传输实体的消息。 消息类型 位图 数据域基本由以上五部分组成 消息类型 位图 数据域解析 1234567891011121314151617181920212223240144 //6005010000603200321301 //0200 //7024068020C08A33 // 数据域[2,3,4,11,14,22,23,25,35,41,42,49,53,55,59,60,63,64]19 6230780100013423125 //[2]0 000000[3]000000000001[4]000072[11]2612[14]072[22]000[23]01 00[25]37 6230780100013423125D26122202961800001[35]0 3130303332363336[41]313130333330313537313230303630[42]313536[49]0600000000000000[53]0153 9F2608D265B25D04C043EB9F2701809F101307010103A00000040A010000000000322E22879F3704FB8CB9B89F36020C48950500000000009A032006089C01009F02060000000000015F2A02015682027C009F1A0201569F03060000000000009F3303E0F1C89F3501229F1E0830383230303230318408A0000003330101019F4104303030309F631030333131303030300000000000000000[55]0040 41323033353031303032303430323031303038323030323031323230353030383332303030312020[59]0014 22000001000600[60]00 03 30 31 20[63]3034374230343642[64] 上面63域是卡组织CUP中国银联，如何得到这些数据的？请看下一篇介绍。","categories":[],"tags":[],"keywords":[]},{"title":"没事来想一下这些问题?","slug":"没事来想一下这些问题","date":"2020-06-05T01:22:15.000Z","updated":"2020-06-05T01:22:15.371Z","comments":true,"path":"2020/06/05/没事来想一下这些问题/","link":"","permalink":"http://joinyon.top/2020/06/05/没事来想一下这些问题/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"PreferenceActivity的使用介绍","slug":"PreferenceActivity的使用介绍","date":"2020-06-04T09:49:13.000Z","updated":"2020-06-04T10:34:11.971Z","comments":true,"path":"2020/06/04/PreferenceActivity的使用介绍/","link":"","permalink":"http://joinyon.top/2020/06/04/PreferenceActivity的使用介绍/","excerpt":"","text":"一、PreferenceActivity简介二、CheckBoxPreference三、EditTextPreference四、总结","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"知识点","slug":"知识点","permalink":"http://joinyon.top/tags/知识点/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"Java后台项目搭建","slug":"Java后台项目搭建","date":"2020-05-21T03:16:24.000Z","updated":"2020-05-25T07:20:27.548Z","comments":true,"path":"2020/05/21/Java后台项目搭建/","link":"","permalink":"http://joinyon.top/2020/05/21/Java后台项目搭建/","excerpt":"","text":"创建简单web项目Intellij Idea直接安装（可根据需要选择自己设置的安装目录），jdk使用1.6/1.7/1.8都可以，主要是配置好系统环境变量，tomcat上tomcat的官网下载压缩包解压即可。 File—New—Project 选择Java Enterprise版本，然后配置tomcat 输入项目名：webDemo -&gt; Next -&gt; Finish 创建一个Module","categories":[],"tags":[],"keywords":[]},{"title":"支付宝刷脸设备iot小程序开发实践","slug":"支付宝刷脸设备iot小程序开发实践","date":"2020-01-11T09:09:09.000Z","updated":"2020-01-11T09:09:09.741Z","comments":true,"path":"2020/01/11/支付宝刷脸设备iot小程序开发实践/","link":"","permalink":"http://joinyon.top/2020/01/11/支付宝刷脸设备iot小程序开发实践/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"2020日志","slug":"2020日志","date":"2020-01-02T02:49:15.000Z","updated":"2020-07-06T02:14:00.078Z","comments":true,"path":"2020/01/02/2020日志/","link":"","permalink":"http://joinyon.top/2020/01/02/2020日志/","excerpt":"","text":"一月2 星期四 蜻蜓小程序星POS SDK版上线 A8打印小票签名区域放大 3 星期五 N910预授权问题、冲正问题修改 N910房管局查询 4 星期六 N910语言播报 A8流水年份显示问题 A8房管局 May20 星期三 联迪扫码预授权网络问题下，提交到后台，断网情况没有保存32位的订单号，参考A920做法。已修改 A920联迪扫码后断网未出小票，交易流水查询后没有32位订单号问题，影响到退货。 21 星期四 发布新版本A8，N910，A920. 22 星期五 A8重打印最后一笔出现bug，非成功状态也会出票。 25 星期一六月3 动联DPOS验收，问题反馈00A260050100006032003213010200302004C020C0983300000000000000000100003802100012356224241000000023D30031013629031000203130303332363336313130333330313537313230303630313536F8CC1FED368AFD7A260000000000000000404132303335303130303230343032303130303832303032303132323035303038333230303031202000142200000100060000033031203346393146344631 5 星期五 消费接收到的报文【tpdu】Transport Protocol Data Unit6000040000601000020109【消息类型】0210【位图】703C06802AD08A37[2,3,4,11,12,13,14,22,23,25,35,37,39,41,42,44,49,53,55,59,60,62,63,64]【2】卡号，前两位是长度19 62307801000134231250【3】6位000000【4】12位金额000000000001【11】6位流水号000007【12】6位时间095240【13】4位日期0605【14】4位卡有效期2612【22】输入方式072【23】卡序列号000010【35】037 6230780100013423125D261222029618000010【37】303135373039393339313832【39】3030【41】终端代码3130303332363635【42】商户代码313130333330313537313230303630【44】22 30333131303030302020203438323930303030202020【49】313536【53】域数据解析 接收完整报文解析结果 123456789101112131415161718192021222324252627282930&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0210&quot;/&gt; &lt;field id=&quot;2&quot; value=&quot;6230780100013423125&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000010&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;104629&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0605&quot;/&gt; &lt;field id=&quot;14&quot; value=&quot;2612&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;072&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;35&quot; value=&quot;6230780100013423125D26122202961800001&quot;/&gt; &lt;field id=&quot;37&quot; value=&quot;015710939468&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10032665&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;110330157120060&quot;/&gt; &lt;field id=&quot;44&quot; value=&quot;03110000 48290000 &quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;53&quot; value=&quot;0000000000000000&quot;/&gt; &lt;field id=&quot;55&quot; value=&quot;9F2608414F9C9A880108449F101307010103A00000010A010000000000AB70D70C9F3704D06BC9469F36020C3C950500000000009A032006059C01009F02060000000000015F2A02015682027C009F1A0201569F3303E0F0C89F3501228408A0000003330101019F090200209F6310303331313030303000000000000000009F1E0839393033393635309F03060000000000009F270180&quot;/&gt; &lt;field id=&quot;59&quot; value=&quot;41323036353031303032303430323031363030303030313034393930333936353030333030363432333132353034303038202020202020202030353030383332303032202020&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;22000001000601&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;30383334333833323339333233393330333035463137304633383332333933333333333133373337333033313331333033353331333835463138303833363330333733343334333833363330&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;CUP&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;3942453637353735&quot;/&gt; &lt;/Packet&gt; 银行卡刷卡反馈 消费刷卡成功插卡成功非接输密码成功双免失败 预授权刷卡+输密码成功 预授权完成刷卡+输密码成功刷卡+无密失败Z1无卡+输密失败Z1无卡+无密报错 预授权完成撤销刷卡+输密码成功刷卡+无密失败Z1无卡+输密失败Z1无卡+无密报错 预授权撤销刷卡+输密码成功刷卡+无密失败Z1无卡+输密失败Z1无卡+无密报错 6 非接有密 12345678910111213141516171819202122232425&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0200&quot;/&gt; &lt;field id=&quot;2&quot; value=&quot;6212142500000000151&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000194&quot;/&gt; &lt;field id=&quot;14&quot; value=&quot;2903&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;071&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;000&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;26&quot; value=&quot;12&quot;/&gt; &lt;field id=&quot;35&quot; value=&quot;6212142500000000151D2903220493903112&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006095&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;52&quot; value=&quot;4F9BED37373103F7&quot;/&gt; &lt;field id=&quot;53&quot; value=&quot;2000000000000000&quot;/&gt; &lt;field id=&quot;55&quot; value=&quot;9F2608DD93D2FE59259ACC9F101307010103A00000010A010000000000BAE8DE7C9F37041D3552039F36020013950500000000009A032006069C01009F02060000000000015F2A02015682027C009F1A0201569F3303E0F0C89F3501228408A0000003330101019F090200209F1E0839393033393635309F03060000000000009F270180&quot;/&gt; &lt;field id=&quot;59&quot; value=&quot;41323036353031303032303430323031363030303030313034393930333936353030333030363030303135313034303038202020202020202030353030383332303032202020&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;22000004000601&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;0000000000000000&quot;/&gt; &lt;/Packet&gt; 1A206501002040201600000104990396500300600015104008 0500832002 1A2600102040216000001049903965003060001510408 050832002 原报文 12345660000300006032003010000200702406C020C09A3119621214250000000015100000000000000000010001942903071000000012366212142500000000151D290322049390311231303030363039353131323333303137303131303030363135364F9BED37373103F72000000000000000【53域】01329F2608DD93D2FE59259ACC9F101307010103A00000010A010000000000BAE8DE7C9F37041D3552039F36020013950500000000009A032006069C01009F02060000000000015F2A02015682027C009F1A0201569F3303E0F0C89F3501228408A0000003330101019F090200209F1E0839393033393635309F03060000000000009F270180【55域】0070 41323036353031303032303430323031363030303030313034393930333936353030333030363030303135313034303038202020202020202030353030383332303032202020[59]0014 22000004000601[60]3643463637334341[64] 141 32 3630303130323034303231363030303030313034393930333936353030333036303030313531303430382020202020202020303530383332303032202020 接收sim imsi解析1234567891011121314151617181920212223242526272829303132&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0210&quot;/&gt; &lt;field id=&quot;2&quot; value=&quot;6212142500000000151&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000194&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;101738&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0606&quot;/&gt; &lt;field id=&quot;14&quot; value=&quot;2903&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;071&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;000&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;26&quot; value=&quot;12&quot;/&gt; &lt;field id=&quot;35&quot; value=&quot;6212142500000000151D2903220493903112&quot;/&gt; &lt;field id=&quot;37&quot; value=&quot;606060019120&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006095&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;44&quot; value=&quot;99999999 48570000 &quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;52&quot; value=&quot;4F9BED37373103F7&quot;/&gt; &lt;field id=&quot;53&quot; value=&quot;2000000000000000&quot;/&gt; &lt;field id=&quot;55&quot; value=&quot;9F36020013910AE51B928EB10B36883030&quot;/&gt; &lt;field id=&quot;59&quot; value=&quot;41323036353031303032303430323031363030303030313034393930333936353030333030363030303135313034303038202020202020202030353030383332303032202020&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;22000004000601&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;3230323030363036313031373033353230323030363036313031373335333231353738313035333834383635373932&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;CUP&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;4342373344364634&quot;/&gt; &lt;/Packet&gt; 111024582107431250 12345678902458210743A2600102040216000001049903965003060001510408 050832002 报文对比 没有SIM卡时 1111017469052801250 A2600102040216000001049903965003060001670408 050832002 有卡 1111026643387131250460043090901483 A2600102040216000001049903965003060001670408 050832002 1111022297286761250 460043090901483A2600102040216000001049903965003060001670408 050832002 1111022705252991250 460043090901483A2600102040216000001049903965003060001670408 050832002 N910 12345678910111213141516171819200164600601000061320032000102007020068020C08A31[2,3,4,11,22,23,25,35,41,42,49,53,55,59,60,64]19 6230780100013423125[2]000000[3]0000000000001[4]000090[11]072[22]000[23]01 00[25]37 6230780100013423125D26122202961800001[35]0 3130303332373834[41]313130333330313537313230303630[42]313536[49]06000000000000000158 9F2701809F101307010103A00000010A010000000000EF2B14CD9F370433BCA0659F36020C47950500000000009A032006089C01009F02060000000000015F2A02015682027C009F1A0201569F03060000000000009F3303E0E9C89F3501229F1E0830303030303030318408A0000003330101019F090200209F4104000000099F6310303331313030303000000000000000009F260883FDED9C40585E4A[55]0074413230363930313030323034303230323030303030303330344E374E4C303037383933333730333030363432333132353034303038364534383131454530353030383230303630352020[59]0014 22000001000601[60]3233393546344141[64] N910 59域 1A2 069 01002040202000000304N7NL0078933703006423125040086E4811EE05008200605 A920 59域 1A2 035 010020402010082002012205008320001 百富国通预授权无密,可以成功,不打印快速完成二维码,字段缺少。联动不支持无密。123456789101112131415161718192021222324252627282930&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0110&quot;/&gt; &lt;field id=&quot;2&quot; value=&quot;6230780100013423125&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;030000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;100636&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;112410&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0619&quot;/&gt; &lt;field id=&quot;14&quot; value=&quot;2612&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;072&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;06&quot;/&gt; &lt;field id=&quot;35&quot; value=&quot;6230780100013423125D26122202961800001&quot;/&gt; &lt;field id=&quot;38&quot; value=&quot;614047&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10033241&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;110330148160392&quot;/&gt; &lt;field id=&quot;44&quot; value=&quot;03110000 48570000 &quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;53&quot; value=&quot;0000000000000000&quot;/&gt; &lt;field id=&quot;55&quot; value=&quot;9F2608F558EC9BC83669029F101307010103A00000010A0100000000001CDDDA109F3704F3547D959F36020D3D950500000000009A032006199C01039F02060000000000015F2A02015682027C009F1A0201569F3303E0F0C89F3501228408A0000003330101019F090200209F6310303331313030303000000000000000009F1E0843413832343637399F03060000000000009F270180&quot;/&gt; &lt;field id=&quot;59&quot; value=&quot;313131333139322E3136382E382E313431313235302020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020413230363430313032303430323230303030303031303431373437434138323436373930333036343233313235303430384531394630454642303530383332303032202020&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;1000000100060&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;32303230303631393131323430303930313237373230323030363139313132343130333236333035383939393634373936393238&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;CUP&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;3339373944433238&quot;/&gt; &lt;/Packet&gt; 输密码:1234567891011121314151617181920212223242526272829303132&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0110&quot;/&gt; &lt;field id=&quot;2&quot; value=&quot;6230780100013423125&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;030000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;100640&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;114312&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0619&quot;/&gt; &lt;field id=&quot;14&quot; value=&quot;2612&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;051&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;06&quot;/&gt; &lt;field id=&quot;26&quot; value=&quot;12&quot;/&gt; &lt;field id=&quot;35&quot; value=&quot;6230780100013423125D26122202961800001&quot;/&gt; &lt;field id=&quot;38&quot; value=&quot;615077&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10033241&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;110330148160392&quot;/&gt; &lt;field id=&quot;44&quot; value=&quot;03110000 48570000 &quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;52&quot; value=&quot;A8C27FE99416AB51&quot;/&gt; &lt;field id=&quot;53&quot; value=&quot;2000000000000000&quot;/&gt; &lt;field id=&quot;55&quot; value=&quot;9F260890A190E85D2685129F2701809F101307010103A0B806010A010000000000E530DA509F37042DAE95089F36020D3F9505008804E8009A032006199C01039F02060000000000015F2A02015682027C009F1A0201569F3303E0F0C89F34030203009F3501228408A0000003330101019F090200209F6310303331313030303000000000000000009F1E0843413832343637399F0306000000000000&quot;/&gt; &lt;field id=&quot;59&quot; value=&quot;313131333139322E3136382E382E313431313235302020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020413230363430313032303430323230303030303031303431373437434138323436373930333036343233313235303430384531394630454642303530383332303032202020&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;1000000100060&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;32303230303631393131343330313130303934303230323030363139313134333131333236333130363839323433343032323430&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;CUP&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;4639423638464632&quot;/&gt; &lt;/Packet&gt; 20 SpringBoot项目简单搭建//A2 064 01 02 04 02 20 00000304N7NL00072365 03 06 574321 0408472BBF97 0508 200630//A2 064 01 02 04 02 20 000001041747CA824679 0306 423125 0408E19F0EFB 0508 32002 七月 新大陆 慧倈店的 实时消费去掉。","categories":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}],"tags":[{"name":"工作","slug":"工作","permalink":"http://joinyon.top/tags/工作/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}]},{"title":"Handler机制","slug":"Handler机制","date":"2019-12-31T06:14:00.000Z","updated":"2020-01-08T03:24:37.555Z","comments":true,"path":"2019/12/31/Handler机制/","link":"","permalink":"http://joinyon.top/2019/12/31/Handler机制/","excerpt":"","text":"前言在研究Handler之前，先要思考一下问题该如何完美回答,关于Handler的10个灵魂拷问 1.简述Handler机制 2.Handler是怎么实现切换线程的？ 3.handler.sendMessage()与handler.post()的区别 4.Handler为什么会引起内存泄漏，解决方式是什么？ 5.Looper是怎么取消息的？ 6.MessageQueue是怎么增删消息的？ 7.一个线程可以有几个Handler？几个Looper？几个MessageQueue？ 8.A Handler发送的消息为什么不会跑到B Handler的handleMessage（）方法中？A Handler发送的消息究竟是怎么回到A Handler自身的handleMessage（）中的？ 9.Looper的Loop（）方法到底是不是阻塞操作？如果是？主线程的Looper为什么没有阻塞主线程？如果不是，那你怎么解释Looper.loop()方法？ 10.简述ThreadLoacal的原理 如果不能满意的回答以上问题，请自己认真读源码，从源码中探寻答案。 Handler机制中最重要的四个对象 Handler Looper MessageQueue Message Handler Handler机制是Android中用于线程间通信一套通信机制。 从Android4.0开始，Android中耗时操作不允许在主线程中操作，而更新UI的操作由不允许在子线程中更新UI。当我们在子线程中进行耗时操作如:请求网络，拿到服务器返回的数据之后，要更新UI。由于系统的要求，势必会产生一种矛盾：数据在子线程，更新UI要在主线程。此时我们必须要把数据返回到主线程中才行，Handler机制应运而生。 怎么从子线程发消息到主线程？ 12345678910111213141516171819202122232425/** * 在主线程中初始化Handler */ private Handler mainHandler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; super.handleMessage(msg); Log.e(&quot;TAG&quot;, &quot;Thread=&quot; + Thread.currentThread().getName() + &quot;,收到从子线程返回的消息=&quot; + msg.what); &#125; &#125;; /** * 创建一个线程使用主线程的Handler对象发消息 */ new Thread() &#123; @Override public void run() &#123; super.run(); mainHandler.sendEmptyMessage(0); Log.e(&quot;TAG&quot;, &quot;Thread=&quot; + Thread.currentThread().getName() + &quot;,发送消息&quot;); &#125; &#125;.start(); 怎么从主线程发消息到子线程? 我们先用刚才的思路先写 1.声明一个Handler对象 2.在子线程中实例化该对象 3.在主线程中使用Handler对象发送消息。 12345678910111213141516171819private Handler childHandler; new Thread() &#123; @Override public void run() &#123; super.run(); childHandler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; super.handleMessage(msg); &#125; &#125;; &#125; &#125;.start(); public void sendToChild(View view) &#123; childHandler.sendEmptyMessage(1);&#125; 接收到以下异常1java.lang.RuntimeException: Can&apos;t create handler inside thread that has not called Looper.prepare() 正确的写法应该是 1.Looper.prepare(); 2.初始化Hanlder并且重写HandleMessage（）方法 3.调用Looper.loop()方法 4.handler.sendMessage(message)发消息查看代码得知 12345678910111213141516//空参的构造方法，这个方法调用了两个参数的构造方法 public Handler() &#123; this(null, false); &#125;//两个参数的构造方法public Handler(Callback callback, boolean async) &#123; mLooper = Looper.myLooper(); if (mLooper == null) &#123; throw new RuntimeException( &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;); &#125; mQueue = mLooper.mQueue; mCallback = callback; mAsynchronous = async; &#125; Handler的构造方法中会验证Looper，如果Looper为空，那么会抛出空指针异常。 将自己的一个全局消息队列对象（mQueue）指向了Looper中的消息队列查看代码 主线程的Looper是Android系统以及调用过了。Initialize the current thread as a looper, marking it as an application&apos;s main looper. The main looper for your application is created by the Android environment, so you should never need to call this function yourself. See also: {@link #prepare()} 如果 Looper.prepare(); 调用两次 1java.lang.RuntimeException: Only one Looper may be created per thread 当handler执行了 sendMessage()的方法时进行了哪些流程呢? handler.sendMessage(); ↓ handler.sendMessageDelayed(msg, 0); ↓ handler.sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis); ↓ handler.enqueueMessage(queue, msg, uptimeMillis); ↓ queue.enqueueMessage(msg, uptimeMillis); 通过以上的流程我们可以看到sendMessage（）最终执行到了MessageQueue的enqueueMessage（）方法。 MessageQueue enqueueMessage从代码中可以看到MessageQueue是个单向链表结构,而MessageQueue的enqueueMessage（）方法主要做的事情就是将Handler发送过来的Message插入到列表中。也就是说，当我们调用handler.senMessage()方法的时候，最终的结果只是将这个消息插入到了消息队列中 注意以上流程中最后一步queue.enqueueMessage(),中的queue对象是什么时候初始化的?在初始化Handler的时候，先验证Looper对象，在Handler的构造方法中将自己的一个全局消息队列对象（mQueue）指向了Looper中的消息队列 也就是说当你创建一个Handler的时候，Handler被绑定到创建他的线程/消息队列。官方注释这个时候发消息的工作已经完成，那么Looper是什么时候取的消息，取出来消息又是怎么送回给Handler的呢？这就要看Looper.loop()方法了。 备注在子线程中无法刷新UI，是因为UI在子线程中刷新的话，是不安全的，就比如多个线程刷新UI，会造成UI更新冲突，这样是不安全的。","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"差缺补漏","slug":"差缺补漏","permalink":"http://joinyon.top/tags/差缺补漏/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"魔方教程","slug":"魔方教程","date":"2019-12-25T11:42:07.000Z","updated":"2019-12-30T13:58:09.221Z","comments":true,"path":"2019/12/25/魔方教程/","link":"","permalink":"http://joinyon.top/2019/12/25/魔方教程/","excerpt":"","text":"前言从小就接触了魔方，但始终没有好好的拼完整过。大学时也业余学了一下，但是没有多久就忘记了。故这次记录一下学习过程，并记录几个核心公式。 一、认识魔方 魔方分6个面(上面U 下面D 左面L 右面R 前面F（正对着自己的面） 背面B) 8个顶角(每个顶角三种颜色) 6个中心块(只有一种颜色，位置不变，所对应的就是该颜色的面) 8个棱块(有两种颜色，只处于棱的中间位置) 二、生成小花三、组成十字四、回归顶角(R,U,R’,U’)五、回归第二层(倒T法 1往左归位 U’(远离目标位)，L(将目标位置于原错位位置),U(回归目标位),L’(回归第二层),U’(底层远离),F(接底层远离的那个),U,F’,2向右归位相反，U,R,U’,R’,U’,F’,U,F)六、顶层十字法(以一个点为前面，F, R,U,R’,U’,R,U,R’,U’,F’)七、顶层复原第一步:小鱼法 小鱼1:R’,U’,R, U’,R’,U’,U’,R 小鱼2:L, U, L’,U, L, U, U, L’八、顶层复原第二步:其他的顶层成十字之后使用小鱼1的公式把顶层拼好 坦克向上，小鱼1， 坦克向左，小鱼1，九、复原顶角 对称的面朝后手心，然后用公式:R’,R’,D, D, R’,U’,R, D’,D’,R’,U, R’","categories":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://joinyon.top/tags/随笔/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}]},{"title":"用wifi进行Android 真机调试","slug":"用wifi进行Android真机调","date":"2019-11-21T01:34:14.000Z","updated":"2019-11-21T01:48:36.633Z","comments":true,"path":"2019/11/21/用wifi进行Android真机调/","link":"","permalink":"http://joinyon.top/2019/11/21/用wifi进行Android真机调/","excerpt":"","text":"一. 确保安装了adb 使用命令1adb shell 二.具体步骤1.首先确保电脑和手机都连接了同一个局域网 2.打开 usb 调试，用数据线连接电脑和手机 3.用 adb 查看已连接的 Android 设备 12345adb devices 如果在 devices 里边没有看到连接的手机，说明连接不成功，看一下 usb 调试开没开，有没有驱动程序啥的连接好了会有 123zhangjunyangdeMacBook-Pro:blog Young$ adb devicesList of devices attached0123456789ABCDEF device 4.用命令 `adb -s [device id] tcpip [port] `为需要 wifi 连接的设备指定端口号 如 `adb -s 0123456789ABCDEF tcpip 8888` * device id：需要连接的设备id，即第二步里边看到的那个字符串 * port：连接使用的端口号，按自己心意指定，我用的 8888 5.用命令 `adb connect [phone ip]:[port]` 连接设备 * hone ip：手机当前连接局域网的 ip地址。 * port：上一步设置的端口号 三.总结","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/tags/技术/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"android http通过post请求发送一个xml","slug":"android-http通过post请求发送一个xml","date":"2019-11-19T03:30:33.000Z","updated":"2019-11-19T03:45:55.951Z","comments":true,"path":"2019/11/19/android-http通过post请求发送一个xml/","link":"","permalink":"http://joinyon.top/2019/11/19/android-http通过post请求发送一个xml/","excerpt":"","text":"背景在开发微信刷脸支付开放版SDK时，有一个设备信息认证的过程，这个需要使用后端代码调用微信的API。里面有这么一句， 考虑到与后台人脸支付API的一致性, 这里统一采用xml格式。 本打算让后台调用，后台人员开发比较紧张，所以让我先调用试试，故体验一把。 查阅资料调用过程通过HttpURLConnection发送xml数据通过httpClient Post方式提交xml总结","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"微信小程序开发","slug":"微信小程序开发","date":"2019-10-12T05:37:38.000Z","updated":"2019-10-17T02:54:48.848Z","comments":true,"path":"2019/10/12/微信小程序开发/","link":"","permalink":"http://joinyon.top/2019/10/12/微信小程序开发/","excerpt":"","text":"官方示例代码","categories":[],"tags":[{"name":"小程序","slug":"小程序","permalink":"http://joinyon.top/tags/小程序/"}],"keywords":[]},{"title":"支付宝小程序开发实践","slug":"支付宝小程序开发实践","date":"2019-10-09T06:47:35.000Z","updated":"2020-06-02T03:50:04.374Z","comments":true,"path":"2019/10/09/支付宝小程序开发实践/","link":"","permalink":"http://joinyon.top/2019/10/09/支付宝小程序开发实践/","excerpt":"","text":"背景公司需要开发ioT扫脸支付小程序，于是研究了一下。 过程(全靠查) 支付宝小程序gitHub项目 支付宝小程序官方demo 支付宝小程序文档 以上看完再基础功能基本可用JSON","categories":[],"tags":[{"name":"小程序","slug":"小程序","permalink":"http://joinyon.top/tags/小程序/"}],"keywords":[]},{"title":"关于Gson解析异常","slug":"关于Gson解析异常","date":"2019-06-21T02:24:57.000Z","updated":"2019-10-12T02:06:29.694Z","comments":true,"path":"2019/06/21/关于Gson解析异常/","link":"","permalink":"http://joinyon.top/2019/06/21/关于Gson解析异常/","excerpt":"","text":"报错信息1Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $ 报错原因 GsonConverterFactory使用时需要返回规范的JSON，而服务端没有按照标准返回。 解决办法12345678910111213141516static Retrofit getClient() &#123; Gson gson = new GsonBuilder() .setLenient() .create(); if (retrofit == null) &#123; retrofit = new Retrofit.Builder() .baseUrl(BASE_URL) .addConverterFactory(GsonConverterFactory.create(gson)) .build(); &#125; return retrofit;&#125;//GsonConverterFactory.create(gson)不使用默认的，使用带参数的。","categories":[],"tags":[],"keywords":[]},{"title":"adb命令大全","slug":"adb命令大全","date":"2019-06-12T08:28:31.000Z","updated":"2020-01-20T07:09:36.818Z","comments":true,"path":"2019/06/12/adb命令大全/","link":"","permalink":"http://joinyon.top/2019/06/12/adb命令大全/","excerpt":"","text":"手机操作 物理键： 1234567adb shell input keyevent 26 # 电源键adb shell input keyevent 82 # 菜单键adb shell input keyevent 3 # HOME 键adb shell input keyevent 4 # 返回键adb shell input keyevent 24 # 音量+adb shell input keyevent 25 # 音量-adb shell input keyevent 164 # 静音 媒体控制 123456adb shell input keyevent 85 # 播放/暂停adb shell input keyevent 86 # 停止播放adb shell input keyevent 87 # 播放下一首adb shell input keyevent 88 # 播放上一首adb shell input keyevent 126 # 恢复播放adb shell input keyevent 127 # 暂停播放 点亮/熄灭屏幕(可以通过上 模拟电源键 来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。) 12adb shell input keyevent 224 # 点亮屏幕adb shell input keyevent 223 # 熄灭屏幕 触击屏幕 1adb shell input tap &lt;X&gt; &lt;Y&gt; # x，y为坐标位置 滑动屏幕 123划动屏幕用到了 swipe 命令，它有四个参数，分别是起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标。如果锁屏没有密码，是通过滑动手势解锁，那么可以通过 input swipe 来解锁。 12345# 四个参数：起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标。adb shell input swipe 300 1000 300 500 # 向上滑动adb shell input swipe 300 100 300 1000 # 向下滑动adb shell input swipe 1000 500 200 500 # 向左滑动adb shell input swipe 200 500 1000 500 # 向右滑动 文件操作类操作 打开应用 1231. adb shell2. $ am start -n com.joinyon.tv/com.joinyon.tv.MainActivity// 包名/主页面对应的Activity 退出adb shell 1$ exit 安装应用 12adb install apk文件路径adb install -t -r apk文件路径 (强制安装，debug包) 使用指定文字填充文本框 121.手机上选择要填充的文本框，使光标获取焦点2.adb shell input text &quot;这里是想要填充的内容&quot; 查看Android设备的分辨率 123adb shell wm sizeoradb shell dumpsys window windows adb 查看android手机中应用的包名和安装位置 123456781.adb devices 查看是否连接设备2.adb shell 进入指定的device的shell3.pm list packages adb 查看所有安装的包4.pm list packages | grep tencent 根据某个关键字查找包5.pm list packages -f 查看包安装位置6.pm list packages -f | grep tencent 关键字筛选7.$ exit 将apk拉到pc中 $ adb pull /data/app/com.tencent.tbs-1/base.apk ~/Downloads 多个设备时，指定设备发送命令 C:\\Users\\gaojs&gt;adb shell error: more than one device and emulator C:\\Users\\gaojs&gt;adb install e:\\good.apk error: more than one device and emulator 碰到这种情况，首先要查一下，是不是真的有多个设备或模拟器。 C:\\Users\\gaojs&gt;adb devices List of devices attached emulator-5554 device 4dfadcb86b00cf05 device 发现还真是多个设备，那就需要为ADB命令指定设备的序列号了。 C:\\Users\\gaojs&gt;adb -s emulator-5554 shell 也就是如上所示，给命令加上-s的参数就可以了！ 如果实际上只有一个设备或模拟器，并且查到有offline的状态； 那就说明是ADB本身的BUG所导致的，就需要用如下的方法处理下了： C:\\Users\\gaojs&gt;adb kill-server C:\\Users\\gaojs&gt;taskkill /f /im adb.exe 第一条命令是杀ADB的服务，第二条命令是杀ADB的进程！ 如果第一条没有用，才考虑用第二条命令再试试看的！ adb 命令push文件/夹到手机目录上1234567891011121314151.输入命令adb remount ,意思是将设备改为可读可写;显示remount succeeded就代表命令执行成功；2.关键环节-假如你要将Windows下D盘根目录下的liu文件夹拷贝到机器(手机或者平板)的media目录下；可以使用命令如下：adb push D：\\liu\\. /data/media然后按回车执行；执行成功后就会机器的media/目录下就会有文件存在了。注：liu \\. 点的意思是一次性push文件夹里面的全部内容。或者直接将文件或文件夹拖动到Terminal中，然后空格 /data/media","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/tags/技术/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"日志","slug":"日志","date":"2019-06-10T11:58:57.000Z","updated":"2020-03-13T08:22:38.104Z","comments":true,"path":"2019/06/10/日志/","link":"","permalink":"http://joinyon.top/2019/06/10/日志/","excerpt":"","text":"六月10 星期一 A920扫码提示 device not licensed 同样的程序调用的扫码器不一样 CortexScan paxScanner 扫码预授权调试 跟踪天喻收单程序进度 跟踪核销模块开发进度 java基础03 11 星期二 核销业务梳理 MTMS客户端秘钥丢失问题解决并反馈给厂商,厂商会优化解决方案 A920扫码问题解决方案:多重启几次 12 星期三 培训知识巩固 核销开发进度跟踪 天喻瑞银信收单进度:开发版已出，明天测试功能 java基础分支语句查看 13 星期四 瑞银信新增终端 java循环语句 N910固件升级实践及操作文档编写 天喻瑞银信和丰付机器不能通用 14 星期五 启航的机器无法升级系统寄回 诚付的程序定制和轮播上线 考试计划 15 星期六 java方法 云音响的配置方法 启航机器升级系统回寄 E350非接版无法安装的问题(缺少了驱动) 大崃的QR68机器归还 16 星期日 递归算法 17 星期一 面向对象(一) 天喻瑞银信配置(贴牌的SN和代码获取的SN不一致) 何泽的加油站商户扫码闪退，更新程序后依然闪退，关机重启后解决。 合利宝撤销报25渠道没有记录 运营基础知识考核 运动18 星期二 天喻瑞银信SDK测试反馈 E350老版本机器程序不支持 核销问题解决19 星期三 N910走联动536渠道预授权借记卡要求输入密码，有些卡密码可以随便输入，有些卡需要输入正确的密码 灌机30台 联动SDK支持修改小票打印名称 打印重新绑定问题待解决 瑞银信问题反馈 1.消费撤销isOpenAdminVerify设为false依然出现输入管理员密码 2.预授权的时候报错，原因是响应报文不完整，没有流水号、卡号、时间、商户名称等参数。 3.不完整的参数导致后台报错调用方法过程中，出现错误，请重试或联系管理员，异常信息：Object 123天喻的响应报文 &#123;&quot;merchantNo&quot;:&quot;88733D048161867&quot;,&quot;transResult&quot;:&quot;00&quot;,&quot;transType&quot;:&quot;PRE_AUTHORIZATION&quot;, &quot;terminalNo&quot;:&quot;C7524363&quot;,&quot;orderId&quot;:&quot;9EB14B5EEA084771893F26BE76EE0B97&quot;&#125; 123456789101112A8 响应报文 &#123;&quot;orderId&quot;:&quot;591160C808DA4CF5915E539084D653A7&quot;,&quot;transType&quot;:&quot;PRE_AUTHORIZATION&quot;, &quot;transResult&quot;:&quot;00&quot;,&quot;transMoney&quot;:&quot;1&quot;,&quot;merchantNo&quot;:&quot;88733D048161867&quot;, &quot;terminalNo&quot;:&quot;C7738606&quot;,&quot;merchantName&quot;:&quot;浙江丰收收信息科技有限公司&quot;,&quot;operNo&quot;:&quot;&quot;, &quot;batchNo&quot;:&quot;000004&quot;,&quot;traceNo&quot;:&quot;100111&quot;,&quot;refNo&quot;:&quot;000351904839&quot;,&quot;authNo&quot;:&quot;547594&quot;, &quot;expDate&quot;:&quot;2612&quot;,&quot;cardNo&quot;:&quot;6230780100013423125&quot;,&quot;cardIssuerCode&quot;:&quot;03110000---&quot;, &quot;cardAcquirerCode&quot;:&quot;48873319&quot;,&quot;payWay&quot;:&quot;0004&quot;,&quot;cardInputType&quot;:&quot;2&quot;, &quot;date&quot;:&quot;0619&quot;,&quot;time&quot;:&quot;170735&quot;,&quot;forcePsw&quot;:&quot;true&quot;,&quot;forceSign&quot;:&quot;true&quot;,&quot;ARQC&quot;:&quot;F1C7D3382D918FB0&quot;,&quot;TVR&quot;:&quot;0000000000&quot;, &quot;AID&quot;:&quot;A000000333010101&quot;,&quot;TSI&quot;:&quot;0000&quot;,&quot;APPLAB&quot;:&quot;PBOC DEBIT&quot;,&quot;APPName&quot;:&quot;&quot;, &quot;UNPR_NUM&quot;:&quot;A9718936&quot;,&quot;AIP&quot;:&quot;7C00&quot;,&quot;IAD&quot;:&quot;07010103A00000010A010000000000F317899F&quot;, &quot;TermCap&quot;:&quot;E0F0C8&quot;&#125; 20 星期四 领券问题:1.重复出现绑定，2.付一次钱多个券的情况 卡券核销演示 小票客服电话定制 天喻机器测试反馈 丰付大讲堂 21 星期五 24 星期一 核销开发跟踪进度 瑞银信25 星期二 核销优化 合利宝预授权撤销金额不一致报13然后正常完成或撤销报25的问题反馈 瑞银信天喻机器跟踪 核销测试问题反馈 卡核销磁条卡问题 小票打印订单金额及二维码问题26 星期三 试题 卡核销非接读卡方式撤销，券核销使用扫码支付的在核销撤销的扫码撤销，出现打印中，不出小票，然后无法退回界面（核销类撤销都会出现此情况）。 卡核销插卡交易能出现活动显示，但是实际扣款金额不一致，应该是金额的单位有问题 卡核销磁条卡不显示活动，输入1元，实际扣款为100元，完成活动时提示参数不完整。 输入金额退格bug修复 27 星期四 核销磁条卡 12cno=4581230179533098&amp;pno=10006035&amp;price=100.00&amp;serialNo=000002&amp;storeNo=112330170110006&amp;tradeNo=000205&amp;key=wx732d107d84a6a118 IC卡12cno=6259588894275303&amp;pno=10006035&amp;price=100.00&amp;serialNo=000002&amp;storeNo=112330170110006&amp;tradeNo=000200&amp;key=wx732d107d84a6a118 配置核销活动，装机待批量测试。 试题已完成。 28 星期五 核销流程梳理 批量测试 瑞银信天喻SDK测试 结算之后第一笔交易签到后会一直正在请求 会闪退 消费进去不应有扫码，无刷卡模式。 29 星期六 联动优势渠道 - 536 W2 银联扫码无法撤销(商户已开通扫码)走私下退，联动bug 核销平台操作文档整理 七月1 星期一 核销交易测试 平台文档整理2 星期二 核销机器文档编写 银行活动添加、商户添加及测试。3 星期三 核销程序装机测试 核销平台培训4 星期四 年中会5 星期五 小票打印分的数据处理double类型 全单-活动基数，导致优惠金额不正确的问题。6 星期六 商户现场8 星期一 核销程序改版，只显示核销9 星期二 核销发布 扫码优化 升级问题，有交易的升级后交易查询闪退,报错:1234567891007-09 18:28:02.477 22532-22532/? E/AndroidRuntime: FATAL EXCEPTION: main Process: com.newland.payment, PID: 22532 java.lang.NullPointerException: Attempt to invoke virtual method &apos;boolean java.lang.Boolean.booleanValue()&apos; on a null object reference at com.newland.payment.ui.fragment.TranceWaterListFragment$1.convert(TranceWaterListFragment.java:138) at com.newland.payment.ui.fragment.TranceWaterListFragment$1.convert(TranceWaterListFragment.java:128) at com.xiaoyue.widget.listview.CommonAdapter.getView(CommonAdapter.java:77) at android.widget.AbsListView.obtainView(AbsListView.java:2347) at android.widget.ListView.makeAndAddView(ListView.java:1864) at android.widget.ListView.fillDown(ListView.java:698) 10 星期三 瑞银信问题跟踪 瑞银信联迪版撤销测试 瑞银信SDK联迪版撤销功能开发 百富A920扫码退货 11 星期四 请假 12 星期五 瑞银信A920程序问题 快支付联迪A8更新 瑞银信SDK联迪，扫码撤销，扫码退货，银行卡退货功能调试。 瑞银信银行卡退货报文1234567&quot;orderId&quot;:&quot;121231231&quot;,&quot;transType&quot;:&quot;SALE_RETURN&quot;,&quot;transResult&quot;:&quot;00&quot;,&quot;transName&quot;:&quot;退货&quot;,&quot;transMoney&quot;:&quot;1&quot;,&quot;merchantNo&quot;:&quot;88733D048161867&quot;,&quot;terminalNo&quot;:&quot;C7738606&quot;,&quot;merchantName&quot;:&quot;浙江丰收收信息科技有限公司&quot;,&quot;operNo&quot;:&quot;01&quot;,&quot;batchNo&quot;:&quot;000004&quot;,&quot;traceNo&quot;:&quot;100071&quot;,&quot;refNo&quot;:&quot;000418529887&quot;,&quot;expDate&quot;:&quot;2412&quot;,&quot;cardNo&quot;:&quot;6259588894275303&quot;,&quot;cardIssuerCode&quot;:&quot;03100000---&quot;,&quot;cardAcquirerCode&quot;:&quot;48873319&quot;,&quot;payWay&quot;:&quot;0004&quot;,&quot;cardInputType&quot;:&quot;2&quot;,&quot;date&quot;:&quot;0712&quot;,&quot;time&quot;:&quot;181759&quot;,&quot;forcePsw&quot;:&quot;false&quot;,&quot;forceSign&quot;:&quot;false&quot;,&quot;imageData&quot;:&quot;Qk……&quot;&#125; 13 星期六 A8撤销+整体测试，刷卡退货会崩溃，扫码退货报IF交易失败 15 星期一 扫脸设备，收银机金额捕获16 星期二 瑞银信扫码退货报文 107-16 09:39:41.212 8856-8872/com.pay.ruipay E/SCAN_RETURN: &#123;&quot;orderId&quot;:&quot;121231231&quot;,&quot;transType&quot;:&quot;SCAN_RETURN&quot;,&quot;transResult&quot;:&quot;00&quot;,&quot;transName&quot;:&quot;微信退货&quot;,&quot;transMoney&quot;:&quot;1&quot;,&quot;merchantNo&quot;:&quot;88733D048161867&quot;,&quot;terminalNo&quot;:&quot;C7738606&quot;,&quot;merchantName&quot;:&quot;浙江丰收收信息科技有限公司&quot;,&quot;operNo&quot;:&quot;&quot;,&quot;batchNo&quot;:&quot;000006&quot;,&quot;traceNo&quot;:&quot;100147&quot;,&quot;payNo&quot;:&quot;81cc6f35556948e2bbc51777fbf71c82&quot;,&quot;refNo&quot;:&quot;000007418428&quot;,&quot;cardAcquirerCode&quot;:&quot;瑞银信&quot;,&quot;payWay&quot;:&quot;0001&quot;,&quot;date&quot;:&quot;0716&quot;,&quot;time&quot;:&quot;093933&quot;,&quot;forcePsw&quot;:&quot;false&quot;,&quot;forceSign&quot;:&quot;false&quot;&#125; 瑞银信平台扫码退货所需参数：金额，批次号，流水号，类型，日期。 17 星期三 瑞银信返回的日期时间格式和后台要求不一致。 非原交易卡号可退货成功。 18 星期四 联迪A8智慧收银项目整理 修复扫码的bug 扫码的轮询有吗？ 19 星期五 如果没有配置Transaction对应的名称则报错12345cn.fengfu.zhejiang.fengfupay E/MessageQueue-JNI: java.lang.IllegalArgumentException: ###Transaction name[银行卡核销] not found! Please check transaction xml config has contains this name!### at com.landicorp.android.finance.app.FinanceApplication.createTransaction(FinanceApplication.java:574) at com.landicorp.android.finance.app.MenuActivity.executeTransaction(MenuActivity.java:479) at com.landicorp.android.finance.app.MenuActivity.onButtonClicked(MenuActivity.java:335) 22 星期一 院子餐厅交易报表 排序 二维数组 23 星期二 常用类 A8源代码 24 星期三 FinanceApplication Transaction对应的有以Transaction为根节点的XML文件 name applicationName area globalConfig currentStepIndex context DefaultStepContainer * Stack TransactionStep25 星期四 finance app AnimationManager.java ApplicationConfig.java ApplicationConfigLoader.java BaseMenuActivity.java DescriptionParser.java FinanceApplication.java FinanceProvider.java MenuActivity.java TransactionStepActivity.java packet ISO8583Config.java ISO8583ConfigLoader.java ISO8583ConfigParser.java PacketConfig.java transaction communicate AbstractConnectionFactory.java BaseConnectionFactory.java BaseMacCalculator.java CertInfo.java CommSimpleIODevice.java Communication.java CommunicationDevice.java Connection.java ConnectionFactory.java CustomHttpClient.java ECBMacCaculator.java Ethernet.java EthernetInfo.java ISO8583LocalPacket.java ISO8583Packet.java ISO8583PacketFactory.java ISO8583PacketHeaderHandler.java ISO8583PacketImp.java MacCalculator.java ModemDevice.java NulCommDevice.java OnStateChangeListener.java Packet.java PacketFactory.java PacketHeaderHandler.java PacketHeaderHandlerV2.java SerialPortConnection.java SimpleIODeviceConnection.java SM4ECBMacCaculator.java SocketConnection.java SSLHttpConnection.java SSLSocketConnection.java TrustCertInstall.java Wifi.java Wireless.java WirelessInfo.java X99MacCaculator.java data AttributeGetter.java BatchNoValueGetter.java CommParameterValueGetter.java ContextValueGetter.java ContextValueSetter.java CurrentDateValueGetter.java CurrentDateValueSetter.java CurrentTimeValueGetter.java CurrentTimeValueSetter.java DateTimeValueGetter.java EmvAppValueGetter.java FieldValueGetter.java FieldValueSetter.java NullValueGetter.java PersistenceValueGetter.java PersistenceValueSetter.java RecordValueGetter.java ResponseFieldValueGetter.java ReversalValueGetter.java ReversalValueSetter.java RuntimeValueGetter.java RuntimeValueSetter.java SqlStatementValueGetter.java SqlValueGetter.java StringValueGetter.java SubStringGetter.java TagDataGetter.java TagDataWithoutFGetter.java TraceValueGetter.java ValueGetter.java ValueGetterCreator.java ValueSetter.java ValueSetterCreator.java database DatabaseConfigParser.java DatabaseLoader.java DatabaseManager.java DatabaseStatement.java DatabaseTable.java DatabaseUpgradeHandler.java DatabaseView.java DBOpenHelper.java DBRecord.java exception CommunicateDeviceNotReadyException.java CommunicateException.java CommunicateInterruptException.java CommunicateRejectException.java CommunicateTimeoutException.java ParserException.java printer step conditon EqualsCondition.java NotEqualsCondition.java NotStartsWithCondition.java RegexCondition.java SimpleTestCondition.java StartsWithCondition.java TransactionStepCondition.java AbstractStep.java CheckEqualsStep.java CheckMaxStep.java CheckRegExpStep.java DataConfig.java DataGroupConfig.java DebugStep.java EmptyStep.java ImportStep.java MakeFieldStep.java MakeValueStep.java RecordHandler.java ReversalHandler.java SetValueStep.java SimpleDataConfig.java SimpleObjectStep.java TransactionStep.java TransactionStepInterceptor.java TransactionStepResult.java UIStep.java util CardOutWaiter.java DataBuilder.java DataFactory.java DeviceUtil.java FieldTypeUtil.java FileOpenHelper.java FileSynchronizer.java LogUtil.java SecurityUtil.java SocketUtil.java StringUtil.java SyncedSettings.java SystemPropertiesProxy.java TLVData.java TLVDataList.java ToastX.java xmlparser logic ContextListGetter.java DBStatementListGetter.java DBTableListGetter.java ListGetter.java ListGetterCreator.java LogicBreak.java LogicCase.java LogicCaseMatch.java LogicCaseNotMatch.java LogicContext.java LogicContextValueGetter.java LogicData.java LogicDataManagerValueGetter.java LogicDefault.java LogicEqual.java LogicFor.java LogicItem.java LogicItemGroup.java LogicIterator.java LogicMatchs.java LogicMod.java LogicNotMatchs.java LogicParser.java LogicReturn.java LogicSwitch.java LogicUnEqual.java LogicValueGetter.java LogicValueGetterCreator.java SqlIterator.java SqlListGetter.java SubStringGetter.java BaseParser.java ActivityStack.java ActivityWrapper.java CodeDescriptor.java DataManager.java DefaultTransactionContext.java DefaultTransactionController.java DelayedFieldMaker.java EMVTransactionController.java InsertRecordTrigger.java ProxyTransactionContext.java RecordTrigger.java SimpleTransactionController.java Transaction.java TransactionConfigLoader.java TransactionContext.java TransactionController.java TransactionGlobalConfig.java TransactionParser.java TransactionSet.java TransactionSetParser.java TransactionStepContainer.java UpdateRecordTrigger.java xml解析 26 星期五 Android 浮窗 新大陆主密钥安装失败 联拓富API27 星期六 反射技术在android中的应用 插件 C语言29 星期一 预授权成功报文 12345678910111213141516&#123;&quot;status&quot;:&quot;00&quot;,&quot;msg&quot;:&quot;success&quot;,&quot;data&quot;:&#123; &quot;transactionid&quot;:&quot;9A38A4C16BEA41C0AA156D5D981FD41F&quot;, &quot;orderid&quot;:&quot;b36889475a60448f98c927e06139d584&quot;, &quot;refundorderid&quot;:&quot;&quot;, &quot;revokeorderid&quot;:&quot;&quot;, &quot;completeorderid&quot;:&quot;&quot;, &quot;orderstatus&quot;:&quot;&quot;, &quot;money&quot;:&quot;&quot;, &quot;paytype&quot;:&quot;1&quot;, &quot;qraddress&quot;:&quot;&quot;, &quot;terminalsn&quot;:&quot;&quot;, &quot;payinfo&quot;:&quot;&quot;, &quot;tips&quot;:&quot;支付成功&quot;&#125; &#125; 预授权交易查询接口 12345678910111213141516&#123;&quot;status&quot;:&quot;00&quot;,&quot;msg&quot;:&quot;success&quot;,&quot;data&quot;:&#123; &quot;transactionid&quot;:&quot;9A38A4C16BEA41C0AA156D5D981FD41F&quot;, &quot;orderid&quot;:&quot;b36889475a60448f98c927e06139d584&quot;, &quot;refundorderid&quot;:&quot;&quot;, &quot;revokeorderid&quot;:&quot;&quot;, &quot;completeorderid&quot;:&quot;&quot;, &quot;orderstatus&quot;:&quot;2&quot;, &quot;money&quot;:&quot;0.01&quot;, &quot;paytype&quot;:&quot;1&quot;, &quot;qraddress&quot;:&quot;&quot;, &quot;terminalsn&quot;:&quot;&quot;, &quot;payinfo&quot;:&quot;&quot;, &quot;tips&quot;:&quot;交易成功&quot;&#125; &#125; 12orderstatus(1:待支付，2:交易成功，3: 交易失败，4:交易已撤销，5:交易已关闭， 6:没有原始交易，7:交易撤销中) 预授权撤销接口12345678910111213141516&#123;&quot;status&quot;:&quot;00&quot;,&quot;msg&quot;:&quot;success&quot;,&quot;data&quot;:&#123; &quot;transactionid&quot;:&quot;C602595DF9DF45019E7FE54D1C81EE25&quot;, &quot;orderid&quot;:&quot;b36889475a60448f98c927e06139d584&quot;, &quot;refundorderid&quot;:&quot;&quot;, &quot;revokeorderid&quot;:&quot;C602595DF9DF45019E7FE54D1C81EE25&quot;, &quot;completeorderid&quot;:&quot;&quot;, &quot;orderstatus&quot;:&quot;&quot;, &quot;money&quot;:&quot;&quot;, &quot;paytype&quot;:&quot;&quot;, &quot;qraddress&quot;:&quot;&quot;, &quot;terminalsn&quot;:&quot;&quot;, &quot;payinfo&quot;:&quot;&quot;, &quot;tips&quot;:&quot;预授权撤销成功&quot;&#125; &#125; 30 星期二 未开通扫码预授权 12345678910111213141516&#123;&quot;status&quot;:&quot;01&quot;,&quot;msg&quot;:&quot;failure&quot;,&quot;data&quot;:&#123; &quot;transactionid&quot;:&quot;&quot;, &quot;orderid&quot;:&quot;55f6c607afa8491e8007dcc53b7b2fb0&quot;, &quot;refundorderid&quot;:&quot;&quot;, &quot;revokeorderid&quot;:&quot;&quot;, &quot;completeorderid&quot;:&quot;&quot;, &quot;orderstatus&quot;:&quot;&quot;, &quot;money&quot;:&quot;&quot;, &quot;paytype&quot;:&quot;1&quot;, &quot;qraddress&quot;:&quot;&quot;, &quot;terminalsn&quot;:&quot;&quot;, &quot;payinfo&quot;:&quot;&quot;, &quot;tips&quot;:&quot;商户没有开通扫码预授权权限&quot;&#125; &#125; 31 星期三 扫码预授权模块A920开发完成 银行卡权益校验 八月1 星期四 瑞银信SDK联迪A8版优化、装机 TLV 格式及编解码 2 星期五 设计模式适配器思想 Stack3 星期六4 星期日 二维火Android云收银模块化架构实践5 星期一 银行卡消费 1234567891011121314151617181920212223242526272829303132&#123;&quot;orderId&quot;:&quot;6B995CE8B0E747C1831CF11A1432D274&quot;,&quot;transType&quot;:&quot;SALE&quot;,&quot;transResult&quot;:&quot;00&quot;,&quot;transName&quot;:&quot;消费&quot;,&quot;transMoney&quot;:&quot;1&quot;,&quot;merchantNo&quot;:&quot;88733D048161867&quot;,&quot;terminalNo&quot;:&quot;C7738606&quot;,&quot;merchantName&quot;:&quot;浙江丰收收信息科技有限公司&quot;,&quot;operNo&quot;:&quot;01&quot;,&quot;batchNo&quot;:&quot;000004&quot;,&quot;traceNo&quot;:&quot;100038&quot;,&quot;refNo&quot;:&quot;000482915291&quot;,&quot;expDate&quot;:&quot;2612&quot;,&quot;cardNo&quot;:&quot;6230780100013423125&quot;,&quot;cardIssuerCode&quot;:&quot;03110000---&quot;,&quot;cardAcquirerCode&quot;:&quot;48873319&quot;,&quot;payWay&quot;:&quot;0004&quot;,&quot;cardInputType&quot;:&quot;2&quot;,&quot;date&quot;:&quot;0805&quot;,&quot;time&quot;:&quot;160105&quot;,&quot;forcePsw&quot;:&quot;true&quot;,&quot;forceSign&quot;:&quot;true&quot;,&quot;ARQC&quot;:&quot;9F9211A2A037DC0C&quot;,&quot;TVR&quot;:&quot;0000000000&quot;,&quot;AID&quot;:&quot;A000000333010101&quot;,&quot;TSI&quot;:&quot;0000&quot;,&quot;APPLAB&quot;:&quot;PBOC DEBIT&quot;,&quot;APPName&quot;:&quot;&quot;,&quot;UNPR_NUM&quot;:&quot;41F196FC&quot;,&quot;AIP&quot;:&quot;7C00&quot;,&quot;IAD&quot;:&quot;07010103A00000010A010000000000E056641A&quot;,&quot;TermCap&quot;:&quot;E0F0C8&quot;&#125; 银行卡消费撤销 108-05 16:03:56.559 28121-28235/com.pay.ruipay E/RUI: &#123;&quot;orderId&quot;:&quot;06FB6555651948BB8AEDB5715CC8188B&quot;,&quot;transType&quot;:&quot;SALE_REVOKE&quot;,&quot;transResult&quot;:&quot;00&quot;,&quot;transName&quot;:&quot;消费撤销&quot;,&quot;transMoney&quot;:&quot;1&quot;,&quot;merchantNo&quot;:&quot;88733D048161867&quot;,&quot;terminalNo&quot;:&quot;C7738606&quot;,&quot;merchantName&quot;:&quot;浙江丰收收信息科技有限公司&quot;,&quot;operNo&quot;:&quot;01&quot;,&quot;batchNo&quot;:&quot;000004&quot;,&quot;traceNo&quot;:&quot;100039&quot;,&quot;refNo&quot;:&quot;000482837788&quot;,&quot;expDate&quot;:&quot;2612&quot;,&quot;cardNo&quot;:&quot;6230780100013423125&quot;,&quot;cardIssuerCode&quot;:&quot;03110000---&quot;,&quot;cardAcquirerCode&quot;:&quot;48873319&quot;,&quot;payWay&quot;:&quot;0004&quot;,&quot;cardInputType&quot;:&quot;2&quot;,&quot;date&quot;:&quot;0805&quot;,&quot;time&quot;:&quot;160340&quot;,&quot;forcePsw&quot;:&quot;false&quot;,&quot;forceSign&quot;:&quot;false&quot;,&quot;imageData&quot;:&quot;Qk0+CgAAAAAAAD4AAAAoAAAA8AAAAFAAAAABAAEAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAA\\/\\/\\/\\/\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAwAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAHAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAMAAAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAHgAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAGAAAAAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAHwAA\\nAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAABgAAwAB2AAAAAAAAAAHgAAAAAAAAAAAAAAAAAAAAAAAM\\nAAHAAGwAAAAAAAAAB4AAAAAAAAAAAAAAAAAAAAAAAAwAB8AB3AAAAAAAAAA+AAAAAAAAAAAAAAAA\\nAAAAAAAAGAAOwAOYAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAYAB3ABzAAgAAAAAAHwAAAAAAA\\nAAAAAAAAAAAAAAAAABgAMYAccAGAAAAAAB8AAAAAAAAAAAH\\/wAAAAAAAAAAAOADjADhgBwAAAAAA\\neAAAAAAAAAAAAf\\/\\/\\/\\/\\/\\/8AAAAAAwAccAcGAeAAAAAAHgAAAAAAAAAAAAf\\/\\/\\/\\/\\/\\/4AAAAADAHhgHg\\nwHgAAAAAD4AAAAAAAAAAAAAAAD4AADgAAAAAMB4MB4DB4AAAAAA8AAAAAB8AAAAAAAAABwAA8AAA\\nAAAwPBwPAY\\/AAAAAADAAAAAH\\/gAAAYAAAAADAAfAAAAAADDwGDwB\\/gAAAAAAAAAAAf\\/AAAABgAAA\\nAAMAPwAAAAAAP8Ax8ADgAAAAAAAAAAA\\/4AAAAAMAAA4AAQH4AAAAAAAPAD\\/AAAAAAAAAAAAAD\\/wA\\nAAAAAwAAH4ABB8AAAAAAAAAAHgAAAAAAAAAAAD\\/\\/gAAAAAADAAA5wAM+AAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAYAAHBgA\\/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAA4HAHwAAAAAAAAAAA\\nAAAAAAAEgMB5IA0AIAEAEgB+AAOAMD4AAAAAAAAAAAAAAAAAAAhAQGIQGIAgAQAhAMYADwAZ\\/gAA\\nAAAAAAAAAAAAAAAAGGBAZhgwwDABgGGBhwA8AB\\/cAAAAAAAAAAAAAAAAAAAYYCBmGDDAEACAYYMD\\ngfAAP\\/gAAAAAAAAAAAAAAAAAAAjgP8I4MMAQAIAjgwH\\/wAH34AAAAAAAAAAAAAAAAAAADcAAw3Aw\\nwBgAwDcDAD4AA8AAAAAAAAAAAAAAAAAYAAADgBGA4DDACABADgMAAAAfAAAAAAAAAAAAAAAAAPwA\\nAAcAEYH\\/\\/4AIAEH8AwAAAHgAAAAAAAAAAAAAAAABzAAADIALf\\/\\/QAAwAZ\\/oDAAAB4AAAAAAAAAAA\\nAAAAAAcMAAAYQAs\\/kNgABAA+eQMAAAeAAAAAAAAAAAAAAAAADgwAABhgBwYZiAAEAHBtgYCADgAA\\nAAAAAAAAAAAAAAA4DAAACEAGAhMEAYYM8C0AgIA8AAAAAAAAAAAAAAAAAHAMAAAMwAIDNwMA\\/gfw\\nPwBjgDAAAAAAAAAAAAAAAAAB4BgH\\/\\/8AAAAOAEAAAwAYAAgAYAAAAAAAAAAAAAAAAAOAG\\/\\/4PgAA\\nABwAAAPGABgAAADAAAAAAAAAAAAAAAAADwf\\/8AD4AAAAOAAAD8YAMAAAAMAAAAAAAAAAAAAAAf\\/\\/\\n\\/\\/AAB+AAAABwAAA9jABwAAAAwAAAAAAAAAAAAAAH\\/\\/wAMAAPAAAAAcAAAHGMAGAAAADAAAAAAAAA\\nAAAAAAIBwABgADwAAAADgAAB4YwAwAAAAMAAAAAAAAAAAAAAAAOAAOAAcAAAAAcAAAODGAGAAAAA\\nYAB\\/+AAAAAAAAAAADgAAwAHAAAAAHgAADgMYA4AAAAB4H\\/\\/4AAAAAAAAAAAcAAGAB4AAAAA4AAA8\\nBhgHAAAAAB\\/\\/\\/+AAAAAAAAAAADgAAwAOAAAAAHAAAPAGGA4AAAAAP\\/\\/\\/wAAAAAAAAAAA4AAGADgA\\nAAAA4B4HwAYYHAAAAAH8AfngAAAAAAAAAAHAAA4A8AAAAAPH\\/x8ABhh4AAAAD8AHwHAAAAAAAAAA\\nA4AAHAHAAAAAD3+D+AAGGeAAAAB8AA4AMAAAAAAAAAADAAAwA4AAAAAf8APAAAYfgAAAA+AAHAAY\\nAAAAAAAAAAAAAHAGAAAAAH8AAAAAB\\/8AAAAHgAA4ABgAAAAAAAAAAAABwAYAAAAAcAAAAAAB+AAA\\nABwAADAAGAAAAAAAAAAAAD+AAwAAAAAAAAAAAAAYAAAAOAAAYAAYAAAAAAAAAAAAPgADAAAAAAAA\\nAAAAABgAAABwAABgADgAAAAAAAAAAAAAAAOAAAAAAAAAAAAAGAAAAOAAAGAAMAAAAAAAAAAAAAAA\\nAeAAAAAAAAAAAAAYAAAAwAAAYAB8AAAAAAAAAAAAAAAAeAAAAAAAAAAAABgAAADAAABgAfwAAAAA\\nAAAAAAAAAAAf4AAAAAAAAAAAGAAAAMAAADAH\\/AAAAAAAAAAAAAAAAAP\\/gAAAAAAAAAAYAAAAwAAA\\nHw\\/wAAAAAAAAAAAAAAAAAA+AAAAAAAAAABgAAADgAAAP\\/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nGAAAAHAAAAB8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAOAAAAHAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAADAAAAAfAAAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAAf+B\\/8AAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAADgAAAAAH\\/\\/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAA\\/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD\\/wAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAA 6 星期二 瑞银信SDK改造完毕 扫码预授权SDK版本 7 星期三8 星期四 Transaction 13 星期二14 星期三 商米机器 Landi 先从视图下手。 支付SDK activity InputBankPayAmtActivity 输入金额 OrderConfirmActivity 订单确认 标签的含义 Transaction 交易标签 step 下一步 condition 条件 algorithm 算法15 星期四 算法 algorithm 16 星期五 下载主密钥 123456789101112&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0900&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000236&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10023554&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;110330151370314&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;00000002001&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;313734374341383234363739&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;01 &quot;/&gt; &lt;/Packet&gt; 1234567891011121314&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0910&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000236&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;171044&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0816&quot;/&gt; &lt;field id=&quot;37&quot; value=&quot;100000049942&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;56&quot; value=&quot;C015欢迎使用POS刷卡C109POS签购单C210FFFFFFFFFFC303111C412感谢你的惠顾C512400-99999999P1011P2011P3011P4011P5011N00812345678T10810006048T215112330170110006T326杭州余杭区良渚新联合大酒店T415872331770110003&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;00000002001&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;99C65867E53FC70ADAC0F34AD8D840DE236619DE&quot;/&gt; &lt;/Packet&gt; 签到1234567891011&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0800&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000237&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;00000002001&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;999&quot;/&gt; &lt;/Packet&gt; 12345678910111213141516&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0810&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000237&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;171653&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0816&quot;/&gt; &lt;field id=&quot;32&quot; value=&quot;123456&quot;/&gt; &lt;field id=&quot;37&quot; value=&quot;123456789012&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;00000001001&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;E96B0CD4FD509CFB97A5989FCFD398E3B9810F5A23117D77&quot;/&gt; &lt;/Packet&gt; 支付宝扫一扫 12345678910111213141516171819&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0200&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000239&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;03&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;90000001000&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;3546303130313832383736333132373230393735383230353535463033363139303831363546303230335A464235463034363139303831363543323031&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;01 &quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;0000000000000000&quot;/&gt; &lt;/Packet&gt; 1234567891011121314151617181920212223&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0210&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000239&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;172020&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0816&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;030&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;37&quot; value=&quot;100000000004&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;90000001000&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;354631323033324243413532394239363736323443373038463135353236443433464539314336&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;CUP&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;3639364138364344&quot;/&gt; &lt;/Packet&gt; 微信扫一扫12345678910111213141516171819&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0200&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000269&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;03&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;90000001000&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;354630313031383133353137303037393735393639323339303546303336313930383137354630323035575850415935463034363139303831373543323031&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;01 &quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;0000000000000000&quot;/&gt; &lt;/Packet&gt; 123456789101112131415161718192021222324&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0210&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000269&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;153418&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0817&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;030&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;37&quot; value=&quot;100000000013&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;CD&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;56&quot; value=&quot;成功&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;90000001000&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;354631323033323930303038453944414245453444374342343346423331333135313138333745&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;CUP&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;3032383332344633&quot;/&gt; &lt;/Packet&gt; 微信订单查询123456789101112131415161718&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0200&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000270&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;03&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;91000001000&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;3546303336313930383137354630323035575850415935463034363139303831373546313230333239303030384539444142454534443743423433464233313331353131383337453546313531343230313930383137303333343231&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;01 &quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;0000000000000000&quot;/&gt; &lt;/Packet&gt; 123456789101112131415161718192021&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0210&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000270&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;153418&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0817&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;030&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;91000001000&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;354631333132&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;CUP&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;3734414431343730&quot;/&gt; &lt;/Packet&gt; 扫码订单查询1234567891011121314151617181920&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0200&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000273&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;03&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;91000001000&quot;/&gt; &lt;field id=&quot;61&quot; value=&quot;000001000269&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;3546303336313930383137354630323035575850415935463034363139303831373546313230333239303030384539444142454534443743423433464233313331353131383337453546313531343230313930383137303431383234&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;01 &quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;0000000000000000&quot;/&gt; &lt;/Packet&gt; 1234567891011121314151617181920212223&lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0210&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;4&quot; value=&quot;000000000001&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000273&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;153418&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0817&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;030&quot;/&gt; &lt;field id=&quot;23&quot; value=&quot;001&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10006048&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;112330170110006&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;91000001000&quot;/&gt; &lt;field id=&quot;61&quot; value=&quot;000001000269&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;354631333132&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;CUP&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;4230344230304443&quot;/&gt; &lt;/Packet&gt; 下载主密钥 10040600501000060320032130109000000000000C0001431303032343030323131303333303135383132303238360011000000120030001030383230303230313139 12345601 1E 60 00 04 00 00 60 10 00 02 01 09 09 10 00 18 00 00 0A 00 01 14 19 57 20 08 28 31 30 30 30 30 30 34 38 30 33 30 30 30 30 01 98 43 30 31 35 BB B6 D3 AD CA B9 D3 C3 50 4F 53 CB A2 BF A8 43 31 30 39 50 4F 53 C7 A9 B9 BA B5 A5 43 32 31 30 46 46 46 46 46 46 46 46 46 46 43 33 30 33 31 31 31 43 34 31 32 B8 D0 D0 BB C4 E3 B5 C4 BB DD B9 CB 43 35 31 32 34 30 30 2D 31 36 35 2D 31 36 35 35 50 31 30 31 31 50 32 30 31 31 50 33 30 31 31 50 34 30 31 31 50 35 30 31 31 4E 30 30 38 31 32 33 34 35 36 37 38 54 31 30 38 31 30 30 32 34 32 32 35 54 32 31 35 31 31 30 33 33 30 31 35 31 33 37 30 33 31 34 54 33 32 32 BA BC D6 DD D0 A1 B0 CD C0 AD B7 FE CA CE D3 D0 CF DE B9 AB CB BE 54 34 31 35 38 37 32 33 33 31 37 35 31 33 37 30 30 30 31 00 11 00 00 00 12 00 30 00 36 4B 6D B0 E5 B4 3F 4D 42 58 95 C9 8E 8C 92 B3 8B CF F8 4D 4C 70 70 41 3D BD D3 28 40 18 14 95 CF F0 25 30 BE 12345678910111213141516171819SEND0040 //报文长度64字节长度6005010000 //报文头603200321301 //Hearder0900 //消息类型00 00 00 00 00 C0 00 14 00000000000000000000000000000000000000001100000000000000000101003130303234303032 313130333330313538313230323836 00110000001 20030001030383230303230313139【41域】ans8 ASCII 31 30 30 32 34 30 30 32 -&gt; 10024002 【42域】ans15 ASCII 31 31 30 33 33 30 31 35 38 31 32 30 32 38 36 -&gt; 110330158120286【60域】n11 BCD 【60.1】n2 BCD 00 【60.2】n6 BCD 110000 【60.3】n3 BCD 001 200300010 30383230303230313139【62域】 30 38 32 30 30 32 30 31 31 39 -&gt;0820020119 12````1 10 60 00 04 00 00 60 10 00 02 01 09 09 10 00 18 00 00 0A 00 01 14 20 31 49 08 30 31 30 30 30 30 30 34 38 32 35 33 39 30 30 01 84 43 30 31 35 BB B6 D3 AD CA B9 D3 C3 50 4F 53 CB A2 BF A8 43 31 30 39 50 4F 53 C7 A9 B9 BA B5 A5 43 32 31 30 46 46 46 46 46 46 46 46 46 46 43 33 30 33 31 31 31 43 34 31 32 B8 D0 D0 BB C4 E3 B5 C4 BB DD B9 CB 43 35 31 32 34 30 30 2D 31 36 35 2D 31 36 35 35 50 31 30 31 31 50 32 30 31 31 50 33 30 31 31 50 34 30 31 31 50 35 30 31 31 4E 30 30 38 31 32 33 34 35 36 37 38 54 31 30 38 31 30 30 32 34 32 33 30 54 32 31 35 31 31 30 33 33 30 31 35 38 31 32 30 32 38 36 54 33 30 38 B7 E1 B8 B6 D0 C5 CF A2 54 34 31 35 38 32 39 33 33 31 37 37 30 31 31 30 35 31 38 00 11 00 00 00 12 00 30 00 36 45 25 6C A0 6B 33 66 3D AB 45 E3 AD 0E EA 80 7D DA C0 F3 4A D8 D8 40 DE B8 73 09 1C 46 87 EC E8 6F 9B 4C 67 RECV1234567891011121314151617181920212223242526272829303132333435363738396000040000601000020109091000 18 00 00 0A 00 01 140000000000011000000000000000000000001010000000000000000100010100195148 0826 313030303030343738303733 3030 0184【368个字符】 43303135BBB6D3ADCAB9D3C3504F53CBA2BFA843313039504F53C7A9B9BAB5A543323130464646464646464646464333303331313143343132B8D0D0BBC4E3B5C4BBDDB9CB433531323430302D3136352D31363535503130313150323031315033303131503430313150353031314E30303831323334353637385431303831303032343030325432313531313033333031353831323032383654333038B7E1B8B6D0C5CFA25434313538323933333137373031313035313800110000001 20030003698F0EC7531FC5C5403AD9338F2138C3EDAC0F34AD8D840DEB873091C4687ECE895C80736【12域】n6 hhmmss BCD 195148 -&gt; 19:51:48【13域】n4 MMDD BCD 0826 【37域】an12 ASCII 31 30 30 30 30 30 34 37 38 30 37 33 -&gt; 100000478073【39域】an2 ASCII 30 30 -&gt; 000184 //密文长度43303135BBB6D3ADCAB9D3C3504F53CBA2BFA843313039504F53C7A9B9BAB5A543323130464646464646464646464333303331313143343132B8D0D0BBC4E3B5C4BBDDB9CB433531323430302D3136352D31363535503130313150323031315033303131503430313150353031314E30303831323334353637385431303831303032343030325432313531313033333031353831323032383654333038B7E1B8B6D0C5CFA254343135383239333331373730313130353138明文内容 TLV 格式C015欢迎使用POS刷卡C109POS签购单C210FFFFFFFFFFC303111C412感谢你的惠顾C512400-165-1655P1011P2011P3011P4011P5011N00812345678T10810024002T215110330158120286T308丰付信息T415829331770110518【56域】ans ...999 LLLVAR ASCII TLV格式 T1 终端号 10024002 T2 商户号 110330158120286 T3 商户名称 丰付信息 T4 银联商户号 829331770110518【60域】n11 BCD 00110000001 【60.1】n2 BCD 00 【60.2】n6 BCD 110000 【60.3】n3 BCD 001 200300036 98F0EC7531FC5C5403AD9338F2138C3E DAC0F34AD8D840DEB873091C4687ECE8 95C80736 200300036 5C0D6E238BB7E56A223B4B2438045B4B DAC0F34AD8D840DEB873091C4687ECE8 6EC83432【62域】 CCEE5865926600A7FD1BD9F42A16098DDAC0F34AD8D840DEB873091C4687ECE8647F8A4E 扫码支付send 100D7600501000060320032130102003020068000C080370000000000000000010001930320000100313030323432333031313033333031353831323032383631353600634132303335303130303230343032303130303832303032303131393035303038333230303031202041333031383133353137383730303638343031373133380011900000010000006335463031303138313335313738373030363834303137313338354630333631353033343435463032303557585041593546303436313930383330354332303100033031204344384638354343 房管局send 10069600501000060320032130107002020048000C08015000000000101002092313030323430303231313033333031353831323032383631353600110100001200000031464448463131313231202020202020202020202020202020323031393038234436413746383145 12345678910111213141516171819202100766005010000603200321301070020 20 04 80 00 C0 80 150010000000100000000001001000000000000000110000001000000000010101【3域】000000【11域】000061【22域】002【25域】92【41域】3130303234303032【42域】313130333330313538313230323836【49域】313536【60域】【62域】5F03 6 104705 5F03 6 104705 5F04 6 190828 5F15014 nullFDHF11121 201908#【64域】000000 000061 002 092 3130303234303032 313130333330313538313230323836 313536 0011 010000120000 0044 354630333631303437303535463033363130343730353546303436313930383238354631353031346E756C6C 3537453744334636 房管局 rec1234567891011121314151617181920216000040000601000020109071020 20 04 80 02 C0 80 150010000000100000000001001000000000000010110000001000000000010101【3域】 000000【11域】 000061【22域】 002【25域】 092【39域】 3430 40【41域】 3130303234303032 10024002【42域】 313130333330313538313230323836【49域】 313536 【60域】【62域】【64域】ocket https://www.jianshu.com/p/8ee3ee766265 https://github.com/vilyever/AndroidSocketClient https://github.com/apon/lemon https://blog.csdn.net/u012391876/article/details/73913560 http://www.jizhuomi.com/android/example/443.html https://www.jianshu.com/p/f4a60bb8dfab https://www.jianshu.com/p/7dac7e5dffb2 https://github.com/HappyGhostz/OkhttpReview https://github.com/smile-sxl/NetWorkProject/tree/master/app/src/main/java/com/smile/networkproject/http 商米send10040600501000060320032130109000000000000C0001431303032343233303131303333303135383132303238360011000000010030001030383230303230313139 商米rec百富send10040600501000060320032130109000000000000C0001431303032343233303131303333303135383132303238360011000000010030001030383230303230313139 百富rec下载主密钥(62域) 12假如 TMK 为全 0，密钥加密密钥为 全 F，则下发的密钥为: CAAAAF4DEAF1DBAECAAAAF4DEAF1DBAE FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 8CA64DE9 1231FEE88C948F6DA3CA8FAEB137A97DFDA DAC0F34AD8D840DEB873091C4687ECE8 1E15660818C667DCFE87FC8C2A950DA549F5F67C DAC0F34AD8D840DEB873091C4687ECE8 01386ABE2F4E04EAF38441568895A40C906DC380//明文 FinApplication.dal.getSys(). unused 终端签到1send 005C//长度600501000060320032130108000020000000C0001600009931303032343239353131303333303135383132303238360011000000010030003053657175656E6365204E6F313731323334504531383139365436303839350003393939 12rec60000400006010000201090810003800010AC000140000991535020902061234563132333435363738393031323030313030323432393531313033333031353831323032383600110000000100300040472847DE339088AE361C09EBC1BB0F1F9FC1D9EB4F2BFE7AA3033AB0852568E37382AA172F9201EB 九月24 Transaction.java String name 【下载主秘钥】 String applicationName 【】 String area TransactionGlobalConfig 【】 List results TransactionStepResult Object nextStep boolean isJumpType boolean isGoAhead List interceptors String className String intercept(TransactionContext context) String name private List&lt;Pair&lt;String, ValueGetter&gt;&gt; params; int currentStepIndex 【】 DefaultTransactionContext context Map&lt;String, String&gt; values Map&lt;String, String&gt; params Map&lt;String, String&gt; attrs Map&lt;String, String&gt; global Packet basePacket Packet baseResponsePacket ISO8583Packet packet ISO8583Packet responsePacket SyncedSettings reversalData SyncedSettings persistenceData SyncedSettings commParams DatabaseManager dbManager PrinterTemplateManager prtManager ActivityStack activityStack Activity homeActivity Activity baseActivity TransactionStep currentStep DBRecord lastRecord String applicationName String area Pinpad pinpad BaseConnectionFactory&lt;?&gt; connectionFactory PBOCTransaction pbocTransaction CodeDescriptor descriptor TransactionController controller boolean isForSilence PausableHandler mainHandler Transaction.DefaultStepContainer Stack stepStack ActivityStack activityStack ReversalHandler reversalHandler RecordHandler recordHandler Transaction.OnTransactionFinishListener onFinish Transaction.OnBeforeTransactionFinishListener onBeforeFinish boolean isFinished Map&lt;String, ValueGetter&gt; attributes BaseConnectionFactory&lt;?&gt; connectionFactory String lastResult TransactionController controller PBOCFactory pbocFactory int baseStepIndex = 0 int firstImportStepIndex 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714809-24 17:05:23.770 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/009-24 17:05:23.776 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/109-24 17:05:23.782 792-4554/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.789 792-4554/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.794 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.797 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/209-24 17:05:23.804 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/309-24 17:05:23.813 792-4516/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.819 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/409-24 17:05:23.832 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/509-24 17:05:23.833 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/609-24 17:05:23.833 9631-9631/cn.fengfu.zhejiang.fengfupay I/Timeline: Timeline: Activity_launch_request id:cn.fengfu.zhejiang.fengfupay time:763015309-24 17:05:23.834 792-4443/? I/ActivityManager: START u0 &#123;cmp=cn.fengfu.zhejiang.fengfupay/.unionpay.CommunicateActivity (has extras)&#125; from uid 10171 on display 009-24 17:05:23.834 792-4443/? W/ActivityManager: startActivity called from finishing ActivityRecord&#123;38fc24de u0 cn.fengfu.zhejiang.fengfupay/.unionpay.setup.MainKeyDownloadActivity t3 f&#125;; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent &#123; cmp=cn.fengfu.zhejiang.fengfupay/.unionpay.CommunicateActivity (has extras) &#125;09-24 17:05:23.835 792-4443/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.888 281-846/? E/AudioPolicyManager: unknown stream type 1309-24 17:05:23.891 9631-9631/cn.fengfu.zhejiang.fengfupay E/======================: run run run run09-24 17:05:23.894 9631-9631/cn.fengfu.zhejiang.fengfupay I/DefaultTransactionController: --- current trans has no reversal ---09-24 17:05:23.913 9631-9631/cn.fengfu.zhejiang.fengfupay D/Communication: =====CommunicationDevice==getDevice is [nul_socket_free]====09-24 17:05:23.913 9631-9631/cn.fengfu.zhejiang.fengfupay D/Communication: =====CommunicationDevice==getDevice is [nul_socket_free]====09-24 17:05:23.914 9631-9631/cn.fengfu.zhejiang.fengfupay D/Communication: -----------------------------state------------------------009-24 17:05:23.914 9631-9631/cn.fengfu.zhejiang.fengfupay D/Communication: ===========================SEND START==========================09-24 17:05:23.903 9631-9631/cn.fengfu.zhejiang.fengfupay I/jiang.fengfupay: type=1400 audit(0.0:897): avc: denied &#123; transfer &#125; for scontext=u:r:untrusted_app:s0 tcontext=u:r:init:s0 tclass=binder permissive=109-24 17:05:23.916 3970-3970/? D/!MCSER!: ================ ON LOGIN (pid:9631, tid:3970) ================09-24 17:05:23.917 3970-3970/? D/!MCSER!: LOGIN | login succss !09-24 17:05:23.918 9631-9631/cn.fengfu.zhejiang.fengfupay I/ViewRootImpl: CPU Rendering VSync enable = true09-24 17:05:23.919 3970-4039/? W/!MCSER!: SECURITY## a client is using &apos;oneway&apos;!09-24 17:05:23.920 9631-17020/cn.fengfu.zhejiang.fengfupay D/XMLPackage: &lt;?xml version=&quot;1.0&quot; encoding=&quot;gb2312&quot;?&gt; &lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0900&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000048&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10023771&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;110330170110006&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;00000002001&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;313734374341383234363931&quot;/&gt; &lt;field id=&quot;63&quot; value=&quot;01 &quot;/&gt; &lt;/Packet&gt;09-24 17:05:23.922 9631-17020/cn.fengfu.zhejiang.fengfupay D/Communication: connecting --------------- 09-24 17:05:23.922 9631-17020/cn.fengfu.zhejiang.fengfupay D/Communication: =====CommunicationDevice==getDevice is [nul_socket_free]====09-24 17:05:23.922 9631-17020/cn.fengfu.zhejiang.fengfupay I/SocketConnection: connecting--------------addr[121.43.181.76:5555]---------------09-24 17:05:23.936 792-4443/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.940 9631-17020/cn.fengfu.zhejiang.fengfupay D/Communication: sending --------------- 09-24 17:05:23.941 9631-17020/cn.fengfu.zhejiang.fengfupay E/log: data:600003000060320032000209000020000000C00016000048313030323337373131313033333031373031313030303600110000000200100012313734374341383234363931000330312009-24 17:05:23.941 9631-17020/cn.fengfu.zhejiang.fengfupay D/Communication: receiving --------------- 09-24 17:05:23.945 792-4443/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.956 792-807/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.969 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.973 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.975 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.982 792-816/? I/ActivityManager: Displayed cn.fengfu.zhejiang.fengfupay/.unionpay.CommunicateActivity: +131ms (total +228ms)09-24 17:05:23.982 792-816/? I/Timeline: Timeline: Activity_windows_visible id: ActivityRecord&#123;5bbcfdb u0 cn.fengfu.zhejiang.fengfupay/.unionpay.CommunicateActivity t3&#125; time:763030209-24 17:05:23.987 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:23.990 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.002 9631-9631/cn.fengfu.zhejiang.fengfupay I/Timeline: Timeline: Activity_idle id: android.os.BinderProxy@1845f5cf time:763032209-24 17:05:24.002 9631-9631/cn.fengfu.zhejiang.fengfupay I/Timeline: Timeline: Activity_idle id: android.os.BinderProxy@2c3adcd time:763032209-24 17:05:24.032 17022-17022/? E/VM_BMS: Unable to open BMS device09-24 17:05:24.032 17022-17022/? E/VM_BMS: Unable to intialize BMS parameters09-24 17:05:24.042 9631-17020/cn.fengfu.zhejiang.fengfupay E/log: rec:60000400006010000201090910003800000A00011400004817052409243130303030303530373636383030020243303135BBB6D3ADCAB9D3C3504F53CBA2BFA843313039504F53C7A9B9BAB5A543323130464646464646464646464333303331313143343132B8D0D0BBC4E3B5C4BBDDB9CB433531323430302D3136352D31363535503130313150323031315033303131503430313150353031314E30303831323334353637385431303831303032333737315432313531313033333031373031313030303654333236BABCD6DDD3E0BABCC7F8C1BCE4BED0C2C1AABACFB4F3BEC6B5EA543431353832393333313737303131303531380011000000020010002043C15D1B9DB5681226281CADEC5E400FB6E1EDC009-24 17:05:24.047 9631-17020/cn.fengfu.zhejiang.fengfupay D/XMLPackageResponse: &lt;?xml version=&quot;1.0&quot; encoding=&quot;gb2312&quot;?&gt; &lt;Packet&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0910&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000048&quot;/&gt; &lt;field id=&quot;12&quot; value=&quot;170524&quot;/&gt; &lt;field id=&quot;13&quot; value=&quot;0924&quot;/&gt; &lt;field id=&quot;37&quot; value=&quot;100000507668&quot;/&gt; &lt;field id=&quot;39&quot; value=&quot;00&quot;/&gt; &lt;field id=&quot;56&quot; value=&quot;C015欢迎使用POS刷卡C109POS签购单C210FFFFFFFFFFC303111C412感谢你的惠顾C512400-165-1655P1011P2011P3011P4011P5011N00812345678T10810023771T215110330170110006T326杭州余杭区良渚新联合大酒店T415829331770110518&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;00000002001&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;43C15D1B9DB5681226281CADEC5E400FB6E1EDC0&quot;/&gt; &lt;/Packet&gt;09-24 17:05:24.047 9631-17020/cn.fengfu.zhejiang.fengfupay I/Communication: ----=====================-transfer end-======================----- 09-24 17:05:24.062 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/709-24 17:05:24.066 9631-9631/cn.fengfu.zhejiang.fengfupay D/debug: respField56 = C015欢迎使用POS刷卡C109POS签购单C210FFFFFFFFFFC303111C412感谢你的惠顾C512400-165-1655P1011P2011P3011P4011P5011N00812345678T10810023771T215110330170110006T326杭州余杭区良渚新联合大酒店T41582933177011051809-24 17:05:24.066 9631-9631/cn.fengfu.zhejiang.fengfupay D/debug: respField56 = [B@13c8eb5c09-24 17:05:24.067 9631-9631/cn.fengfu.zhejiang.fengfupay D/debug: respField56 = C015欢迎使用POS刷卡C109POS签购单C210FFFFFFFFFFC303111C412感谢你的惠顾C512400-165-1655P1011P2011P3011P4011P5011N00812345678T10810023771T215110330170110006T326杭州余杭区良渚新联合大酒店T41582933177011051809-24 17:05:24.067 9631-9631/cn.fengfu.zhejiang.fengfupay D/debug: T3 value=杭州余杭区良渚新联合大酒店09-24 17:05:24.067 9631-9631/cn.fengfu.zhejiang.fengfupay D/debug: T1 value=1002377109-24 17:05:24.067 9631-9631/cn.fengfu.zhejiang.fengfupay D/debug: T2 value=11033017011000609-24 17:05:24.067 9631-9631/cn.fengfu.zhejiang.fengfupay D/debug: T4 value=82933177011051809-24 17:05:24.079 792-792/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.088 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/809-24 17:05:24.092 9631-9631/cn.fengfu.zhejiang.fengfupay D/saveAndLoadMainKey: field62 = 43C15D1B9DB5681226281CADEC5E400FB6E1EDC009-24 17:05:24.093 9631-9631/cn.fengfu.zhejiang.fengfupay D/saveAndLoadMainKey: 主密钥密文 = 43C15D1B9DB5681209-24 17:05:24.093 9631-9631/cn.fengfu.zhejiang.fengfupay D/saveAndLoadMainKey: 主密钥加密秘钥= 26281CADEC5E400F09-24 17:05:24.093 9631-9631/cn.fengfu.zhejiang.fengfupay I/MainKeyDownload: 主秘钥明文：：5E95F8FFB03D458809-24 17:05:24.096 3949-3949/? D/PinpadDevice: [Line] : 1000; [Func] : getKapInfo; pinpad ext perm check .09-24 17:05:24.096 792-1017/? W/Domain: checkUidPermission(), current state is PS_MOCKUP, we grant permission: com.landi.pinpad.perm.NORMAL_FUNC09-24 17:05:24.101 3949-4024/? D/PinpadDevice: [Line] : 779; [Func] : formatKap; pinpad ext perm check .09-24 17:05:24.101 792-4443/? W/Domain: checkUidPermission(), current state is PS_MOCKUP, we grant permission: com.landi.pinpad.perm.ADMIN_FUNC09-24 17:05:24.109 792-807/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.113 3974-3974/? D/StatusBar.NetworkController: hasService: mServiceState=1 1 home null null null Unknown Unknown CSS not supported -1 -1 RoamInd=-1 DefRoamInd=-1 EmergOnly=true retVal=false09-24 17:05:24.115 3974-3974/? D/StatusBar.NetworkController: refreshViews: Data not connected!! Set no data type icon / Roaming09-24 17:05:24.116 3974-3974/? D/StatusBar.NetworkController: refreshViews connected=&#123; wifi &#125; level=4 combinedSignalIconId=0x7f020366/com.android.systemui:drawable/stat_sys_wifi_signal_4_fully combinedActivityIconId=0x7f02035b mobileLabel=只能拨打紧急呼救电话 wifiLabel=&quot;fengfu2.5G&quot; emergencyOnly=true combinedLabel=&quot;fengfu2.5G&quot; mAirplaneMode=false mDataActivity=0 mPhoneSignalIconId=0x7f02034d/com.android.systemui:drawable/stat_sys_signal_null mQSPhoneSignalIconId=0x7f0200b9/com.android.systemui:drawable/ic_qs_signal_no_signal mDataDirectionIconId=0x0/(null) mDataSignalIconId=0x7f02034d/com.android.systemui:drawable/stat_sys_signal_null mDataTypeIconId=0x0/(null) mQSDataTypeIconId=0x0/(null) mNoSimIconId=0x7f020098/com.android.systemui:drawable/ic_qs_no_sim mWifiIconId=0x7f020366/com.android.systemui:drawable/stat_sys_wifi_signal_4_fully mQSWifiIconId=0x7f0200c9/com.android.systemui:drawable/ic_qs_wifi_full_4 mWifiActivityIconId=0x7f02035b/com.android.systemui:drawable/stat_sys_wifi_inout mBluetoothTetherIconId=0x10806ac/android:drawable/stat_sys_tether_bluetooth09-24 17:05:24.117 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:24.118 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:24.120 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:24.120 3974-3974/? D/StatusBar.NetworkController: changing data overlay icon id to 213083836309-24 17:05:24.229 270-270/? I/SurfaceFlinger: FPS: 1609-24 17:05:24.244 3949-3949/? D/PinpadDevice: [Line] : 890; [Func] : loadPlainTextKey; pinpad ext perm check .09-24 17:05:24.244 792-4517/? W/Domain: checkUidPermission(), current state is PS_MOCKUP, we grant permission: com.landi.pinpad.perm.ADMIN_FUNC09-24 17:05:24.259 3949-4024/? D/PinpadDevice: [Line] : 839; [Func] : switchKapToWorkMode; pinpad ext perm check .09-24 17:05:24.259 792-4480/? W/Domain: checkUidPermission(), current state is PS_MOCKUP, we grant permission: com.landi.pinpad.perm.ADMIN_FUNC09-24 17:05:24.297 9631-9631/cn.fengfu.zhejiang.fengfupay I/MainKeyDownload: 主秘钥下装成功！！！！09-24 17:05:24.298 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: step no ------------------下载主秘钥------------------/909-24 17:05:24.298 9631-9631/cn.fengfu.zhejiang.fengfupay I/Timeline: Timeline: Activity_launch_request id:cn.fengfu.zhejiang.fengfupay time:763061809-24 17:05:24.302 792-2322/? I/ActivityManager: START u0 &#123;cmp=cn.fengfu.zhejiang.fengfupay/.unionpay.CustomInfoActivity (has extras)&#125; from uid 10171 on display 009-24 17:05:24.303 792-2322/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.488 3970-4044/? W/!MCSER!: SECURITY## a client is using &apos;oneway&apos;!09-24 17:05:24.489 9631-9631/cn.fengfu.zhejiang.fengfupay I/ViewRootImpl: CPU Rendering VSync enable = true09-24 17:05:24.493 9631-9631/cn.fengfu.zhejiang.fengfupay I/jiang.fengfupay: type=1400 audit(0.0:898): avc: denied &#123; write &#125; for name=&quot;delay&quot; dev=&quot;sysfs&quot; ino=20258 scontext=u:r:untrusted_app:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=109-24 17:05:24.600 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.601 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.606 792-816/? I/ActivityManager: Displayed cn.fengfu.zhejiang.fengfupay/.unionpay.CustomInfoActivity: +283ms09-24 17:05:24.607 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.640 792-4406/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.720 4135-4135/? D/wpa_supplicant: wlan0: Control interface command &apos;SIGNAL_POLL&apos;09-24 17:05:24.729 792-4355/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.737 792-4517/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.737 3974-3974/? D/StatusBar.NetworkController: onReceive action:android.net.wifi.RSSI_CHANGED09-24 17:05:24.738 9631-9631/cn.fengfu.zhejiang.fengfupay I/Timeline: Timeline: Activity_idle id: android.os.BinderProxy@1d64a163 time:763105809-24 17:05:24.739 3974-3974/? D/StatusBar.NetworkController: hasService: mServiceState=1 1 home null null null Unknown Unknown CSS not supported -1 -1 RoamInd=-1 DefRoamInd=-1 EmergOnly=true retVal=false09-24 17:05:24.742 3974-3974/? D/StatusBar.NetworkController: refreshViews: Data not connected!! Set no data type icon / Roaming09-24 17:05:24.743 3974-3974/? D/StatusBar.NetworkController: refreshViews connected=&#123; wifi &#125; level=4 combinedSignalIconId=0x7f020364/com.android.systemui:drawable/stat_sys_wifi_signal_3_fully combinedActivityIconId=0x7f02035b mobileLabel=只能拨打紧急呼救电话 wifiLabel=&quot;fengfu2.5G&quot; emergencyOnly=true combinedLabel=&quot;fengfu2.5G&quot; mAirplaneMode=false mDataActivity=0 mPhoneSignalIconId=0x7f02034d/com.android.systemui:drawable/stat_sys_signal_null mQSPhoneSignalIconId=0x7f0200b9/com.android.systemui:drawable/ic_qs_signal_no_signal mDataDirectionIconId=0x0/(null) mDataSignalIconId=0x7f02034d/com.android.systemui:drawable/stat_sys_signal_null mDataTypeIconId=0x0/(null) mQSDataTypeIconId=0x0/(null) mNoSimIconId=0x7f020098/com.android.systemui:drawable/ic_qs_no_sim mWifiIconId=0x7f020364/com.android.systemui:drawable/stat_sys_wifi_signal_3_fully mQSWifiIconId=0x7f0200c8/com.android.systemui:drawable/ic_qs_wifi_full_3 mWifiActivityIconId=0x7f02035b/com.android.systemui:drawable/stat_sys_wifi_inout mBluetoothTetherIconId=0x10806ac/android:drawable/stat_sys_tether_bluetooth09-24 17:05:24.745 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:24.748 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:24.750 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:24.844 792-816/? I/Timeline: Timeline: Activity_windows_visible id: ActivityRecord&#123;3f9bb624 u0 cn.fengfu.zhejiang.fengfupay/.unionpay.CustomInfoActivity t3&#125; time:763116309-24 17:05:24.844 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.852 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:24.859 270-270/? W/SurfaceFlinger: couldn&apos;t log to binary event log: overflow.09-24 17:05:24.860 270-270/? W/SurfaceFlinger: couldn&apos;t log to binary event log: overflow.09-24 17:05:24.867 792-816/? I/WindowManager: change applyWindow to TRUE!09-24 17:05:25.116 3974-3974/? D/StatusBar.NetworkController: hasService: mServiceState=1 1 home null null null Unknown Unknown CSS not supported -1 -1 RoamInd=-1 DefRoamInd=-1 EmergOnly=true retVal=false09-24 17:05:25.118 3974-3974/? D/StatusBar.NetworkController: refreshViews: Data not connected!! Set no data type icon / Roaming09-24 17:05:25.119 3974-3974/? D/StatusBar.NetworkController: refreshViews connected=&#123; wifi &#125; level=4 combinedSignalIconId=0x7f020364/com.android.systemui:drawable/stat_sys_wifi_signal_3_fully combinedActivityIconId=0x7f02035a mobileLabel=只能拨打紧急呼救电话 wifiLabel=&quot;fengfu2.5G&quot; emergencyOnly=true combinedLabel=&quot;fengfu2.5G&quot; mAirplaneMode=false mDataActivity=0 mPhoneSignalIconId=0x7f02034d/com.android.systemui:drawable/stat_sys_signal_null mQSPhoneSignalIconId=0x7f0200b9/com.android.systemui:drawable/ic_qs_signal_no_signal mDataDirectionIconId=0x0/(null) mDataSignalIconId=0x7f02034d/com.android.systemui:drawable/stat_sys_signal_null mDataTypeIconId=0x0/(null) mQSDataTypeIconId=0x0/(null) mNoSimIconId=0x7f020098/com.android.systemui:drawable/ic_qs_no_sim mWifiIconId=0x7f020364/com.android.systemui:drawable/stat_sys_wifi_signal_3_fully mQSWifiIconId=0x7f0200c8/com.android.systemui:drawable/ic_qs_wifi_full_3 mWifiActivityIconId=0x7f02035a/com.android.systemui:drawable/stat_sys_wifi_in mBluetoothTetherIconId=0x10806ac/android:drawable/stat_sys_tether_bluetooth09-24 17:05:25.122 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:25.123 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:25.126 3974-3974/? D/StatusBar.NetworkController: refreshSignalCluster - setMobileDataIndicators: mHasMobileDataFeature = true mPhoneSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mDataSignalIconId = com.android.systemui:drawable/stat_sys_signal_null mMobileActivityIconId = (null) mDataTypeIconId = (null) mNoSimIconId = com.android.systemui:drawable/ic_qs_no_sim09-24 17:05:25.126 3974-3974/? D/StatusBar.NetworkController: changing data overlay icon id to 213083836209-24 17:05:25.261 270-270/? I/SurfaceFlinger: FPS: 2809-24 17:05:25.335 4382-4382/? D/PinEntryService: handleMessage() : to hide dlg.09-24 17:05:25.489 9631-9631/cn.fengfu.zhejiang.fengfupay D/Transaction: transaction finished --------------下载主秘钥------- success-------------------/10 XML 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373&lt;Transaction name=&quot;消费&quot; emv=&quot;SALE&quot; qPBOC=&quot;SALE&quot; settleType=&quot;1&quot; supportEC=&quot;@context/supportEC&quot; supportMixCard=&quot;@context/supportMixCard&quot; supportMobile=&quot;@context/supportMobile&quot; supportPBOCFirst=&quot;@context/supportPBOCFirst&quot; switchFlag=&quot;sale&quot;&gt; &lt;step ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.view.InputBankPayAmtActivity&quot;&gt; &lt;interceptor class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.ImportAmount&quot;&gt;&lt;/interceptor&gt; &lt;result name=&quot;skip&quot; goAhead=&quot;true&quot;&gt;&lt;/result&gt; &lt;/step&gt; &lt;!-- 如果是屏保界面进来的，cardType为磁卡就要先显示卡号再输入金额 --&gt; &lt;!-- &lt;step ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.InputAmountActivity&quot;&gt; &lt;condition value=&quot;@context/cardSearched&quot; notEquals=&quot;磁卡&quot;&gt;&lt;/condition&gt; &lt;interceptor class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.ImportAmount&quot;&gt;&lt;/interceptor&gt; &lt;param name=&quot;hint&quot;&gt;请输入金额&lt;/param&gt; &lt;result name=&quot;skip&quot; goAhead=&quot;true&quot;&gt;&lt;/result&gt; &lt;/step&gt; --&gt; &lt;make value=&quot;@context/cardInputHint&quot;&gt; &lt;condition equals=&quot;true&quot; value=&quot;@context/supportMixCard&quot;&gt;&lt;/condition&gt; &lt;condition notEquals=&quot;true&quot; value=&quot;@app/supportScanPay&quot;&gt;&lt;/condition&gt; &lt;data value=&quot;请插卡或刷卡或挥卡&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;make value=&quot;@context/primIM&quot;&gt; &lt;condition equals=&quot;@null&quot; value=&quot;@context/primIM&quot;&gt;&lt;/condition&gt; &lt;condition notEquals=&quot;true&quot; value=&quot;@app/supportScanPay&quot;&gt;&lt;/condition&gt; &lt;data value=&quot;磁卡|接触|非接&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;make value=&quot;@context/primIM&quot;&gt; &lt;condition equals=&quot;@null&quot; value=&quot;@context/primIM&quot;&gt;&lt;/condition&gt; &lt;condition equals=&quot;true&quot; value=&quot;@app/supportScanPay&quot;&gt;&lt;/condition&gt; &lt;data value=&quot;磁卡|接触|扫码|非接&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;!-- 刷卡 --&gt; &lt;step ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.InputCardActivity&quot;&gt; &lt;!-- 磁卡|接触|非接|手机芯片 --&gt; &lt;param name=&quot;hint&quot; value=&quot;@context/cardInputHint&quot;&gt;&lt;/param&gt; &lt;param name=&quot;cardType&quot; value=&quot;@context/primIM&quot;&gt;&lt;/param&gt; &lt;param name=&quot;cardSearched&quot; value=&quot;@context/cardSearched&quot;&gt;&lt;/param&gt;&lt;!-- 屏保界面可能已经输过卡 --&gt; &lt;!-- 脱机 --&gt; &lt;result name=&quot;AAC&quot; goto=&quot;offline&quot;&gt;&lt;/result&gt; &lt;result name=&quot;TC&quot; goto=&quot;offline&quot;&gt;&lt;/result&gt; &lt;result name=&quot;ARQC&quot; goAhead=&quot;true&quot;&gt;&lt;/result&gt; &lt;/step&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.Comm&quot; method=&quot;preDial&quot; /&gt; &lt;!-- &lt;step ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.InputAmountActivity&quot;&gt; &lt;condition value=&quot;@context/cardSearched&quot; equals=&quot;磁卡&quot;&gt;&lt;/condition&gt; &lt;condition value=&quot;@context/isInEmvProcess&quot; equals=&quot;@null&quot;&gt;&lt;/condition&gt; &lt;param name=&quot;hint&quot;&gt;请输入金额&lt;/param&gt; &lt;/step&gt; --&gt; &lt;make value=&quot;@context/_pan&quot;&gt; &lt;condition notEquals=&quot;96&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/condition&gt; &lt;data value=&quot;@context/pan&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.MakeTransName&quot; method=&quot;makeSaleName&quot; /&gt; &lt;!-- 非EMV流程 --&gt; &lt;!-- 输入PIN --&gt; &lt;step id=&quot;inputPin&quot; ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.InputPinActivity&quot;&gt; &lt;condition notEquals=&quot;07&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/condition&gt; &lt;condition notEquals=&quot;03&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/condition&gt; &lt;condition equals=&quot;@null&quot; value=&quot;@context/isInEmvProcess&quot;&gt;&lt;/condition&gt; &lt;interceptor class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.ReInputPinCheck&quot;&gt;&lt;/interceptor&gt; &lt;param name=&quot;pan&quot; value=&quot;@context/_pan&quot;&gt;&lt;/param&gt; &lt;/step&gt; &lt;step field=&quot;0&quot; value=&quot;0200&quot;&gt;&lt;/step&gt; &lt;step field=&quot;2&quot; value=&quot;@context/pan&quot;&gt; &lt;condition notEquals=&quot;02&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/condition&gt; &lt;/step&gt; &lt;step field=&quot;3&quot; value=&quot;000000&quot;&gt;&lt;/step&gt; &lt;step field=&quot;4&quot; value=&quot;@context/amount&quot;&gt;&lt;/step&gt; &lt;make delay=&quot;true&quot; field=&quot;11&quot;&gt; &lt;data value=&quot;@app/traceNo&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;DEBUG msg=&quot;@context/expiredDate&quot;&gt;&lt;/DEBUG&gt; &lt;step field=&quot;14&quot; value=&quot;@context/expiredDate&quot;&gt;&lt;/step&gt; &lt;make field=&quot;22&quot;&gt; &lt;data value=&quot;@context/im_pan&quot;&gt;&lt;/data&gt; &lt;data value=&quot;@context/im_pin&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;step field=&quot;23&quot; value=&quot;@context/cardSn&quot;&gt;&lt;/step&gt; &lt;step field=&quot;25&quot; value=&quot;00&quot;&gt;&lt;/step&gt; &lt;step field=&quot;26&quot; value=&quot;@app/maxPinLen&quot;&gt; &lt;condition equals=&quot;1&quot; value=&quot;@context/im_pin&quot;&gt;&lt;/condition&gt; &lt;/step&gt; &lt;step field=&quot;35&quot; value=&quot;@context/track2&quot;&gt;&lt;/step&gt; &lt;step field=&quot;36&quot; value=&quot;@context/track3&quot;&gt;&lt;/step&gt; &lt;step field=&quot;41&quot; value=&quot;@app/terminalId&quot;&gt;&lt;/step&gt; &lt;step field=&quot;42&quot; value=&quot;@app/merchantId&quot;&gt;&lt;/step&gt; &lt;step field=&quot;49&quot; value=&quot;156&quot;&gt;&lt;/step&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.MakeField&quot; field=&quot;46&quot; method=&quot;makeField46&quot;&gt; &lt;condition notEquals=&quot;010&quot; value=&quot;@context/in.merchantOrderNo&quot;&gt;&lt;/condition&gt; &lt;/step&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.MakePinData&quot; field=&quot;52&quot; method=&quot;makeField52&quot;&gt; &lt;param name=&quot;pin&quot; value=&quot;@context/pin&quot;&gt;&lt;/param&gt; &lt;/step&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.MakePinData&quot; field=&quot;59&quot; method=&quot;makeField59&quot;&gt; &lt;param name=&quot;pin&quot; value=&quot;@context/pin&quot;&gt;&lt;/param&gt; &lt;param name=&quot;C2BCode&quot; value=&quot;@context/C2BCode&quot;&gt;&lt;/param&gt; &lt;/step&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.MakeField&quot; field=&quot;53&quot; method=&quot;makeField53&quot;&gt; &lt;/step&gt; &lt;make field=&quot;55&quot;&gt; &lt;data value=&quot;@context/icTLV&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;make field=&quot;60&quot;&gt; &lt;condition notEquals=&quot;03&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/condition&gt; &lt;data value=&quot;22&quot;&gt;&lt;/data&gt; &lt;data value=&quot;@app/batchNo&quot;&gt;&lt;/data&gt; &lt;data value=&quot;000&quot;&gt;&lt;/data&gt; &lt;!-- 60.3网络管理 --&gt; &lt;data value=&quot;@app/terminalCap&quot;&gt;&lt;/data&gt; &lt;!-- 60.4终端读取能力 --&gt; &lt;data value=&quot;@context/icCondition&quot;&gt;&lt;/data&gt; &lt;data value=&quot;1&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;make field=&quot;60&quot;&gt; &lt;condition equals=&quot;03&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/condition&gt; &lt;data value=&quot;22&quot;&gt;&lt;/data&gt; &lt;data value=&quot;@app/batchNo&quot;&gt;&lt;/data&gt; &lt;data value=&quot;000&quot;&gt;&lt;/data&gt; &lt;!-- 60.3网络管理 --&gt; &lt;/make&gt; &lt;step field=&quot;64&quot; value=&quot;0000000000000000&quot;&gt;&lt;/step&gt; &lt;make value=&quot;@context/reversal_f55&quot;&gt; &lt;condition equals=&quot;96&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/condition&gt; &lt;data value=&quot;@context/icTLV&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.CheckQPSSignNeed&quot;&gt;&lt;/step&gt; &lt;step animation=&quot;none&quot; ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.CommunicateActivity&quot;&gt;&lt;/step&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.OfflineProcess&quot; id=&quot;offline&quot;&gt; &lt;condition match=&quot;AAC|TC&quot; value=&quot;@context/acResult&quot;&gt;&lt;/condition&gt; &lt;/step&gt; &lt;make value=&quot;balance&quot;&gt; &lt;condition equals=&quot;电子现金消费&quot; value=&quot;@context/offlineName&quot;&gt;&lt;/condition&gt; &lt;data value=&quot;0000000C&quot;&gt;&lt;/data&gt; &lt;data value=&quot;@context/emv.ec_balance&quot;&gt;&lt;/data&gt; &lt;/make&gt; &lt;step animation=&quot;none&quot; ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.ShowBalanceActivity&quot;&gt; &lt;condition notEquals=&quot;success&quot; value=&quot;@context/commStatus&quot;&gt;&lt;/condition&gt; &lt;condition equals=&quot;电子现金消费&quot; value=&quot;@context/offlineName&quot;&gt;&lt;/condition&gt; &lt;condition notEquals=&quot;@null&quot; value=&quot;@context/emv.ec_balance&quot;&gt;&lt;/condition&gt; &lt;param name=&quot;hint&quot; value=&quot;交易成功\\n现金余额为:&quot;&gt;&lt;/param&gt; &lt;param name=&quot;amount&quot; value=&quot;@context/balance&quot;&gt;&lt;/param&gt; &lt;param name=&quot;waitCardOut&quot;&gt;true&lt;/param&gt; &lt;/step&gt; &lt;!-- 部分承兑 --&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.MakePartAcceptInfo&quot;&gt; &lt;condition equals=&quot;@respField/39&quot; value=&quot;10&quot;&gt;&lt;/condition&gt; &lt;/step&gt; &lt;step animation=&quot;none&quot; ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.ConfirmActivity&quot;&gt; &lt;condition equals=&quot;@respField/39&quot; value=&quot;10&quot;&gt;&lt;/condition&gt; &lt;param name=&quot;hint&quot; value=&quot;@context/partAcceptConfirmInfo&quot;&gt;&lt;/param&gt; &lt;param name=&quot;output&quot; value=&quot;isAccept&quot;&gt;&lt;/param&gt; &lt;/step&gt; &lt;step animation=&quot;none&quot; ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.ConfirmActivity&quot;&gt; &lt;condition equals=&quot;YES&quot; value=&quot;@context/isAccept&quot;&gt;&lt;/condition&gt; &lt;param name=&quot;hint&quot; value=&quot;@context/partAcceptInfo&quot;&gt;&lt;/param&gt; &lt;/step&gt; &lt;step ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.SignPanelActivity&quot;&gt; &lt;condition notEquals=&quot;true&quot; value=&quot;@context/isQPSNotNeedSign&quot;&gt;&lt;/condition&gt; &lt;condition notEquals=&quot;TC&quot; value=&quot;@context/icResult&quot;&gt;&lt;/condition&gt; &lt;condition equals=&quot;true&quot; value=&quot;@app/isSupportSignData&quot;&gt;&lt;/condition&gt; &lt;param name=&quot;settleDate&quot;&gt;@respField/15&lt;/param&gt; &lt;param name=&quot;referenceNum&quot;&gt;@respField/37&lt;/param&gt; &lt;result name=&quot;skip&quot; goAhead=&quot;true&quot;&gt;&lt;/result&gt; &lt;/step&gt; &lt;step ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.CustomInputActivity&quot;&gt; &lt;condition notEquals=&quot;TC&quot; value=&quot;@context/icResult&quot;&gt;&lt;/condition&gt; &lt;condition equals=&quot;true&quot; value=&quot;@app/isSupportSignData&quot;&gt;&lt;/condition&gt; &lt;condition equals=&quot;true&quot; value=&quot;@context/needInputPhone&quot;&gt;&lt;/condition&gt; &lt;condition notEquals=&quot;true&quot; value=&quot;@context/isQPSNotNeedSign&quot;&gt;&lt;/condition&gt; &lt;param name=&quot;hint&quot;&gt;请输入手机号&lt;/param&gt; &lt;param name=&quot;hint2&quot;&gt;可按【取消】键跳过&lt;/param&gt; &lt;param name=&quot;inputType&quot; value=&quot;NUM11&quot;&gt;&lt;/param&gt; &lt;param name=&quot;padding&quot; value=&quot;F&quot;&gt;&lt;/param&gt; &lt;param name=&quot;autoPadding&quot; value=&quot;right&quot;&gt;&lt;/param&gt; &lt;param name=&quot;minlen&quot; value=&quot;11&quot;&gt;&lt;/param&gt; &lt;param name=&quot;minlenHint&quot;&gt;请输入11位手机号&lt;/param&gt; &lt;param name=&quot;output&quot; value=&quot;sign_phone&quot;&gt;&lt;/param&gt; &lt;param name=&quot;onCancel&quot; value=&quot;next&quot;&gt;&lt;/param&gt; &lt;/step&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.SaveSignData&quot; method=&quot;saveSignData&quot;&gt; &lt;condition notEquals=&quot;TC&quot; value=&quot;@context/icResult&quot;&gt;&lt;/condition&gt; &lt;condition equals=&quot;true&quot; value=&quot;@app/isSupportSignData&quot;&gt;&lt;/condition&gt; &lt;/step&gt; &lt;step class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.MakeTemplateName&quot; /&gt; &lt;step animation=&quot;none&quot; ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.PrinterActivity&quot;&gt; &lt;param name=&quot;hint&quot;&gt;消费成功&lt;/param&gt; &lt;param name=&quot;template&quot; value=&quot;@context/template&quot;&gt;&lt;/param&gt; &lt;/step&gt; &lt;!-- 部分承兑，取消时自动撤销 --&gt; &lt;step transaction=&quot;消费撤销&quot;&gt; &lt;condition equals=&quot;NO&quot; value=&quot;@context/isAccept&quot;&gt;&lt;/condition&gt; &lt;param name=&quot;oldTrace&quot; value=&quot;@respField/11&quot;&gt;&lt;/param&gt; &lt;result name=&quot;error&quot; end=&quot;error&quot;&gt;&lt;/result&gt; &lt;/step&gt; &lt;step transaction=&quot;上送电子签字和离线交易&quot;&gt; &lt;condition equals=&quot;success&quot; value=&quot;@context/commStatus&quot;&gt;&lt;/condition&gt; &lt;param name=&quot;currentTraceNo&quot; value=&quot;@respField/11&quot;&gt;&lt;/param&gt; &lt;/step&gt; &lt;!-- 冲正数据配置，如果交易出问题，下一笔交易会使用这些数据来冲正 --&gt; &lt;reversal use=&quot;自动冲正&quot;&gt; &lt;data id=&quot;原交易名&quot; value=&quot;@attr/name&quot; /&gt; &lt;data id=&quot;主帐号&quot; value=&quot;@field/2&quot;&gt;&lt;/data&gt; &lt;data id=&quot;处理代码&quot; value=&quot;@field/3&quot;&gt;&lt;/data&gt; &lt;data id=&quot;交易金额&quot; value=&quot;@field/4&quot;&gt;&lt;/data&gt; &lt;data id=&quot;流水号&quot; value=&quot;@field/11&quot;&gt;&lt;/data&gt; &lt;data id=&quot;卡有效期&quot; value=&quot;@field/14&quot;&gt;&lt;/data&gt; &lt;!-- &lt;data id=&quot;卡片序列号&quot; value=&quot;@field/23&quot;&gt;&lt;/data&gt; --&gt; &lt;data id=&quot;POS输入方式&quot; value=&quot;@field/22&quot;&gt;&lt;/data&gt; &lt;data id=&quot;服务点条件码&quot; value=&quot;@field/25&quot;&gt;&lt;/data&gt; &lt;data id=&quot;二磁道内容&quot; value=&quot;@field/35&quot;&gt;&lt;/data&gt; &lt;data id=&quot;授权码&quot; value=&quot;@field/38&quot;&gt;&lt;/data&gt; &lt;!-- &lt;data id=&quot;IC卡数据&quot; value=&quot;@context/reversal_f55&quot;&gt;&lt;/data&gt; --&gt; &lt;data id=&quot;商户号&quot; value=&quot;@field/41&quot;&gt;&lt;/data&gt; &lt;data id=&quot;终端号&quot; value=&quot;@field/42&quot;&gt;&lt;/data&gt; &lt;data id=&quot;货币代码&quot; value=&quot;@field/49&quot;&gt;&lt;/data&gt; &lt;!-- &lt;data id=&quot;59域数据&quot; value=&quot;@field/59&quot;&gt;&lt;/data&gt; --&gt; &lt;data id=&quot;60域数据&quot; value=&quot;@field/60&quot;&gt;&lt;/data&gt; &lt;/reversal&gt; &lt;!-- 交易记录配置 --&gt; &lt;!-- 用于记录脱机交易信息 --&gt; &lt;offlineRecord databaseTable=&quot;transaction_data&quot;&gt; &lt;data id=&quot;trace&quot; value=&quot;@app/traceNo&quot;&gt;&lt;/data&gt; &lt;data id=&quot;name&quot; value=&quot;@context/offlineName&quot;&gt;&lt;/data&gt; &lt;data id=&quot;engName&quot; value=&quot;@context/engName&quot;&gt;&lt;/data&gt; &lt;data id=&quot;status&quot; value=&quot;@context/transStatus&quot;&gt;&lt;/data&gt; &lt;data id=&quot;year&quot; value=&quot;@app/datetime(&apos;yyyy&apos;)&quot; /&gt; &lt;data id=&quot;time&quot; value=&quot;@app/datetime(&apos;HHmmss&apos;)&quot; /&gt; &lt;data id=&quot;date&quot; value=&quot;@app/datetime(&apos;MMdd&apos;)&quot; /&gt; &lt;data id=&quot;send&quot; value=&quot;0&quot;&gt;&lt;/data&gt; &lt;data id=&quot;pan&quot; value=&quot;@context/pan&quot;&gt;&lt;/data&gt; &lt;data id=&quot;procCode&quot; value=&quot;@field/3&quot;&gt;&lt;/data&gt; &lt;data id=&quot;operator&quot; value=&quot;@runtime/operator.username&quot;&gt;&lt;/data&gt; &lt;data id=&quot;amount&quot; value=&quot;@context/amount&quot;&gt;&lt;/data&gt; &lt;data id=&quot;expiredDate&quot; value=&quot;@context/expiredDate&quot;&gt;&lt;/data&gt; &lt;data id=&quot;im_pin&quot; value=&quot;@context/im_pin&quot;&gt;&lt;/data&gt; &lt;data id=&quot;im_pan&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/data&gt; &lt;data id=&quot;cardSn&quot; value=&quot;@context/cardSn&quot;&gt;&lt;/data&gt; &lt;data id=&quot;icResult&quot; value=&quot;@context/icResult&quot;&gt;&lt;/data&gt; &lt;data id=&quot;serviceCode&quot; value=&quot;@context/serviceCode&quot;&gt;&lt;/data&gt; &lt;data id=&quot;track2&quot; value=&quot;@context/track2&quot;&gt;&lt;/data&gt; &lt;data id=&quot;track3&quot; value=&quot;@context/track3&quot;&gt;&lt;/data&gt; &lt;data id=&quot;sign_balance&quot; len=&quot;12&quot; offset=&quot;8&quot; value=&quot;@respField/54&quot;&gt;&lt;/data&gt; &lt;data id=&quot;batch&quot; value=&quot;@app/batchNo&quot;&gt;&lt;/data&gt; &lt;data id=&quot;currency&quot; value=&quot;156&quot;&gt;&lt;/data&gt; &lt;data id=&quot;pin&quot; value=&quot;@context/pin&quot;&gt;&lt;/data&gt; &lt;data id=&quot;maxPinLen&quot; value=&quot;@app/maxPinLen&quot;&gt;&lt;/data&gt; &lt;data id=&quot;field55&quot; value=&quot;@context/resultTLV&quot;&gt;&lt;/data&gt; &lt;data id=&quot;cardType&quot; value=&quot;@context/cardType&quot;&gt;&lt;/data&gt; &lt;data id=&quot;cardId&quot; value=&quot;@context/cardId&quot;&gt;&lt;/data&gt; &lt;data id=&quot;icCondition&quot; value=&quot;@context/icCondition&quot;&gt;&lt;/data&gt; &lt;data id=&quot;settleType&quot; value=&quot;@attr/settleType&quot;&gt;&lt;/data&gt; &lt;!-- 电子现金交易特有数据 --&gt; &lt;data id=&quot;balance&quot; value=&quot;@context/emv.ec_balance&quot; /&gt; &lt;trigger class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.IncTraceTrigger&quot;&gt;&lt;/trigger&gt; &lt;/offlineRecord&gt; &lt;record databaseTable=&quot;transaction_data&quot;&gt; &lt;data id=&quot;trace&quot; value=&quot;@respField/11&quot; /&gt; &lt;data id=&quot;name&quot; value=&quot;@context/transName&quot; /&gt; &lt;data id=&quot;engName&quot; value=&quot;@context/engName&quot; /&gt; &lt;data id=&quot;amount&quot; value=&quot;@respField/4&quot; /&gt; &lt;data id=&quot;pan&quot; value=&quot;@respField/2&quot; /&gt; &lt;data id=&quot;procCode&quot; value=&quot;@field/3&quot;&gt;&lt;/data&gt; &lt;data id=&quot;operator&quot; value=&quot;@runtime/operator.username&quot;&gt;&lt;/data&gt; &lt;data id=&quot;year&quot; value=&quot;@app/datetime(&apos;yyyy&apos;)&quot; /&gt; &lt;data id=&quot;time&quot; value=&quot;@respField/12&quot; /&gt; &lt;data id=&quot;date&quot; value=&quot;@respField/13&quot; /&gt; &lt;data id=&quot;expiredDate&quot; value=&quot;@respField/14&quot;&gt;&lt;/data&gt; &lt;data id=&quot;settleDate&quot; value=&quot;@respField/15&quot;&gt;&lt;/data&gt; &lt;data id=&quot;expiredDateInput&quot; value=&quot;@field/14&quot;&gt;&lt;/data&gt; &lt;data id=&quot;referenceNo&quot; value=&quot;@respField/37&quot; /&gt; &lt;data id=&quot;status&quot; value=&quot;*&quot; /&gt; &lt;data id=&quot;authorizationCode&quot; value=&quot;@respField/38&quot;&gt;&lt;/data&gt; &lt;data id=&quot;issuerMsg&quot; len=&quot;20&quot; offset=&quot;3&quot; value=&quot;@respField/63&quot;&gt;&lt;/data&gt; &lt;data id=&quot;cupMsg&quot; len=&quot;20&quot; offset=&quot;23&quot; value=&quot;@respField/63&quot;&gt;&lt;/data&gt; &lt;data id=&quot;aquMsg&quot; len=&quot;20&quot; offset=&quot;43&quot; value=&quot;@respField/63&quot;&gt;&lt;/data&gt; &lt;data id=&quot;issuerId&quot; len=&quot;11&quot; offset=&quot;0&quot; value=&quot;@respField/44&quot;&gt;&lt;/data&gt; &lt;data id=&quot;acqId&quot; len=&quot;11&quot; offset=&quot;11&quot; value=&quot;@respField/44&quot;&gt;&lt;/data&gt; &lt;data id=&quot;posCenter&quot; value=&quot;@respField/32&quot;&gt;&lt;/data&gt; &lt;data id=&quot;im_pin&quot; value=&quot;@context/im_pin&quot;&gt;&lt;/data&gt; &lt;data id=&quot;im_pan&quot; value=&quot;@context/im_pan&quot;&gt;&lt;/data&gt; &lt;data id=&quot;sign_balance&quot; len=&quot;12&quot; offset=&quot;8&quot; value=&quot;@respField/54&quot;&gt;&lt;/data&gt; &lt;data id=&quot;field55&quot; value=&quot;@context/resultTLV&quot;&gt;&lt;/data&gt; &lt;data id=&quot;cardType&quot; value=&quot;@context/cardType&quot;&gt;&lt;/data&gt; &lt;data id=&quot;cardId&quot; value=&quot;@context/cardId&quot;&gt;&lt;/data&gt; &lt;data id=&quot;icResult&quot; value=&quot;@context/icResult&quot;&gt;&lt;/data&gt; &lt;data id=&quot;settleType&quot; value=&quot;@attr/settleType&quot;&gt;&lt;/data&gt; &lt;data id=&quot;icCondition&quot; value=&quot;@context/icCondition&quot;&gt;&lt;/data&gt; &lt;data id=&quot;batch&quot; value=&quot;@app/batchNo&quot;&gt;&lt;/data&gt; &lt;data id=&quot;currency&quot; value=&quot;@respField/49&quot;&gt;&lt;/data&gt; &lt;data id=&quot;cardSn&quot; value=&quot;@context/cardSn&quot;&gt;&lt;/data&gt; &lt;data id=&quot;balance&quot; len=&quot;12&quot; offset=&quot;8&quot; value=&quot;@respField/54&quot;&gt;&lt;/data&gt; &lt;!-- 是否非接qps业务，重打印判断用 --&gt; &lt;data id=&quot;isQPSTrans&quot; value=&quot;@context/isQPSTrans&quot;&gt;&lt;/data&gt; &lt;!-- 扫码支付 --&gt; &lt;trigger class=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.executable.SavePaymentVoucherTrigger&quot; when=&quot;before&quot;&gt;&lt;/trigger&gt; &lt;data id=&quot;C2BCode&quot; value=&quot;@context/C2BCode&quot;&gt;&lt;/data&gt; &lt;data id=&quot;payCodeNo&quot; value=&quot;@context/payCodeNo&quot;&gt;&lt;/data&gt; &lt;data id=&quot;scanPayStatus&quot; value=&quot;true&quot;&gt;&lt;/data&gt; &lt;!-- 未付金额，电子签字上送报文用 --&gt; &lt;data id=&quot;remark&quot; value=&quot;@context/unPayAmount&quot;&gt;&lt;/data&gt; &lt;data id=&quot;creatDate&quot; value=&quot;@context/creatDate&quot;&gt;&lt;/data&gt; &lt;/record&gt; &lt;!-- 全局设置，目前支持param、result，优先级低于局部设置 --&gt; &lt;global&gt; &lt;param name=&quot;title&quot; value=&quot;@context/title&quot;&gt;&lt;/param&gt; &lt;result name=&quot;dispEmvError&quot; ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.ShowEmvErrorActivity&quot;&gt;&lt;/result&gt; &lt;result name=&quot;error&quot; ui=&quot;cn.fengfu.zhejiang.fengfupay.unionpay.CustomInfoActivity&quot;&gt; &lt;param name=&quot;timeout&quot; value=&quot;0&quot; /&gt; &lt;param name=&quot;info&quot; value=&quot;@context/error&quot;&gt;&lt;/param&gt; &lt;param name=&quot;type&quot; value=&quot;BACK&quot;&gt;&lt;/param&gt; &lt;/result&gt; &lt;result name=&quot;pwd_error&quot; goto=&quot;inputPin&quot;&gt;&lt;/result&gt; &lt;/global&gt;&lt;/Transaction&gt; BaseParser【sax解析】 TransactionParser 解析 Transaction 支付宝刷脸支付 商米demo 十月9 支付宝小程序gitHub项目 支付宝小程序官方demo 支付宝小程序文档 以上看完再基础功能基本可用 10 Hexo 博客 之 添加 https Python的妙用11 微信小程序开发12 Node.js 13 解决Cannot access android.support.v4.app.* 提示 升级部分三方类库版本后，因 support 包版本差异 导致如下问题1cannot access android.support.v4.app.BaseFragmentActivityApi16 将以下代码 添加到受影响的 module build.gradle1234567891011configurations.all &#123; resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt; def requested = details.requested if (requested.group == &apos;com.android.support&apos;) &#123; if (!requested.name.startsWith(&quot;multidex&quot;)) &#123; details.useVersion &apos;27.1.1&aposde 60 00 04 00 00 60 10 00 00 00 00 08 20 70 20 00 00 08 c0 02 15 16 62 14 83 78 73 76 17 9900 00 00 00 00 00 00 00 01 00 00 5639 32 38 38 31 36 35 35 38 37 36 35 31 30 30 30 36 30 35 39 31 31 32 33 33 30 31 37 30 31 31 30 30 30 3601 31 ff 00 1a ba bc d6 dd d3 e0 ba bc c7 f8 c1 bc e4 be d0 c2 c1 aa ba cf b4 f3 be c6 b5 ea ff 01 04 cf fb b7 d1 ff 02 01 01 ff 03 0b 34 38 32 39 30 30 30 30 20 20 20 ff 04 0b 30 33 30 38 30 30 30 30 20 20 20 ff 05 02 28 00 ff 06 07 20 19 10 15 16 20 50 ff 0a 03 31 35 36 ff 20 0a 50 42 4f 43 20 44 45 42 49 54 ff 21 00 ff 22 08 a0 00 00 03 33 01 01 01 ff 23 08 c7 c2 1c fa b9 9d f4 68 ff 70 01 02 00 11 07 00 00 01 80 00 02 50 00 00 01 00 00 00 01 3e 00 00 00 8a 00 00 00 80 7f 00 00 48 0d b1 80 5b 0f 3d 53 70 d2 51 1f 51 3a c4 21 9a d5 a8 b5 cd ad 1c df 00 4c fe f5 ac 87 80 c6 5c 8d 91 e9 03 67 9b 66 ef 90 ec 60 f9 e8 37 6d 26 fe b5 19 10 5a 05 3d 8e f1 eb fe a3 ba 8b 62 5b c6 fa 1f a4 7a c7 05 92 00 e7 ed c2 4e 75 85 7a a3 bc 26 e7 d5 d0 14 60 32 2a 57 f9 e9 fb a3 a5 30 03 6d 6a 8b 1c 33 fc 5d bb b9 dd 2f 12 bd 80 f6 97 84 b9 c8 6a a6 fa a1 c6 15 cd 0d 59 5f 9b d6 ea da 36 8a c2 44 0d 74 77 d6 bd 43 67 35 f9 9d 0b 4d 1a 5a df 54 cf 77 da 57 27 53 92 a8 df 9a 43 19 e1 c1 3b f1 4f 46 91 68 39 aa 56 ff 00 f3 f9 c0 e2 78 49 5e f4 e2 56 39 e1 51 d8 8a e9 e5 0b 62 1a 41 5f e7 e0 7b 1e e1 8a 8e ab bb 62 33 27 77 56 8b 4b e3 54 ed 88 05 5f 6e d5 5f 18 c7 f8 ff 02 ff 02 42 41 46 36 31 30 31 41 16 星期三 房管局send120076600501000060320032130107002020048000C08015000000000061002092313030323536343231313033333031373031333031393031353600110100000100000044354630333632303033323735463033363230303332373546303436313931303136354631353031346E756C6C4542433244343438 10076600501000060320032130107002020048000C08015000000000069002092313030323536343231313033333031373031333031393031353600110100000100000044354630333632303137303935463033363230313730393546303436313931303136354631353031346E756C6C4241453343304634 rev12345678910111213600004000060100002010907102020048002C08015000000000061002092393631303032353634323131303333303137303133303139303135360011 01 000001 000 00044 354630333632303033323735463033363230303332373546303436313931303136354631353031346E756C6C4235344636343936 18 星期五 FDHF12345678 000000018123456789012345678# FDHF12345678 000000018123456789012345678# FDHF12345678 000000018123456789012345678#FDHF12345678 000000018123456789012345678# [FDHF10000000000000000000000000018123456789012345678#][FDHF12345678 000000018123456789012345678#] 23 星期三AndroidStudio 代码报错，但可正常运行4种解决方法 25 星期五 百万级别交易报文星期一 商城前后端 11月 6 星期三 开源社区 Android流式布局（FlowLayout） 刷脸 12 星期二 110330151370410可测试 18 星期一 捷诚POS一.开机界面把丰付POS改为中国银联，图片使用银联logo二.获取ip地址出错时，将服务端的报错信息显示出来。三.小票打印客服电话(下载主密钥时56域C0)，终端型号及程序版本号。四.支付菜单界面顺序调整，1.【消费】 (不需改动)2.【扫码】:现 子菜单的1扫码直接扫码，不需要子菜单。其他的子菜单会调整到其他位置3.实时消费:把8里面的【T+0实时收款】改为 实时消费4.预授权 (不需改动)5.撤销:输入管理员密码正确后 子菜单为 【银行卡撤销】(现 【撤销】改为 银行卡撤销)，【扫码撤销】(现 5 扫码 子菜单3 扫码撤销)6.退货:输入管理员密码正确后 子菜单为 【银行卡退货】(现 【隔日退货】改为 银行卡退货)，【扫码退货】(现 5 扫码 子菜单2 扫码退货)7.交易查询(现 管理-3交易查询 将现 5扫码查询子菜单4 查扫码失败移到交易查询子菜单)8.打印(不需调整)9.管理(将现有的交易查询移到7，其他不变)10.其他(将 【T+0实时收款】改为 实时消费 移到3 其他不变)五.在待机界面 按1 快速进入【消费】，按2快速进入【扫码】按3 快速进入【实时消费】六.扫码交易小票上将32位订单号生成二维码，退货的时候通过扫二维码获取订单号，进行退货。 20 星期三 35 46 31 33 31 325F13 30 星期六 A8 退货功能 条形码改为二维码 12345678960041000000000000000000210703E12810AF0881319 6223093310011912238【2】000000【3】0000000000001【4】000013【11】quot;status&quot;:&quot;00&quot;,&quot;msg&quot;:&quot;success&quot;,&quot;data&quot;:&#123;&quot;transactionid&quot;:&quot;DA7449EDBFC2427A8D240E2C4E350403&quot;,&quot;orderid&quot;:&quot;cb298f756fdd4c4798376ae738cee97f&quot;,&quot;refundorderid&quot;:&quot;&quot;,&quot;revokeorderid&quot;:&quot;&quot;,&quot;completeorderid&quot;:&quot;&quot;,&quot;orderstatus&quot;:&quot;2&quot;,&quot;money&quot;:&quot;0.01&quot;,&quot;paytype&quot;:&quot;1&quot;,&quot;batchno&quot;:&quot;&quot;,&quot;vocherno&quot;:&quot;&quot;,&quot;qraddress&quot;:&quot;&quot;,&quot;terminalsn&quot;:&quot;&quot;,&quot;payinfo&quot;:&quot;&quot;,&quot;tips&quot;:&quot;交易成功&quot;&#125;&#125; 123### 12月退款处理&#123;&quot;data&quot;:&#123;&quot;status&quot;:&quot;00&quot;,&quot;msg&quot;:&quot;success&quot;,&quot;data&quot;:&#123;&quot;transactionid&quot;:&quot;0453B80BA59C4B32B26711B4435BC2E6&quot;,&quot;orderid&quot;:&quot;db063fa34b9c40dd9d201b7bcf0a7944&quot;,&quot;refundorderid&quot;:&quot;&quot;,&quot;revokeorderid&quot;:&quot;&quot;,&quot;completeorderid&quot;:&quot;&quot;,&quot;orderstatus&quot;:&quot;&quot;,&quot;money&quot;:&quot;&quot;,&quot;paytype&quot;:&quot;&quot;,&quot;batchno&quot;:&quot;&quot;,&quot;vocherno&quot;:&quot;&quot;,&quot;qraddress&quot;:&quot;&quot;,&quot;terminalsn&quot;:&quot;&quot;,&quot;payinfo&quot;:&quot;&quot;,&quot;tips&quot;:&quot;退款成功&quot;&#125;&#125;,&quot;headers&quot;:&#123;&quot;cache-control&quot;:&quot;private&quot;,&quot;content-encoding&quot;:&quot;gzip&quot;,&quot;content-type&quot;:&quot;text/html; charset=utf-8&quot;,&quot;date&quot;:&quot;Tue, 10 Dec 2019 02:44:27 GMT&quot;,&quot;param_req_size&quot;:&quot;178&quot;,&quot;param_res_size&quot;:&quot;0&quot;,&quot;param_retry&quot;:&quot;F&quot;,&quot;param_traffic&quot;:&quot;178&quot;,&quot;server&quot;:&quot;Microsoft-IIS/7.5&quot;,&quot;transfer-encoding&quot;:&quot;chunked&quot;,&quot;vary&quot;:&quot;Accept-Encoding&quot;,&quot;x-aspnet-version&quot;:&quot;4.0.30319&quot;,&quot;x-powered-by&quot;:&quot;ASP.NET&quot;&#125;,&quot;status&quot;:200&#125; 电子签名55域123456789101112FF00 1E BABCD6DDCBC4BCBEC7E0B8F6CCE5BBA7D5C5BFA1D1F4B7FECACEC9CCD0D0 杭州四季青个体户张俊阳服饰商行FF01 04 CFFBB7D1FF02 01 01FF03 0B 34 38 323 93 0303030202020FF04 0B 3033313130303030202020FF05 02 2612FF06 07 20191216140530FF0A 03 313536FF30 0A 50424F43204445424954FF22 08 A000000333010101FF23 08 1BFDAF3EF92BB6AEFF70 01 02 107000001800 电子签名62域100000100000000F000000050000000070800031CFF02FF02FF029FEB1F7245D53CFF026746BCD79C3DEBCB69D3247B685D7E0FDCFF0206B4E7D3D84C88EA5831BF762A64957BDBBEDF7731EA0F7B5FB57823B21C8C1F96AFA01C25743BFAABEB01E24EC4E8EBD0FF0214875FD81C5C85A96C3B8BD1916DD3B4C6A54CF95CA8916F5098AA760EC7DD356A3C0972E12EFF0056A5A4858540FF0217A8F6FED71FBBF13E054873F521B486FF008F563504F4B2116EFF02B3F7A5239626FF00FF023BB801DA5A93FF024D7BD50C55FF02FF02 1212-20 18:24:05.491 4942-4942/cn.fengfu.zhejiang.fengfupay D/Linyt: =====PrinterActivity status:012-20 18:24:05.247 31 星期二 蜻蜓调用星POS版本开发完成。 蜻蜓问题:刷脸时有时不能及时获取付款码回调，只有支付宝收银台播报【请等待收银员确认支付结果】之后才接收到付款码，这样体验不好。 ///https://blog.csdn.net/JerryWu145/article/details/86592669","categories":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}],"tags":[{"name":"工作","slug":"工作","permalink":"http://joinyon.top/tags/工作/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}]},{"title":"Java基础知识汇总","slug":"Java基础知识汇总","date":"2019-02-18T01:21:24.000Z","updated":"2020-05-21T03:19:58.817Z","comments":true,"path":"2019/02/18/Java基础知识汇总/","link":"","permalink":"http://joinyon.top/2019/02/18/Java基础知识汇总/","excerpt":"","text":"java基础项目一、Java环境搭建 基础知识 JAVA环境的搭建 Hello World 小程序 二、JAVA基本语法 重点掌握关键字、标识符 了解常量、进制转换 重点掌握变量、数据类型、类型转换。 重点掌握运算符、转义字符 运算符优先级 三、分支语句 JAVA语句有哪些结构 掌握分支结构 掌握if语句的用法 掌握switch语句的用法 四、循环语句 什么是循环语句 掌握for循环 掌握while循环 掌握do-while循环 掌握break语句 掌握continue语句 五、方法的使用 什么是方法 掌握方法的声明 掌握方法的调用 掌握什么是方法重载 了解递归算法 六、面向对象(一) 重点掌握面向对象设计思想 重点掌握类和对象的理解 重点掌握如何创建一个对象 重点掌握JAVA类中的成员变量和方法 重点掌握构造方法 重点掌握类的封装性 七、面向对象(二) 重点掌握内存分析 重点掌握this关键字 重点掌握方法的参数传递 重点掌握static关键字 重点掌握包 画内存分析图 八、面向对象(三) 重点掌握继承 重点掌握super关键字 重点掌握访问权限 重点掌握方法重写 九、面向对象(四) 重点掌握Object类 重点掌握对象转型 重点掌握抽象类和抽象方法 重点掌握final关键字 重点掌握接口 十、面向对象(五) 重点掌握多态 重点掌握内部类 重点掌握单例模式 重点掌握简单工厂模式 掌握内部类的应用场景 了解接口回调的原理 十一、数组 掌握JAVA中数组概念 掌握JAVA 中一维数组的声明和使用 掌握JAVA 中数组的排序：冒泡，插入，选择 掌握JAVA中数组的搜索：顺序，二分搜索法 十二、二维数组和异常机制 掌握JAVA中二维数组的简单使用 掌握JAVA中数组的工具类Arrays，System类 掌握JAVA中的异常机制 掌握JAVA中异常的处理 了解JAVA中自定义异常 十三、常用类 掌握JAVA基本数据类型与其对应的包装类 掌握JAVA字符串类：String,StringBuffer,StringBuilder 了解JAVA中常用的类：Math, Date,Calendar,SimpleDateFormat 了解JAVA中常用类：Random，Runtime，System 了解正则表达式的简单实用 了解什么是枚举 十四、集合类-List 掌握JAVA中集合的概念以及集合框架的介绍 掌握Collection接口的使用 掌握List接口的存储特点 掌握集合中泛型的使用 掌握迭代器Iterator的工作原理以及使用 掌握List接口的常用实现类，ArrayList以及LinkedList的实现方式以及存储特点 了解Vector以及Stack的使用 十五、集合类-Set 掌握Set集合的存储特点 掌握TreeSet的实现原理 掌握Comparable接口的使用 掌握Comparator接口的使用 了解LinkedHashSet实现类 十六、Map集合 了解Map集合的特点 掌握Map集合的常用方法 掌握获取集合对象的几种方式 掌握Map集合的常用类:HashMap和TreeMap 十七、IO流(一) 掌握File类和常用方法 掌握IO流的概念和原理 了解IO流的分类 掌握字节流的常用方法 掌握字符流的常用方法 掌握文件流 十八、IO流(二) 掌握转换流 掌握字节缓存流和字符缓存流 了解标准输入输出流:System.in和System.out 十九、IO流(三) 掌握内存流的使用 了解打印流的使用 掌握对象序列化 了解对象流 掌握RandomAccessFile 了解装饰者模式 二十、总结 画内存图 正则表达式 二十一、多线程-初步 掌握JAVA中进程的概念 掌握JAVA中线程的概念 掌握线程的创建方式 掌握线程的优先级 掌握线程的常用方法 掌握线程的生命周期 掌握线程的停止 二十二、多线程-数据安全 掌握JAVA中多线程间的数据安全 掌握synchronized关键字 掌握同步方法 掌握同步代码块 掌握互斥锁 了解死锁 了解ThreadLocal类 二十三、多线程-生产者消费者模型 掌握生产者消费者模型 掌握线程等待 掌握线程唤醒 了解守护线程 二十四、网络编程-TCP 了解网络的概念 了解网络通信协议 了解TCP/IP协议 了解IP地址和端口号 掌握Socket 掌握ServerSocket 二十五、网络编程-UDP 了解UDP编程 飞秋练习：多客户端聊天，多线程下载 二十六、HTML&amp;SQLite 掌握HTML的表格，表单，列表标签 了解HTML样式的使用：CSS 掌握SQLite数据库 了解create创建表语句 了解alter修改表结构语句 重点掌握SQL增删改查语句 二十七、Servlet&amp;网络访问 了解B/S和C/S结构 Tomcat的作用 掌握Servlet的生命周期 掌握Servlet的应用 掌握URL类和常用方法 掌握HttpURLConnection类获取网络资源 二十八、HttpClient 了解HttpClient类 了解HttpClient与HttpURLConnection的区别 掌握HttpClient的get请求获取资源 掌握HttpClient的post请求获取资源 掌握接口回调在网络下载中的使用 掌握HttpClient接口回调方式下载网络资源 掌握文件上传的客户端实现 二十九、XML解析(SAX&amp;PULL) 了解XML 掌握XML语法定义 掌握SAX解析原理 掌握PULL解析原理 三十、反射机制&amp; JSON解析 了解反射的使用 了解JSON数据格式 了解JSON与XML之间的比较 掌握JSON解析","categories":[],"tags":[],"keywords":[]},{"title":"ISO8583","slug":"ISO8583","date":"2018-12-22T08:17:03.000Z","updated":"2020-01-06T10:53:35.147Z","comments":true,"path":"2018/12/22/ISO8583/","link":"","permalink":"http://joinyon.top/2018/12/22/ISO8583/","excerpt":"","text":"支付小常识银联终端规范8583报文手动组包编码 ISO8583消息可以被编码为ASCII或二进制，ASCII是比较常见的。在这种格式中，消息类型是4个字节长，因为它发送的字符文本，即。 “0200”。消息类型是二进制编码，2个字节长，例如信息类型0200被编码为字节0x02和0x00写入。 ASCII表(常见报文中对应的是字符的ASCII值的HEX形式，方便解析报文) 报文组成:报文头【长度（2字节）+TPDU（5字节）+报文版本号（2字节）】+信息类型+位图+数据 报文长度：整体报文长度 -报文头中的2字节长度。如8583整体报文长度为100，那么报文长度为98.用两字节的BCD码表示（16进制）为0062。 报文中容易出错的在于银联规范中的各种数据格式，定长、变长、ASCII变长、以及TLV格式等。在组包或者解包前，仔细看规范是十分重要的。 报文 是十六进制1234567891011121314151617012F //报文长度 303个字节长度 6005010000 //APP_TPDU603200321301 //Hearder0200 //信息类型7024068020C08A33 //位图16 6214835892690379 //LV 长度-值 主账号earder02007024068020C08A3319623078010001342312500000000000000000010000502612072000010037 6230780100013423125D261222029618000010313030303630343931313233333031373031313030303631353606000000000000000153 9F26 08FD1E09B83B3EA9519F27 01809F101307010103A00000040A0100000000004E22819F9F3704D26D85649F36020902950500000000009A031908199C01009F02060000000000015F2A02015682027C009F1A0201569F03060000000000009F3303E0F1C89F3501229F1E0830383230303230318408A0000003330101019F4104303030309F631030333131303030300000000000000000004041323033353031303032303430323031303038323030323031313930353030383332303030312020001422 000001 000 60000033031204544454144443742 12 报文头 TPDU TPDU决定了终端与系统之间的网络协议. TPDU是一个10位的数字, 实际传输的报文, 有些用ASCII表示这10位数字, 有些用BCD表示 1260000400000144600501 信息类型 这个是信息类型(MTI), 是一个四位的数字, 这里为”0200”, 传输时用BCD表示即为”02h,00h”(如果用ASCII呢？看看上面的内容). 这个四位数字，每一位都有它的意义, 10200 位图(bitmap) 指示哪些域存在 1234&lt;70 24 06 80 20 C0 8A 33&gt; 16进制01110000001001000000011010000000001000001100000010001010001100110111000000100100000001101000000000100000110000001000101000110011 有数据的域: 12345678910111213141516171819h 长度 2 主账号 N..19 最大19位BCD编码左对齐 6230780100013423125 ？3 交易处理码 N6 BCD 文档标注6个0 0000004 交易金额 N12 BCD 00000000001 单位分 ？11 流水号 N6 BCD 00005014 卡有效期 N4 BCD YYMM 261222 服务点输入方式码 N3 BCD 07223 卡序列号 N3 BCD 00025 服务点条件码 N2 BCD 0035 2磁道数据 z37 BCD 6214835892690379D2607220149390048665641 受卡机终端标识码 ans8 ASCII 31 30 30 30 36 30 34 39 -&gt;10006049(终端代码)42 受卡方标识码 ans15 ASCII 31 31 32 33 33 30 31 37 30 31 31 30 30 30 36 -&gt;112330170110006(商户号)49 交易货币代码 an3 ASCII 313536 -&gt;156 (人民币)53 安全控制信息 N16 BCD 060000000000000055 IC 卡数据域 最大255字节数据 5960 22 000001 000 63 自定义域 ans…003 ASCII 60 00 00 64 MAC b64 BINARY what? 160001000000100008000080000000000000430 扫码交易 send 12 扫码交易 rec 160000400006010000201090210303806800AC0813700000000000000000100008223324208200320000100313030303030303030303336434431303030363034393131323333303137303131303030363135360004B3C9B9A600634132303335303130303230343032303130303832303032303131393035303038333230303031202041333031383133343632373432393931353133343436320011900000010000003935463132303332353833384634323546443430343041423844443934413035323037324432453700034355504438304537304439 解析 123456786000040000601000020109 //0210 //30 38 06 80 0A C0 81 37&lt;0011000000111000000001101000000000001010110000001000000100110111&gt;00000000000000000100008223324208200320000100313030303030303030303336434431303030363034393131323333303137303131303030363135360004B3C9B9A600634132303335303130303230343032303130303832303032303131393035303038333230303031202041333031383133343632373432393931353133343436320011900000010000003935463132303332353833384634323546443430343041423844443934413035323037324432453700034355504438304537304439 扫码撤销 send 100E4600501000060320032130102003020048008C0803D000000000000000001000084032000313030303030303030303336313030303630343931313233333031373031313030303631353600374134303332353833384634323546443430343041423844443934413035323037324432453700119200000100000012000001000082008935463033363233333430353546303230355758504159354630343631393038323035463132303332353833384634323546443430343041423844443934413035323037324432453735463135303134303832303233333234324246314539444442 扫码撤销 rec 160000400006010000201090210303804800AC0813F0000000000000000010000842334100820032000313030303030303030303336303031303030363034393131323333303137303131303030363135360008BDD3CAD5B3C9B9A600374134303332353833384634323546443430343041423844443934413035323037324432453700119200000100000012000001000082003935463132303332423245383732414244333230343141414135324338413830323031394242374500034355503937384230413039 扫码退货12345678910111213A8600003000060320032000202203020048008C0803B200000000000000001000991032000303030303030303030303030313030323731353931313033333031353831323032383631353600374134303332303834343130353365646666343863343934306461323736363761313233373000112500000300000016000000000000105300033030304530314432364330 123456789101112131415161718192021222324A92000AB600501000060320032130102203020048000C0801D000000【3】000000000001【4】000221【11】032【22】00【25】03130303237343038 【41】313130333330313538313230323836【42】313536【49】001193000001000【60】0011是位数 93固定 000001 批次号 000 填充缺省值000000120000000000000083354630333631343531323635463033363134353132363546303436313931313239354631323033323537433141433330364339333434443841434335353830314235F035343935304538354631353031346E756C6C4341373844323541 12345A8退货上送报文扫码消费123A92000D7600501000060320032130102003020068000C080370000000000000000010002200320000100313030323734303831313033333031353831323032383631353600634132303335303130303230343032303130303832303032303132323035303038333230303031202041333031383133343639393334313139323830303139300011900000010000006335463031303138313334363939333431313932383030313930354630333631343439303535463032303557585041593546303436313931313239354332303100033031203734433032434142 房管局查询1234567891011121314150066600501000060320032130107002020048000C08015【3】000000【11】000122【22】0020【25】92【41】3130303030323335【42】313132333330313730313130303036【49】313536【60】【62】【64】00080100002500304644484631313134363837392020202020202020202020203230323030313243324241413337 解析报文 1234567891011121314A8 &lt;application&gt;丰付收银&lt;/application&gt; &lt;area&gt;全国&lt;/area&gt; &lt;field id=&quot;0&quot; value=&quot;0700&quot;/&gt; &lt;field id=&quot;3&quot; value=&quot;000000&quot;/&gt; &lt;field id=&quot;11&quot; value=&quot;000247&quot;/&gt; &lt;field id=&quot;22&quot; value=&quot;2&quot;/&gt; &lt;field id=&quot;25&quot; value=&quot;92&quot;/&gt; &lt;field id=&quot;41&quot; value=&quot;10029158&quot;/&gt; &lt;field id=&quot;42&quot; value=&quot;110330170130202&quot;/&gt; &lt;field id=&quot;49&quot; value=&quot;156&quot;/&gt; &lt;field id=&quot;60&quot; value=&quot;2200000100061&quot;/&gt; &lt;field id=&quot;62&quot; value=&quot;FD123456 202001&quot;/&gt; &lt;field id=&quot;64&quot; value=&quot;0000000000000000&quot;/&gt; 123456789101112136000030000603200300040 07002020048000C0801500000000026801209231303032393135383131303333303137303133303230323135360013 22 00 00 01 0006100016FD0F20123456000000000000002020013045314438354439 12345678910111200666005010000603200321301 07002020048000C0801500000000022900209231303032363638363131303333303137303133303230323135360008 01 000001 0030 46 44 48 46 31 32 33 34 35 36 20202020202020202020202020203230323030313339463045393443 F D H F","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"知识点","slug":"知识点","permalink":"http://joinyon.top/tags/知识点/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"AppBarLayout+CollapsingToolBarLayout+Tablayout+ViewPager使用遇到的问题及解决方案","slug":"AppBarLayout-CollapsingToolBarLayout-Tablayout-ViewPager使用遇到的问题及解决方案","date":"2018-11-18T02:27:37.000Z","updated":"2018-11-20T09:51:19.084Z","comments":true,"path":"2018/11/18/AppBarLayout-CollapsingToolBarLayout-Tablayout-ViewPager使用遇到的问题及解决方案/","link":"","permalink":"http://joinyon.top/2018/11/18/AppBarLayout-CollapsingToolBarLayout-Tablayout-ViewPager使用遇到的问题及解决方案/","excerpt":"","text":"###","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"基础","slug":"基础","permalink":"http://joinyon.top/tags/基础/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"Android项目打包过程","slug":"Android项目打包过程","date":"2018-11-15T01:08:34.000Z","updated":"2018-11-15T01:08:34.806Z","comments":true,"path":"2018/11/15/Android项目打包过程/","link":"","permalink":"http://joinyon.top/2018/11/15/Android项目打包过程/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"SVN使用","slug":"SVN使用","date":"2018-10-15T09:03:01.000Z","updated":"2018-10-16T09:00:12.541Z","comments":true,"path":"2018/10/15/SVN使用/","link":"","permalink":"http://joinyon.top/2018/10/15/SVN使用/","excerpt":"","text":"前言最近做项目是要和同事协作开发的，于是想到使用svn平时都是一个人开发，使用git,由于项目是托管在svn服务器的，所以了解了一下，拉代码一气呵成，当提及时糟糕了各种冲突，解决不了，只好使用最笨的方式，拷贝代码，于是乎，我想一定要学会使用svn 查看电脑有没有装svn要使用svn必须先安装,mac平台下检测方法：打开终端,输入如下命令:1svn -version 如果已经安装了svn，那么终端控制台会出现如下所示:12svn: invalid option character: eType &apos;svn help&apos; for usage. 如果没有安装,则显示:1command not found 使用 可以使用客户端 可以使用命令 貌似习惯于命令 多多学习，多多益善 AS使用svn添加忽略文件一般要忽略的文件如下： .idea文件夹 .gradle文件夹 所有的build文件夹 所有的.iml文件 local.properties文件 注意 当文件夹已经被添加到svn版本控制仓库中时，添加忽略是无效的解决办法:使用svn清除文件夹的添加状态 实践 码云SVN支持 使用SVN将代码托管到码云 SVN常用命令","categories":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}],"tags":[{"name":"svn","slug":"svn","permalink":"http://joinyon.top/tags/svn/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}]},{"title":"Android 屏幕适配浅谈","slug":"Android-屏幕适配浅谈","date":"2018-10-08T09:39:12.000Z","updated":"2018-10-08T09:40:24.719Z","comments":true,"path":"2018/10/08/Android-屏幕适配浅谈/","link":"","permalink":"http://joinyon.top/2018/10/08/Android-屏幕适配浅谈/","excerpt":"","text":"","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"差缺补漏","slug":"差缺补漏","permalink":"http://joinyon.top/tags/差缺补漏/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"Android百度推送遇到的坑","slug":"Android百度推送遇到的坑","date":"2018-09-17T14:53:29.000Z","updated":"2018-09-21T03:20:02.074Z","comments":true,"path":"2018/09/17/Android百度推送遇到的坑/","link":"","permalink":"http://joinyon.top/2018/09/17/Android百度推送遇到的坑/","excerpt":"","text":"集成流程：参考这里 问题：在控制台发送通知，透传消息都能接收的到，但是服务器推送的收不到，why？","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"AndroidStudio 多渠道打包","slug":"AndroidStudio-多渠道打包","date":"2018-09-14T09:39:24.000Z","updated":"2018-09-14T09:44:36.258Z","comments":true,"path":"2018/09/14/AndroidStudio-多渠道打包/","link":"","permalink":"http://joinyon.top/2018/09/14/AndroidStudio-多渠道打包/","excerpt":"","text":"多渠道打包一般应用于向不同的应用市场提交app后用来统计不同渠道下载量等一些信息的。 一般集成友盟的sdk,不同的SDK集成方式大同小异。看看原文","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"知识点","slug":"知识点","permalink":"http://joinyon.top/tags/知识点/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"使用云信实现聊天功能","slug":"使用云信实现聊天功能","date":"2018-09-10T06:57:11.000Z","updated":"2018-09-26T02:01:50.971Z","comments":true,"path":"2018/09/10/使用云信实现聊天功能/","link":"","permalink":"http://joinyon.top/2018/09/10/使用云信实现聊天功能/","excerpt":"","text":"查看 逻辑结构：12345678910111213141516171819202122232425262728MainActivity |- HomeFragment |-&gt;MainTab(导航栏) |-SessionListFragment |-RecentContactsFragment |-NimUIKit |-P2PMessageActivity |-Toolbar |-Title(聊天对象名称) |-SubTitle（聊天对象在线状态: 电脑、手机-wifi、移动网络） |-Observer&lt;CustomNotification&gt;: 命令消息接收观察者 |-ContactChangedObserver: UIKit 与 app 好友关系变化监听接口 |-UserInfoObserver: |-OnlineStateChangeObserver:在线状态观察者 |-MessageFragment |-InputPanel:底部文本编辑，语音等模块 |- |- |-TeamMessageActivity |-TeamMessageFragment |-ContactListFragment |-FuncItem:功能区 |-ContactsFragment:通讯录Fragment |-ChatRoomListFragment 相关类继承结构123456789101112131415161718192021222324252627282930313233343536373839UI 相关:View |-SwitchButton:仿iphone 开关按钮 |-LetterIndexView:字母索引选择的ViewImageView |-CircleImageView |-HeadImageViewActivity:AppCompatActivity |-UI(Abs) |-BaseMessageActivity(Abs) |-P2PMessageActivity |-TeamMessageActivityFragment:Fragment |—TFragment |-ChatRoomListFragment（直播间列表） |-TabFragment(Abs) |-ChatRoomTabFragment(Abs) |-MainTabFragment(Abs) |-ChatRoomListFragment(聊天室主TAB页) |-ContactListFragment(集成通讯录列表) |-SessionListFragment(会话列表) |-AckMsgTabFragment(Abs) |-MasterFragment（聊天室主播） |-OnlinePeopleFragment（在线人数） |-RecentContactsFragment(最近联系人列表) |-MessageFragment(聊天界面基类) 源码解析 监听对方输入状态的功能 当输入内容发生变化时显示吐司：对方正在输入中。 监听Ait输入，当输入内容有@符号时显示要Ait的群成员对象。 AitManager 该类实现了TextWatcher 接口","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"百度语音合成集成","slug":"百度语音合成集成","date":"2018-09-05T02:28:24.000Z","updated":"2018-09-05T06:11:14.942Z","comments":true,"path":"2018/09/05/百度语音合成集成/","link":"","permalink":"http://joinyon.top/2018/09/05/百度语音合成集成/","excerpt":"","text":"集成准备1 在百度语音的控制台创建一个应用，输入应用的名称、包名等信息。2 进入应用会看到SDK下，选择离在线融合SDK。3 下载解压时一个安卓示例项目，运行打开可以查看逻辑代码。4 将app-lib下的jar包拷贝到自己的项目的app-lib下，然后鼠标右键添加到自己项目的库中。5 将app-src-main下的jniLibs整个文件夹拷贝到自己项目的对应位置，如果自己的项目有了该文件夹，就将jniLibs文件夹下各个文件夹中so库分别复制到对应的文件夹。6 将app-src下的assets文件拷贝到自己项目对应位置，如果自己的项目有了该文件夹，就将assets文件夹下所有文件拷贝到对应文件夹。7 将app-src下的control、listener、util文件夹拷贝到项目中，MainHandlerConstant.Java文件拷贝到项目中。 AndroidMainfest.xml123456789//添加以下权限 &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;/&gt; 官方文档Demo示例","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"安卓富文本编辑器开发实践","slug":"安卓富文本编辑器开发实践","date":"2018-08-07T07:31:59.000Z","updated":"2018-09-05T06:11:29.202Z","comments":true,"path":"2018/08/07/安卓富文本编辑器开发实践/","link":"","permalink":"http://joinyon.top/2018/08/07/安卓富文本编辑器开发实践/","excerpt":"","text":"项目结构： assets文件夹下 ZSSRichTextEditor.js文件 editor.css文件 android-editor.html文件（编辑器界面） editor-android.css editor-utils.js editor-utils-formatter.js example example-content.html(示例文件这里可以写一些HTML展示出来) 图片文件（演示加载本地图片） fonts(字体文件资源，改变字体) libs（js类库,可以抽空看边查边看） svg（矢量图) Android目录(经本人整理过) activity EditorExampleActivity MyEditActivity editor JsCallbackReceiver inter EditorMediaUploadListener OnImeBackListener OnJsEditorStateChangedListener legacy EditLinkActivity WPEditImageSpan utils HtmlStyleUtils MyFontColor Utils view EditorFragment EditorFragmentAbstract ImageSettingDialogFragment LegacyEditorFragment MyEditorFragment widget EditorWebView EditorWebViewAbstract EditorWebViewCompatibility HtmlStyleTextWatcher LinkDialogFragment RippleToggleButton SourceViewEditText 项目说明本项目是基于WordPressEditor开发的，目的是用于公司项目中的需求，公司项目需要富文本编辑器，支持图文混排，并生成相应的HTML代码，以便展示在网络中，同时需要支持IOS和安卓编辑，故找到此项目，感谢项目的开发者。 功能 支持HTML代码查看与效果实时预览。 支持链接功能 图片、视频等文件上传及查看 引用功能 有序无序列表 字体粗细、斜体。 下划线，中穿线，上角标、小角标等（可扩展，调用ZSSRichTextEditor.js的方法） 字体大小 对齐方式 颜色（可跟自己需求定义） 还有更多功能待发现 源码解析分析EditorWebViewAbstract支持js回调的webView 点击这里了解更多","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"Mac快捷键使用技巧","slug":"Mac快捷键使用技巧","date":"2018-07-06T09:52:36.000Z","updated":"2018-10-17T10:21:41.332Z","comments":true,"path":"2018/07/06/Mac快捷键使用技巧/","link":"","permalink":"http://joinyon.top/2018/07/06/Mac快捷键使用技巧/","excerpt":"","text":"快捷键 查看隐藏文件: shift+command+. 终端命令 返回用户主目录 1echo $HOME 打开文件 1open *** 显示当前目录的路径名 1pwd 进入用户主目录 1cd 或者 cd~ 返回上级目录 1cd .. 返回上两级目录 1cd ../.. mac下adb通常在第一次使用Android SDK中的adb无法使用，有以下提示：1bash: android: command not found 原因：未配置Android的环境变量，so需要为mac中的Android SDK配置环境变量。注意：以下操作可以在Mac自带的终端Terminal，也可以在Android Studio中操作 启动终端 进入当前用户的home目录，在命令行输入： 1echo $HOME 创建.bash_profile文件(如果有则不用重新创建了直接进行下一步，查看的方法是显示隐藏文件)执行命令: 1touch .bash_profile 打开 .bash_profile文件： 1open -e .bash_profile 执行后会自动弹出.bash_profile文件的编辑窗口。如果配置过其他的环境变量应该有内容的，比如我的： export M2_HOME=/Users/zhangjunyang/tools/maven/apache-maven-3.5.0 export PATH=$PATH:$M2_HOME/bin export MYSQL_HOME=/usr/local/mysql export PATH=$PATH:$MYSQL_HOME/bin 在.bash_profile 文件中输入： export PATH=/Users/您的用户名/文件路径/platform-tools/:$PATH注意 如果需要添加多个路径到PATH下时，需要用“:”(英文的冒号)隔开。因为android和adb这些命令是在不同的文件夹中的，格式是：PATH=${PATH}:路径1:路径2、另外，如果指定多个路径，结尾就不用写:$PATH了。例如：export PATH=${PATH}:/Users/zhangjunyang/Library/Android/sdk/platform-tools:/Users/zhangjunyang/Library/Android/sdk/tools","categories":[{"name":"工具","slug":"工具","permalink":"http://joinyon.top/categories/工具/"}],"tags":[{"name":"小技巧","slug":"小技巧","permalink":"http://joinyon.top/tags/小技巧/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://joinyon.top/categories/工具/"}]},{"title":"MVP+Dagger2架构+RxJava+Retrofit+OkHttp框架方式一","slug":"MVP-Dagger2架构-RxJava-Retrofit-OkHttp框架方式一","date":"2018-06-29T03:04:38.000Z","updated":"2018-06-29T06:24:00.394Z","comments":true,"path":"2018/06/29/MVP-Dagger2架构-RxJava-Retrofit-OkHttp框架方式一/","link":"","permalink":"http://joinyon.top/2018/06/29/MVP-Dagger2架构-RxJava-Retrofit-OkHttp框架方式一/","excerpt":"","text":"MVP架构介绍目前，Android APP开发最火的架构是MVP，便于产品的更新迭代，为更好理解MVP架构，现对开发中使用的MVP进行总结： Model 对外提供业务数据API 内部实现本地数据，网络数据的存取的等 只有Presenter可以访问，与View隔离 Presenter 持有View对象，对View进行操作 持有Model层提供数据接口对象，可通过依赖注入解耦此部分 从数据接口对象中获取数据并处理，更新View View UI层，包含所有UI相关组件 持有对应的Presenter的对象，可通过依赖注入解耦此部分 由Presenter来负责更新UI 项目结构图如下所示","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"AndroidStudio快捷键及使用技巧","slug":"“AndroidStudio快捷键及使用技巧”","date":"2018-06-27T02:24:30.000Z","updated":"2018-12-13T15:04:24.868Z","comments":true,"path":"2018/06/27/“AndroidStudio快捷键及使用技巧”/","link":"","permalink":"http://joinyon.top/2018/06/27/“AndroidStudio快捷键及使用技巧”/","excerpt":"","text":"自动导包，自动删除没有调用的包：打开AndroidStudio界面之后：依次点击 File –&gt; setting –&gt; Editor –&gt; General –&gt;Auto import 当前类/方法被引用的位置查找： 先光标定位到方法或者类 右键选择Find Usages（快捷键 mac:fn+option+F7 win:ctrl+g） 全局搜索 Edit-&gt;find-&gt;find in path 快捷键 shift+command+Fd 查找一个文件的引用fn+option+F7","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"小技巧","slug":"小技巧","permalink":"http://joinyon.top/tags/小技巧/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"学习导航123","slug":"学习导航123","date":"2018-06-23T10:05:05.000Z","updated":"2019-07-09T03:31:42.323Z","comments":true,"path":"2018/06/23/学习导航123/","link":"","permalink":"http://joinyon.top/2018/06/23/学习导航123/","excerpt":"","text":"一个很好的源码解析网站极客导航","categories":[],"tags":[],"keywords":[]},{"title":"区块链开源项目介绍","slug":"区块链开源项目介绍","date":"2018-06-21T11:25:03.000Z","updated":"2018-06-22T06:43:26.373Z","comments":true,"path":"2018/06/21/区块链开源项目介绍/","link":"","permalink":"http://joinyon.top/2018/06/21/区块链开源项目介绍/","excerpt":"","text":"ContentBox组织GitHub BLK.IOgitHub Java版的web3jweb3jweb3j文档","categories":[{"name":"区块链","slug":"区块链","permalink":"http://joinyon.top/categories/区块链/"}],"tags":[{"name":"区块链技术","slug":"区块链技术","permalink":"http://joinyon.top/tags/区块链技术/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://joinyon.top/categories/区块链/"}]},{"title":"通知总结","slug":"通知总结","date":"2018-06-20T07:46:52.000Z","updated":"2018-06-28T01:29:26.483Z","comments":true,"path":"2018/06/20/通知总结/","link":"","permalink":"http://joinyon.top/2018/06/20/通知总结/","excerpt":"","text":"通知原文 通知系统使得用户得知应用中重要的事情，例如有新信息到来或者日历事件提醒。将通知作为一个新的通道，提醒用户重要的事情或者记录下用户没有注意到的事情。 通知的作用 显示接收到的短消息、即时消息等信息（短信、微信、微博） 显示客户端推送的重要消息（如广告、订阅推荐、新版本发布等） 显示正在进行的程序（如：电影下载进度、音乐播放器、后台运行的程序等） 使用步骤 获取NotificationManager 实例管理通知； 实例Notification 对象； 关联事件Intent； 发送通知； 通知的分类常见的通知有很多，这里以具体实例学习巩固通知的使用过程。 1. 普通通知 获取NotificationManager实例：Notification对通知进行管理，调用Context的getSystemService()方法获取。 1NotificationManager manager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE); 实例Notification对象： 1Notification notification=new Notification.Builder(Context).build(); 此时只是创建了一个空的Notification对象，并没有实际的作用，可以在build()方法之前使用连缀任意多的方法设置Notification对象。如下是进行一些基本的设置1234567Notification notification=new NotificationCompat.Builder(Context).setContentText(\"通知内容\").setContentTitle(\"通知标题\").setSmallIcon(R.mipmap.ic_luncher).setLageIcon(BitmapFactory.decodeResource(getResources(),R.drawable.ic_luncher)).setWen(System.currentTimeMillis()).build(); 以上设置了五个方法： setSmallIcon()用于设置通知的小图标，只能使用纯alpha图层的图片进行设置，小图标会显示在系统状态栏上。（alpha图层的图片可以找UI要）setLargeIcon()设置通知的大图标，当拉下通知后显示的图标。setWhen()指定通知被创建的时间，以毫秒为单位。 关联事件Intent 如果没有关联Intent也是可以的，只是点击的时候没有任何效果，如果在用户点击到时候会跳转到我们指定的页面，那么需要添加一个Intent，此时会用到 PendingIntent ,PendingIntent的获取可以根据需求选择 getActivity(),getBroadcast(),getService()等静态方法 12345Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(\"http://joinyon.top\"));PendingInent pendingIntent=PendingIntent.getActivity(this,0,intent,0);Notification notification=new NotificationCompat.Builder(this).setContentIntent(pendingIntent).build(); 调用 setContentIntent()方法，传入PendingIntent实例即可，当点击时会打开浏览器进入我的个人博客主页。我们可以继续完善Notification 12345678Notification notification=new NotificationCompat.Builder(this)....setAutoCancel(true);点击通知头自动取消 .setSound(Uri.parse(\"android.resource://\" + getPackageName() + \"/\" + R.raw.iphone_ringtone))// 声音 //.setLights()// LED //.setVibrate()// 震动 //.setDefaults(NotificationCompat.DEFAULT_ALL)//设置铃声及震动效果 .build(); 注意： 控制手机震动需要加入以下权限1&lt;user-permission android:name=\"android.permission.VIBRATE\"/&gt; 2. 悬挂式通知使用步骤和普通一样，不同的是在调用 .build()之前设置.setFullScreenIntent()方法12345678NotificationCompat.Builder builder=new Notification.Builder(this);Notification notification=builder.setSmallIcon(m.mipmap.ic_launcher_round).setPriority(Notification.PRIORITY_DEFAULT)// 通知的优先级.setCategory(Notification.CATEGORY_MESSAGE)// 通知的类型.setContentTitle(\"悬挂式通知\").setAutoCancel(true)....build(); NOTICEsetPriority()方法共有5个等级： PRIORITY_MIN -最低级别(-2); PRIORITY_LOW -较低级别(-1); PRIORITY_DEFAULT -默认级别(0); PRIORITY_HIGH -较高级别(1); PRIORITY_MAX -最高级别(2); 当发出此类型的通知时，通知会以悬挂的方式显示在屏幕上。 3. 折叠式通知折叠式通知需要借助RemoteViews来实现1234567891011121314151617181920212223242526// 第一步 获取NotificationManager实例 NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://joinyon.top/\")); PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0); //设置未下拉的样式R.layout.collapsed RemoteViews collapsed = new RemoteViews(getPackageName(), R.layout.collapsed); collapsed.setTextViewText(R.id.collapsed_text, \"关闭状态\"); //设置下拉后的样式TR.layout.show RemoteViews show = new RemoteViews(getPackageName(), R.layout.show); // 第二步 实例Notification对象 NotificationCompat.Builder builder = new NotificationCompat.Builder(this, \"0\"); Notification notification = builder.setAutoCancel(true) .setSmallIcon(R.mipmap.ic_launcher_round) .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher)) .setContentIntent(pendingIntent) .setContentText(\"JoinYon's Blog\") //第三步 .setCustomContentView(collapsed) .setCustomBigContentView(show) .setDefaults(NotificationCompat.DEFAULT_ALL)//设置铃声及震动效果 .build(); //第四步 发送通知 notificationManager.notify(0, notification); 4. 锁屏通知Android 5.0(API level21)开始，通知可以显示在锁屏上，通过设置选择是否允许敏感的通知内容显示在安全的锁屏上。1234//通过设置setVisibility()方法设置即可....setVisibility(VISIBILITY_PUBLIC).build(); setVisibility()方法共有三个选值： VISIBILITY_PRIVATE:显示基本信息，如通知的图标，但隐藏通知的全部内容 VISIBILITY_PUBLIC:显示通知的全部内容 VISIBILITY_SECRET:不显示任何内容，包括图标。 未完待续。。。","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"差缺补漏","slug":"差缺补漏","permalink":"http://joinyon.top/tags/差缺补漏/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"Android图片长按保存实践","slug":"Android图片长按保存实践","date":"2018-06-14T03:37:18.000Z","updated":"2019-11-25T03:41:07.645Z","comments":true,"path":"2018/06/14/Android图片长按保存实践/","link":"","permalink":"http://joinyon.top/2018/06/14/Android图片长按保存实践/","excerpt":"","text":"","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"git常用命令","slug":"git常用命令","date":"2018-06-11T09:03:01.000Z","updated":"2020-01-20T07:09:30.992Z","comments":true,"path":"2018/06/11/git常用命令/","link":"","permalink":"http://joinyon.top/2018/06/11/git常用命令/","excerpt":"","text":"1. 使用git向远程仓库提交代码添加完SSH key成功之后，我们就有权限向GitHub上我们自己的项目提交代码了，接下来介绍一下提交代码的两种方法： 方法一：clone远程仓库 在GitHub上创建一个项目如：AndroidGuide 并添加README.md文件。 终端cd到某文件夹下，执行一下命令: 1git clone git@github.com:MrRobotter/AndroidGuide.git 这样就把AndroidGuide项目 clone 到了本地，我们可以把 clone 命令理解为高级点的复制,这个时候该项目本身就是一个git仓库了，不需要再执行 git init 进行初始，而且甚至已经关联好了远程仓库，我们只需要在AndroidGuide目录下任意修改或者添加文件，然后进行commit 之后可以执行：1git push origin master 进行代码提交。 方法二：关联本地已有项目如果我们在本地完成了一个完整的项目test1 这样方法一就不适合了。 在GitHub上建一个test项目， 在终端上cd到项目所在文件夹 接下来执行以下命令： 123git init //初始化版本库git add .//添加文件到版本库（只是添加到了缓存区）, `.` 代表添加文件夹下所有文件git commit -m &quot;提交说明&quot; //把添加的文件提交到版本库，并填写提交备注。 到这一步我们完成了代码库的初始化，但代码仅仅是本地，没有提交到服务器，如果要提交到远程的test则进行一下步骤： 123git remote add origin git@github.com:MrRobotter/test.git //把本地仓库与远程仓库关联git push -u origin master //第一次推送时git push origin master //之后提交 注意在GitHub上创建test一般会选择创建README.md文件，这时候直接使用git push -u origin master会出现以下提示： ! [rejected] master -&gt; master (non-fast-forward) error: failed to push some refs to &#39;git@github.com:MrRobotter/AndroidGuide.git’ hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: ‘git pull …’) before pushing again. hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details. 什么意思呢？是说你远程仓库中有文件没有下载下来。那明白了于是执行命令:1git pull origin master 这时候又出差了： fatal: refusing to merge unrelated histories WTF 怎么回事？查了资料才知道git在2.9.2版本里 认为他们是两个不同的项目，要把两个不同的项目合并需要使用命令：1git pull origin master --allow-unrelated-histories 这样就可以pull成功了。接下来，依次执行1234git add ** //你刚刚拉下来的新文件git commit -m &quot;合并&quot;git push -u origin master //第一次推送时git push origin master //之后提交 这样就解决了。 2. git命令删除远程分支先查看 远程分支1git branch -r 使用以下命令删除远程分支：123git branch -r -d origin/branch-namegit push origin :branch-name 3. git命令删除本地分支1git branch -d develop(replace your branch-name) Android Studio 中.gitignore配置 问题描述 在使用Git进行代码管理过程中，我们会发现后来添加的.gitignore文件，或者中途修改了.gitignore文件后，.gitignore文件并没有生效，需要清除.track缓存和强制.track来解决问题。如果我们在第一次提交的时候，忘记添加.gitignore文件或者在首次添加了.gitignore文件之后，又对文件进行了修改，你会发现这两种情况下，.gitignore文件是不生效的。 原因 git 没有清理cache重点内容 解决方案123git rm -r --cached .git add .git commit -m &quot;commit message&quot; git通过命令更换远程仓库地址具体场景是这样的我们的项目存储在码云的远程服务器上，我们通过git对项目进行操作和同时开发。突然有一天我们老大通知我们git的远程仓库地址需要变换一下！ 方法一 ： 通过命令直接修改远程仓库地址 123git remote 查看所有远程仓库git remote xxx 查看指定远程仓库地址git remote set-url origin 你新的远程仓库地址 方法二:先删除再添加你的远程仓库 12git remote rm origingit remote add origin 你的新远程仓库地址 直接修改你本地的.git文件 123这里需要注意的问题是需要进入你的项目目录中例如：你的项目名为test，那么你就进入test文件夹。**.git文件是隐藏文件你需要显示隐藏文件才能看见** 进入.git文件编辑.git文件中的config文件修改config文件中的url路径为你的新远程仓库地址路径。更多请参考git","categories":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}],"tags":[{"name":"git","slug":"git","permalink":"http://joinyon.top/tags/git/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}]},{"title":"AndroidStudio常见编译错误及解决方案","slug":"AndroidStudio常见编译错误及解决方案","date":"2018-06-11T07:54:27.000Z","updated":"2018-09-05T06:05:44.769Z","comments":true,"path":"2018/06/11/AndroidStudio常见编译错误及解决方案/","link":"","permalink":"http://joinyon.top/2018/06/11/AndroidStudio常见编译错误及解决方案/","excerpt":"","text":"问题简介平时运行AndroidStudio编译器，会发生如下错误： Error:Execution failed for task &apos;:app:preDebugAndroidTestBuild&apos;. &gt; Conflict with dependency &apos;com.android.support:support-annotations&apos; in project &apos;:app&apos;. Resolved versions for app (26.1.0) and test app (27.1.1) differ. See https://d.android.com/r/tools/test-apk-dependency-conflicts.html for details. 发生这类问题的原因是：当我们修改了.build 中的 compileSdkVersion，产生所依赖的dependency与当前版本不一样导致的。 解决build-&gt;Rebuild Project","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"Exception","slug":"Exception","permalink":"http://joinyon.top/tags/Exception/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"比特币简介","slug":"比特币简介","date":"2018-06-11T02:29:54.000Z","updated":"2018-06-11T07:08:46.228Z","comments":true,"path":"2018/06/11/比特币简介/","link":"","permalink":"http://joinyon.top/2018/06/11/比特币简介/","excerpt":"","text":"什么是比特币?","categories":[{"name":"区块链","slug":"区块链","permalink":"http://joinyon.top/categories/区块链/"}],"tags":[{"name":"比特币","slug":"比特币","permalink":"http://joinyon.top/tags/比特币/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://joinyon.top/categories/区块链/"}]},{"title":"GradleForAndroid","slug":"GradleForAndroid","date":"2018-06-11T01:23:47.000Z","updated":"2018-06-11T02:08:14.807Z","comments":true,"path":"2018/06/11/GradleForAndroid/","link":"","permalink":"http://joinyon.top/2018/06/11/GradleForAndroid/","excerpt":"","text":"Gradle for Android 读完本文我可以了解到： Android应用的构建过程 注意点 Android早期的构建工具 Ant Maven Android构建神器：Gradle Gradle的关键概念及构建生命周期 Gradle的两个关键概念：项目和任务 Gradle构建生命周期 Gradle Wrapper 总结 鸣谢 Android应用的构建过程Android应用的构建过程十分复杂，如图所示： 主要有以下几个步骤： 主要的资源文件（layout，values等）都被 aapt 编译，并且在一个R文件中引用 Java代码被Java编译器编译成JVM字节码(.class文件) JVM字节码再被dex工具转换成dalvik字节码（.dex文件） 然后这些.dex文件、编译过的资源文件和其他资源文件（比如图片）会被打包成一个apk apk文件在安装前会被debug/release的key文件签名 安装到设备 注意点 上面步骤中第一步是主要的资源文件，有些特别的资源文件就不会被编译，比如assets目录下的文件，raw目录下的文件以及图片，都不会被编译。只不过raw下的文件会在R文件里生成id 如果对apk正式签名，还需要使用zipalign工具对apk进行对齐操作，这样做的好处是当应用运行时会减少内存的开销 通过上面的了解，Android的构建过程十分复杂，如果每一步都要人工手动去完成的话，是费时费力的，效率太低，于是有了各种各样的构建工具。 Android早期的构建工具在Gradle之前被广泛使用的是Apache Ant和 Maven。 AntAnt 发布于2000年，很快成为Java项目最流行的构建工具。 Ant的优点： 简单、易学，不需要什么特殊的准备就能上手 基于过程式编程思想使得构建非常灵活 后来还能支持插件。 不足之处: 使用XML作为脚本配置格式，除非是很小的项目，否则它的XML文件就很快大得无法管理。MavenMaven 发布于2004年，目前是解决使用Ant所带来的一些问题。 Maven也是使用XML作为构建配置的文件格式，不过文件结构却有了巨大的变化： Ant 需要开发者将执行task所需的全部命令都列出来 Maven 依靠约定并提供现成可调用的目标 不仅如此， Maven 更重要的一个进步是具备从网络上自动下载依赖的能力（后来Ant通过lvy也具备了这个功能），这革命性地改变了我们开发软件的方式。Maven的缺点： 依赖管理不能很好地处理相同库文件不同版本之间的冲突（lvyz在这方面更好一些） XML作为配置文件的格式有严格的结构层次和标准，定制化目标很困难 Maven 主要解决了依赖管理的问题，然而使用XML的错误使他重蹈覆辙，实际上Maven很难写出复杂、定制化的构建脚本，在大型项目中，他经常什么“特别的事儿”还没干就有几百行代码，甚至不如Ant。 前辈们在反省前面两种构建工具的错误之后，提出了DSL（Domain Special Language，领域专用语言）的概念，目标是设计一套能够解决特定领域问题的语言。在构建方面，DSL的一个成功案例就是Gradle。 Android构建神器 Gradle 2012发布的Gradle深刻吸取前面几位前辈的经验和教训，集大家之所成，做了很多的改进。 Gradle有约定优于配置的原则，即为设置和属性提供默认值，这使得他比Ant或者Maven更容易上手。 Gradle构建脚本不再使用XML，而是使用Groovy的DSL进行书写（Groovy是一种基于Java虚拟机的动态语言，因此Android开发者看着会很熟悉），从而使得构建脚本比用Ant和Maven写的更清晰、简洁，下面是实现同样目标的Maven代码和Gradle代码对比: Gradle 既有Ant的强大和灵活性，又有Maven的依赖管理，支持插件且易于使用。因此一推出就获得广泛关注，2013年被Google选为Android Studio的默认构建工具。 Gradle设计的方式使他可以很容易地扩展构建和插入到现有的构建过程中，Google推广Gradle金额Android Studio时，目标是让代码复用、构建variant、配置和定制构建过程变得更加简单。 有人可能担心是否需要专门去学习新语言Groovy，《Gradle for Android》书中专门提到： Groovy代码非常易读，如果你学习过Java，那么学习Groovy的曲线不会陡峭 如果你想构建自己的任务和插件，那么对Groovy有更深次的理解尤为重要 不过因为Groovy是基于Java虚拟机的，所以你完全可以用Java或者其他基于Java虚拟机的语言来编写你的自定义插件。 Gradle的关键概念及构建生命周期Gradle的两个关键概念 项目和任务 项目每个build.gradle脚本构建文件代表一个项目project 任务task构建在脚本里： 每次构建至少包括一个项目，没干嘛项目里又至少包括一个任务。 Gradle构建生命周期一个Gradle构建通常包括下面三个阶段： 初始化 项目实例会在这时被创建，如果这个项目里有多个module，或者依赖多个library，并且他们都有对应的build.gradle文件，就会创建过个项目实例。 配置 在这个阶段构建脚本被执行，并且为每个项目实例创建和配置任务。 执行 在这个阶段Gradle将根据构建脚本配置决定哪些任务会被执行。 不同的任务之间可能有相互依赖，因此在配置阶段Gradle会产生依赖关系图，没有依赖的任务通常会被优先执行，然后一个接一个执行其他任务。一旦一个任务被执行过，就不会被再次执行。 Gradle WrapperGradle在不断的发展，有可能存在新版本不兼容旧版本的情况，于是官网为我们提供了 Gradle Wrapper，就是为了兼容和适配不同版本，确保构建是可重复的。 普通的Gradle脚步命令是： 1gradle ... 而Gradle Wrapper命令只是在gradle 后加个w：1gradlew ... 在Mac下略有不同：1./gradlew ... 开发者或者自动构建系统可以通过使用wapper来运行gradle命令，由它来搞定兼容等问题，因此我们甚至都不需要安装gradle，直接使用gradle wapper即可，就像Android Studio里推荐的一样： 上图所示并没有使用wrapper，是因为当运行gradlew命令时，gradle wrapper 会自动下载所需要但是你没有的gradle版本并使用。 这在多人协作时，很可能因为别人修改了gradle版本，上传到git，然后导致你运行命令时需要下载半天。 不过官方还是推荐使用wrapper，毕竟这样更稳定。 使用 gradle wrapper以后，gradle wrapper 会为每个项目下载一个gradle压缩包，路径在\\User\\yourname.gradle\\wrapper\\dists里： 总结Android Studio 占领市场后，构建工具Gradle的地位无人能敌，我们有必要学习、使用它来为我们创造价值。 摘抄这篇文章能初步了解Gradle的发展过程，它有什么优点，为什么会被广泛使用，有助于后续深入学习Gradle。 鸣谢本文转载自拭心 想了解更多参考： Java Build Tools: Ant vs Maven vs Gradle Why Build Your Java Projects with Gradle Rather than Ant or Maven? Android构建过程简述","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"知识点","slug":"知识点","permalink":"http://joinyon.top/tags/知识点/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"推广链PC上线百度招财猫，免费挖矿","slug":"推广链PC上线百度招财猫，免费挖矿","date":"2018-06-08T07:11:18.000Z","updated":"2018-06-08T07:18:33.470Z","comments":true,"path":"2018/06/08/推广链PC上线百度招财猫，免费挖矿/","link":"","permalink":"http://joinyon.top/2018/06/08/推广链PC上线百度招财猫，免费挖矿/","excerpt":"","text":"","categories":[{"name":"资讯","slug":"资讯","permalink":"http://joinyon.top/categories/资讯/"}],"tags":[{"name":"挖矿","slug":"挖矿","permalink":"http://joinyon.top/tags/挖矿/"}],"keywords":[{"name":"资讯","slug":"资讯","permalink":"http://joinyon.top/categories/资讯/"}]},{"title":"Android基础知识复习(持续更新)","slug":"Android基础知识复习","date":"2018-06-07T12:16:43.000Z","updated":"2019-02-22T06:30:34.283Z","comments":true,"path":"2018/06/07/Android基础知识复习/","link":"","permalink":"http://joinyon.top/2018/06/07/Android基础知识复习/","excerpt":"","text":"Part 1ActivityANR问题 ANR排错一般有三种类型 KeyDispatchTimeout(5 seconds) –主要是类型按键或者触摸事件在特定时间内无响应。 BaroadcastTimeout(10 seconds) –BroadcastReceiver在特定时间内无法处理完成。 ServiceTimeout(20 seconds) –小概率事件Service在特定的时间内无法处理完成。 哪些操作会导致ANR 在主线程执行以下操作： 高耗时的操作，如图像变换 磁盘读写操作，数据库读写操作 大量的创建新对象 如何避免？ UI线程尽量只做跟UI相关的工作 耗时的操作（比如数据库操作，I/O，连接网络或者别的有可能阻塞UI线程的操作）把它放在单独的线程处理 尽量用Handler来处理UIThread和别的Thread之间的交互 解决逻辑 使用AsyncTask 在doInbackground()方法中执行耗时操作 在onPostExecuted()更新UI 使用Handler实现异步任务 在子线程中处理耗时操作 处理完成之后，通过handler.sendMessage()传递处理结果 在handler的handleMessage()方法中更新UI 或者使用handler.post()方法将消息放到Looper中 如何排查 首先分析log 从stace.txt文件查看调用stack，adb pull data/anr/trace.txt./mytraces.txt 看代码 仔细查看ANR的成因（I/O wait? block? memoryleak?） 监测ANR的Watchdog最近出来一个叫LeakCanary的工具 FC(Force Close)什么时候会出现 Error OOM,内存溢出 StackOverFlowError Runtime，比如说空指针异常 解决的办法 注意内存的使用和管理 使用Thread.UncaughtExceptionHandler接口 Android关于OOM的解决方案 OOM 内存溢出(Out Of Memory) 也就是内存占有量超过了VM所分配的最大 出现OOM的原因 加载对象过大 相应的资源过多，来不及释放 如何解决 在内存引用上做些处理，常用的有软引用、强化引用、弱引用 在内存中加载图片时直接在内存中做处理，如边界压缩 动态回收内存 优化Dalvik虚拟机的堆内存分配 自定义堆内存大小 禁止跟随屏幕旋转在清单文件中的Activity添加一下代码：1android:screenOrientation=&quot;portrait&quot; Fragment 的用法及分类 DialogFragment 替代Dialog的解决方案 与JS交互","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"差缺补漏","slug":"差缺补漏","permalink":"http://joinyon.top/tags/差缺补漏/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"何为Github Pages?","slug":"何为Github-Pages","date":"2018-06-06T09:02:35.000Z","updated":"2018-06-08T07:06:39.849Z","comments":true,"path":"2018/06/06/何为Github-Pages/","link":"","permalink":"http://joinyon.top/2018/06/06/何为Github-Pages/","excerpt":"","text":"本人在创建自己的Github Pages过程中遇到了种种麻烦，作为一个前端小白，遇到一个小问题要Google上半天，还不一定能一下解决，所以在初步搭建好自己的个人博客主页时，已经迫不及待的要记录下这次搭建的过程。由于本人英文水平不是很高，所以看起英文文档比较吃力，现在我要把自己好不容易读懂的文档翻译过来，方便下次查阅。 GitHub Pages是什么？ GitHub Pages使用指南 使用界限 GitHub Pages是什么？GitHub Pages是一个静态网站托管服务，它可以直接从你的GitHub仓库管理个人、组织或者项目的主页。 我们可以利用Jekyll Theme Chooser在线创建和发布GitHub Pages，如果你更喜欢离线去做，你可以使用GitHub Desktop或者command line来完成。 GitHub Pages是一个静态的站点寄存服务，它不支持服务端的代码，比如：PHP,Ruby,或者Python。 想了解更多不同类型的 GitHub Pages ，请参考用户，组织和项目主页 `警告:` GitHub Pages站点在互联网上是可以被公开的，尽管它的仓库是私有的，如果您有敏感的数据在你的页面仓库，您最好先删 除掉之后再进行发布。 GitHub Pages使用指南> Github Pages站点在2016年6月15日之后使用域名github.io通过HTTPS服务。如果你的站点是在2016年6月15日之前创建的，那么你可以使用支持HTTPS协议保持你的站点可访问。 > Github Pages站点不应该记录敏感信息，比如发送密码或者信用卡账号等内容。 > 当您使用 GitHub Pages 必须服从GitHub服务条款,以及严禁转让该权利。 使用界限Github Pages站点受以下几点使用限制： 使用command line添加一个已经存在的项目到GitHub用户,组织和项目主页","categories":[{"name":"工具","slug":"工具","permalink":"http://joinyon.top/categories/工具/"}],"tags":[{"name":"文档翻译","slug":"文档翻译","permalink":"http://joinyon.top/tags/文档翻译/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://joinyon.top/categories/工具/"}]},{"title":"我的第一篇blog","slug":"我的第一篇blog","date":"2018-06-06T08:36:02.000Z","updated":"2019-11-06T02:43:06.857Z","comments":true,"path":"2018/06/06/我的第一篇blog/","link":"","permalink":"http://joinyon.top/2018/06/06/我的第一篇blog/","excerpt":"","text":"为什么要写博客？","categories":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://joinyon.top/tags/随笔/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-06T03:46:08.436Z","updated":"2018-06-08T07:25:32.050Z","comments":true,"path":"2018/06/06/hello-world/","link":"","permalink":"http://joinyon.top/2018/06/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://joinyon.top/tags/随笔/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}]}]}