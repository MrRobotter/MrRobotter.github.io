{"meta":{"title":"JoinYon's Blog","subtitle":"一个会思考的机器人","description":null,"author":"JoinYon","url":"http://joinyon.top"},"pages":[{"title":"关于我","date":"2018-06-07T06:09:01.000Z","updated":"2018-06-07T07:12:33.265Z","comments":true,"path":"about/index.html","permalink":"http://joinyon.top/about/index.html","excerpt":"","text":"码农一枚，现居杭州。 座右铭 你是这个世界上独一无二的。 存在的就是合理的。 还没有第三条，等着我去发现。 交友宣言喜欢以茶会友，交朋友是拓展自己见闻的有效途径。 联系方式 关注我 新浪微博 GitHub coding.net 兴趣爱好我只是一个会coding的程序猿，我还有一些特殊爱好： 读书（微信读书，欢迎和我互相关注，点赞哦！） 写作（文笔不好，七八九流的，自我娱乐） 炒币（山寨币，虚拟币，梦想还是有的，说不定哪天财富自由了，偷笑。。。） 游泳（没有正规训练过，释放心情的好去处） 吃货（没有什么比美食诱人了）"},{"title":"categories","date":"2018-06-07T05:46:07.000Z","updated":"2018-06-07T05:47:48.514Z","comments":true,"path":"categories/index.html","permalink":"http://joinyon.top/categories/index.html","excerpt":"","text":""},{"title":"工具","date":"2018-06-08T06:34:46.000Z","updated":"2018-06-08T06:36:23.319Z","comments":true,"path":"resources/index.html","permalink":"http://joinyon.top/resources/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-06-07T05:41:48.000Z","updated":"2018-06-07T05:43:57.562Z","comments":true,"path":"tags/index.html","permalink":"http://joinyon.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Android百度推送遇到的坑","slug":"Android百度推送遇到的坑","date":"2018-09-17T14:53:29.000Z","updated":"2018-09-21T03:20:02.074Z","comments":true,"path":"2018/09/17/Android百度推送遇到的坑/","link":"","permalink":"http://joinyon.top/2018/09/17/Android百度推送遇到的坑/","excerpt":"","text":"集成流程：参考这里 问题：在控制台发送通知，透传消息都能接收的到，但是服务器推送的收不到，why？","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"AndroidStudio 多渠道打包","slug":"AndroidStudio-多渠道打包","date":"2018-09-14T09:39:24.000Z","updated":"2018-09-14T09:44:36.258Z","comments":true,"path":"2018/09/14/AndroidStudio-多渠道打包/","link":"","permalink":"http://joinyon.top/2018/09/14/AndroidStudio-多渠道打包/","excerpt":"","text":"多渠道打包一般应用于向不同的应用市场提交app后用来统计不同渠道下载量等一些信息的。 一般集成友盟的sdk,不同的SDK集成方式大同小异。看看原文","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"知识点","slug":"知识点","permalink":"http://joinyon.top/tags/知识点/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"使用云信实现聊天功能","slug":"使用云信实现聊天功能","date":"2018-09-10T06:57:11.000Z","updated":"2018-09-25T05:10:31.836Z","comments":true,"path":"2018/09/10/使用云信实现聊天功能/","link":"","permalink":"http://joinyon.top/2018/09/10/使用云信实现聊天功能/","excerpt":"","text":"查看 逻辑结构：12345678910111213MainActivity |- HomeFragment |-&gt;MainTab(导航栏) |-SessionListFragment |-RecentContactsFragment |-NimUIKit |-P2PMessageActivity |-MessageFragment |-TeamMessageActivity |-ContactListFragment |-ChatRoomListFragment 相关类继承结构1234567891011121314151617181920212223242526272829UI 相关:Activity:AppCompatActivity |-UI(Abs) |-BaseMessageActivity(Abs) |-P2PMessageActivity |-TeamMessageActivityFragment:Fragment |—TFragment |-ChatRoomListFragment（直播间列表） |-TabFragment(Abs) |-ChatRoomTabFragment(Abs) |-MainTabFragment(Abs) |-ChatRoomListFragment(聊天室主TAB页) |-ContactListFragment(集成通讯录列表) |-SessionListFragment(会话列表) |-AckMsgTabFragment(Abs) |-MasterFragment（聊天室主播） |-OnlinePeopleFragment（在线人数） |-RecentContactsFragment(最近联系人列表) |-MessageFragment(聊天界面基类) 源码解析 监听对方输入状态的功能 当输入内容发生变化时显示吐司：对方正在输入中。","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"百度语音合成集成","slug":"百度语音合成集成","date":"2018-09-05T02:28:24.000Z","updated":"2018-09-05T06:11:14.942Z","comments":true,"path":"2018/09/05/百度语音合成集成/","link":"","permalink":"http://joinyon.top/2018/09/05/百度语音合成集成/","excerpt":"","text":"集成准备1 在百度语音的控制台创建一个应用，输入应用的名称、包名等信息。2 进入应用会看到SDK下，选择离在线融合SDK。3 下载解压时一个安卓示例项目，运行打开可以查看逻辑代码。4 将app-lib下的jar包拷贝到自己的项目的app-lib下，然后鼠标右键添加到自己项目的库中。5 将app-src-main下的jniLibs整个文件夹拷贝到自己项目的对应位置，如果自己的项目有了该文件夹，就将jniLibs文件夹下各个文件夹中so库分别复制到对应的文件夹。6 将app-src下的assets文件拷贝到自己项目对应位置，如果自己的项目有了该文件夹，就将assets文件夹下所有文件拷贝到对应文件夹。7 将app-src下的control、listener、util文件夹拷贝到项目中，MainHandlerConstant.Java文件拷贝到项目中。 AndroidMainfest.xml123456789//添加以下权限 &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;/&gt; 官方文档Demo示例","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"安卓富文本编辑器开发实践","slug":"安卓富文本编辑器开发实践","date":"2018-08-07T07:31:59.000Z","updated":"2018-09-05T06:11:29.202Z","comments":true,"path":"2018/08/07/安卓富文本编辑器开发实践/","link":"","permalink":"http://joinyon.top/2018/08/07/安卓富文本编辑器开发实践/","excerpt":"","text":"项目结构： assets文件夹下 ZSSRichTextEditor.js文件 editor.css文件 android-editor.html文件（编辑器界面） editor-android.css editor-utils.js editor-utils-formatter.js example example-content.html(示例文件这里可以写一些HTML展示出来) 图片文件（演示加载本地图片） fonts(字体文件资源，改变字体) libs（js类库,可以抽空看边查边看） svg（矢量图) Android目录(经本人整理过) activity EditorExampleActivity MyEditActivity editor JsCallbackReceiver inter EditorMediaUploadListener OnImeBackListener OnJsEditorStateChangedListener legacy EditLinkActivity WPEditImageSpan utils HtmlStyleUtils MyFontColor Utils view EditorFragment EditorFragmentAbstract ImageSettingDialogFragment LegacyEditorFragment MyEditorFragment widget EditorWebView EditorWebViewAbstract EditorWebViewCompatibility HtmlStyleTextWatcher LinkDialogFragment RippleToggleButton SourceViewEditText 项目说明本项目是基于WordPressEditor开发的，目的是用于公司项目中的需求，公司项目需要富文本编辑器，支持图文混排，并生成相应的HTML代码，以便展示在网络中，同时需要支持IOS和安卓编辑，故找到此项目，感谢项目的开发者。 功能 支持HTML代码查看与效果实时预览。 支持链接功能 图片、视频等文件上传及查看 引用功能 有序无序列表 字体粗细、斜体。 下划线，中穿线，上角标、小角标等（可扩展，调用ZSSRichTextEditor.js的方法） 字体大小 对齐方式 颜色（可跟自己需求定义） 还有更多功能待发现 源码解析分析EditorWebViewAbstract支持js回调的webView 点击这里了解更多","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"Mac快捷键使用技巧","slug":"Mac快捷键使用技巧","date":"2018-07-06T09:52:36.000Z","updated":"2018-09-05T06:02:31.712Z","comments":true,"path":"2018/07/06/Mac快捷键使用技巧/","link":"","permalink":"http://joinyon.top/2018/07/06/Mac快捷键使用技巧/","excerpt":"","text":"查看隐藏文件 shift+command+.","categories":[{"name":"工具","slug":"工具","permalink":"http://joinyon.top/categories/工具/"}],"tags":[{"name":"小技巧","slug":"小技巧","permalink":"http://joinyon.top/tags/小技巧/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://joinyon.top/categories/工具/"}]},{"title":"MVP+Dagger2架构+RxJava+Retrofit+OkHttp框架方式一","slug":"MVP-Dagger2架构-RxJava-Retrofit-OkHttp框架方式一","date":"2018-06-29T03:04:38.000Z","updated":"2018-06-29T06:24:00.394Z","comments":true,"path":"2018/06/29/MVP-Dagger2架构-RxJava-Retrofit-OkHttp框架方式一/","link":"","permalink":"http://joinyon.top/2018/06/29/MVP-Dagger2架构-RxJava-Retrofit-OkHttp框架方式一/","excerpt":"","text":"MVP架构介绍目前，Android APP开发最火的架构是MVP，便于产品的更新迭代，为更好理解MVP架构，现对开发中使用的MVP进行总结： Model 对外提供业务数据API 内部实现本地数据，网络数据的存取的等 只有Presenter可以访问，与View隔离 Presenter 持有View对象，对View进行操作 持有Model层提供数据接口对象，可通过依赖注入解耦此部分 从数据接口对象中获取数据并处理，更新View View UI层，包含所有UI相关组件 持有对应的Presenter的对象，可通过依赖注入解耦此部分 由Presenter来负责更新UI 项目结构图如下所示","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://joinyon.top/tags/框架/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"AndroidStudio快捷键及使用技巧","slug":"“AndroidStudio快捷键及使用技巧”","date":"2018-06-27T02:24:30.000Z","updated":"2018-09-05T06:07:00.748Z","comments":true,"path":"2018/06/27/“AndroidStudio快捷键及使用技巧”/","link":"","permalink":"http://joinyon.top/2018/06/27/“AndroidStudio快捷键及使用技巧”/","excerpt":"","text":"自动导包，自动删除没有调用的包：打开AndroidStudio界面之后：依次点击 File –&gt; setting –&gt; Editor –&gt; General –&gt;Auto import 当前类/方法被引用的位置查找： 先光标定位到方法或者类 右键选择Find Usages（快捷键 mac:fn+option+F7 win:ctrl+g）","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"小技巧","slug":"小技巧","permalink":"http://joinyon.top/tags/小技巧/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"学习导航123","slug":"学习导航123","date":"2018-06-23T10:05:05.000Z","updated":"2018-06-23T10:07:13.953Z","comments":true,"path":"2018/06/23/学习导航123/","link":"","permalink":"http://joinyon.top/2018/06/23/学习导航123/","excerpt":"","text":"一个很好的源码解析网站","categories":[],"tags":[],"keywords":[]},{"title":"区块链开源项目介绍","slug":"区块链开源项目介绍","date":"2018-06-21T11:25:03.000Z","updated":"2018-06-22T06:43:26.373Z","comments":true,"path":"2018/06/21/区块链开源项目介绍/","link":"","permalink":"http://joinyon.top/2018/06/21/区块链开源项目介绍/","excerpt":"","text":"ContentBox组织GitHub BLK.IOgitHub Java版的web3jweb3jweb3j文档","categories":[{"name":"区块链","slug":"区块链","permalink":"http://joinyon.top/categories/区块链/"}],"tags":[{"name":"区块链技术","slug":"区块链技术","permalink":"http://joinyon.top/tags/区块链技术/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://joinyon.top/categories/区块链/"}]},{"title":"通知总结","slug":"通知总结","date":"2018-06-20T07:46:52.000Z","updated":"2018-06-28T01:29:26.483Z","comments":true,"path":"2018/06/20/通知总结/","link":"","permalink":"http://joinyon.top/2018/06/20/通知总结/","excerpt":"","text":"通知原文 通知系统使得用户得知应用中重要的事情，例如有新信息到来或者日历事件提醒。将通知作为一个新的通道，提醒用户重要的事情或者记录下用户没有注意到的事情。 通知的作用 显示接收到的短消息、即时消息等信息（短信、微信、微博） 显示客户端推送的重要消息（如广告、订阅推荐、新版本发布等） 显示正在进行的程序（如：电影下载进度、音乐播放器、后台运行的程序等） 使用步骤 获取NotificationManager 实例管理通知； 实例Notification 对象； 关联事件Intent； 发送通知； 通知的分类常见的通知有很多，这里以具体实例学习巩固通知的使用过程。 1. 普通通知 获取NotificationManager实例：Notification对通知进行管理，调用Context的getSystemService()方法获取。 1NotificationManager manager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE); 实例Notification对象： 1Notification notification=new Notification.Builder(Context).build(); 此时只是创建了一个空的Notification对象，并没有实际的作用，可以在build()方法之前使用连缀任意多的方法设置Notification对象。如下是进行一些基本的设置1234567Notification notification=new NotificationCompat.Builder(Context).setContentText(\"通知内容\").setContentTitle(\"通知标题\").setSmallIcon(R.mipmap.ic_luncher).setLageIcon(BitmapFactory.decodeResource(getResources(),R.drawable.ic_luncher)).setWen(System.currentTimeMillis()).build(); 以上设置了五个方法： setSmallIcon()用于设置通知的小图标，只能使用纯alpha图层的图片进行设置，小图标会显示在系统状态栏上。（alpha图层的图片可以找UI要）setLargeIcon()设置通知的大图标，当拉下通知后显示的图标。setWhen()指定通知被创建的时间，以毫秒为单位。 关联事件Intent 如果没有关联Intent也是可以的，只是点击的时候没有任何效果，如果在用户点击到时候会跳转到我们指定的页面，那么需要添加一个Intent，此时会用到 PendingIntent ,PendingIntent的获取可以根据需求选择 getActivity(),getBroadcast(),getService()等静态方法 12345Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(\"http://joinyon.top\"));PendingInent pendingIntent=PendingIntent.getActivity(this,0,intent,0);Notification notification=new NotificationCompat.Builder(this).setContentIntent(pendingIntent).build(); 调用 setContentIntent()方法，传入PendingIntent实例即可，当点击时会打开浏览器进入我的个人博客主页。我们可以继续完善Notification 12345678Notification notification=new NotificationCompat.Builder(this)....setAutoCancel(true);点击通知头自动取消 .setSound(Uri.parse(\"android.resource://\" + getPackageName() + \"/\" + R.raw.iphone_ringtone))// 声音 //.setLights()// LED //.setVibrate()// 震动 //.setDefaults(NotificationCompat.DEFAULT_ALL)//设置铃声及震动效果 .build(); 注意： 控制手机震动需要加入以下权限1&lt;user-permission android:name=\"android.permission.VIBRATE\"/&gt; 2. 悬挂式通知使用步骤和普通一样，不同的是在调用 .build()之前设置.setFullScreenIntent()方法12345678NotificationCompat.Builder builder=new Notification.Builder(this);Notification notification=builder.setSmallIcon(m.mipmap.ic_launcher_round).setPriority(Notification.PRIORITY_DEFAULT)// 通知的优先级.setCategory(Notification.CATEGORY_MESSAGE)// 通知的类型.setContentTitle(\"悬挂式通知\").setAutoCancel(true)....build(); NOTICEsetPriority()方法共有5个等级： PRIORITY_MIN -最低级别(-2); PRIORITY_LOW -较低级别(-1); PRIORITY_DEFAULT -默认级别(0); PRIORITY_HIGH -较高级别(1); PRIORITY_MAX -最高级别(2); 当发出此类型的通知时，通知会以悬挂的方式显示在屏幕上。 3. 折叠式通知折叠式通知需要借助RemoteViews来实现1234567891011121314151617181920212223242526// 第一步 获取NotificationManager实例 NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://joinyon.top/\")); PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0); //设置未下拉的样式R.layout.collapsed RemoteViews collapsed = new RemoteViews(getPackageName(), R.layout.collapsed); collapsed.setTextViewText(R.id.collapsed_text, \"关闭状态\"); //设置下拉后的样式TR.layout.show RemoteViews show = new RemoteViews(getPackageName(), R.layout.show); // 第二步 实例Notification对象 NotificationCompat.Builder builder = new NotificationCompat.Builder(this, \"0\"); Notification notification = builder.setAutoCancel(true) .setSmallIcon(R.mipmap.ic_launcher_round) .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher)) .setContentIntent(pendingIntent) .setContentText(\"JoinYon's Blog\") //第三步 .setCustomContentView(collapsed) .setCustomBigContentView(show) .setDefaults(NotificationCompat.DEFAULT_ALL)//设置铃声及震动效果 .build(); //第四步 发送通知 notificationManager.notify(0, notification); 4. 锁屏通知Android 5.0(API level21)开始，通知可以显示在锁屏上，通过设置选择是否允许敏感的通知内容显示在安全的锁屏上。1234//通过设置setVisibility()方法设置即可....setVisibility(VISIBILITY_PUBLIC).build(); setVisibility()方法共有三个选值： VISIBILITY_PRIVATE:显示基本信息，如通知的图标，但隐藏通知的全部内容 VISIBILITY_PUBLIC:显示通知的全部内容 VISIBILITY_SECRET:不显示任何内容，包括图标。 未完待续。。。","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"差缺补漏","slug":"差缺补漏","permalink":"http://joinyon.top/tags/差缺补漏/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"Android图片长按保存实践","slug":"Android图片长按保存实践","date":"2018-06-14T03:37:18.000Z","updated":"2018-06-14T03:37:18.212Z","comments":true,"path":"2018/06/14/Android图片长按保存实践/","link":"","permalink":"http://joinyon.top/2018/06/14/Android图片长按保存实践/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"git常用命令","slug":"git常用命令","date":"2018-06-11T09:03:01.000Z","updated":"2018-06-29T04:08:58.898Z","comments":true,"path":"2018/06/11/git常用命令/","link":"","permalink":"http://joinyon.top/2018/06/11/git常用命令/","excerpt":"","text":"1. 使用git向远程仓库提交代码添加完SSH key成功之后，我们就有权限向GitHub上我们自己的项目提交代码了，接下来介绍一下提交代码的两种方法： 方法一：clone远程仓库 在GitHub上创建一个项目如：AndroidGuide 并添加README.md文件。 终端cd到某文件夹下，执行一下命令: 1git clone git@github.com:MrRobotter/AndroidGuide.git 这样就把AndroidGuide项目 clone 到了本地，我们可以把 clone 命令理解为高级点的复制,这个时候该项目本身就是一个git仓库了，不需要再执行 git init 进行初始，而且甚至已经关联好了远程仓库，我们只需要在AndroidGuide目录下任意修改或者添加文件，然后进行commit 之后可以执行： 1git push origin master 进行代码提交。 方法二：关联本地已有项目如果我们在本地完成了一个完整的项目test1 这样方法一就不适合了。 在GitHub上建一个test项目， 在终端上cd到项目所在文件夹 接下来执行以下命令： 123git init //初始化版本库git add .//添加文件到版本库（只是添加到了缓存区）, `.` 代表添加文件夹下所有文件git commit -m &quot;提交说明&quot; //把添加的文件提交到版本库，并填写提交备注。 到这一步我们完成了代码库的初始化，但代码仅仅是本地，没有提交到服务器，如果要提交到远程的test则进行一下步骤： 123git remote add origin git@github.com:MrRobotter/test.git //把本地仓库与远程仓库关联git push -u origin master //第一次推送时git push origin master //之后提交 注意在GitHub上创建test一般会选择创建README.md文件，这时候直接使用git push -u origin master会出现以下提示： ! [rejected] master -&gt; master (non-fast-forward) error: failed to push some refs to &#39;git@github.com:MrRobotter/AndroidGuide.git’ hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: ‘git pull …’) before pushing again. hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details. 什么意思呢？是说你远程仓库中有文件没有下载下来。那明白了于是执行命令:1git pull origin master 这时候又出差了： fatal: refusing to merge unrelated histories WTF 怎么回事？查了资料才知道git在2.9.2版本里 认为他们是两个不同的项目，要把两个不同的项目合并需要使用命令：1git pull origin master --allow-unrelated-histories 这样就可以pull成功了。接下来，依次执行1234git add ** //你刚刚拉下来的新文件git commit -m &quot;合并&quot;git push -u origin master //第一次推送时git push origin master //之后提交 这样就解决了。 2. git命令删除远程分支先查看 远程分支1git branch -r 使用以下命令删除远程分支：123git branch -r -d origin/branch-namegit push origin :branch-name 3. git命令删除本地分支1git branch -d develop(replace your branch-name)","categories":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}],"tags":[{"name":"git","slug":"git","permalink":"http://joinyon.top/tags/git/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}]},{"title":"AndroidStudio常见编译错误及解决方案","slug":"AndroidStudio常见编译错误及解决方案","date":"2018-06-11T07:54:27.000Z","updated":"2018-09-05T06:05:44.769Z","comments":true,"path":"2018/06/11/AndroidStudio常见编译错误及解决方案/","link":"","permalink":"http://joinyon.top/2018/06/11/AndroidStudio常见编译错误及解决方案/","excerpt":"","text":"问题简介平时运行AndroidStudio编译器，会发生如下错误： Error:Execution failed for task &apos;:app:preDebugAndroidTestBuild&apos;. &gt; Conflict with dependency &apos;com.android.support:support-annotations&apos; in project &apos;:app&apos;. Resolved versions for app (26.1.0) and test app (27.1.1) differ. See https://d.android.com/r/tools/test-apk-dependency-conflicts.html for details. 发生这类问题的原因是：当我们修改了.build 中的 compileSdkVersion，产生所依赖的dependency与当前版本不一样导致的。 解决build-&gt;Rebuild Project","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"Exception","slug":"Exception","permalink":"http://joinyon.top/tags/Exception/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"比特币简介","slug":"比特币简介","date":"2018-06-11T02:29:54.000Z","updated":"2018-06-11T07:08:46.228Z","comments":true,"path":"2018/06/11/比特币简介/","link":"","permalink":"http://joinyon.top/2018/06/11/比特币简介/","excerpt":"","text":"什么是比特币?","categories":[{"name":"区块链","slug":"区块链","permalink":"http://joinyon.top/categories/区块链/"}],"tags":[{"name":"比特币","slug":"比特币","permalink":"http://joinyon.top/tags/比特币/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://joinyon.top/categories/区块链/"}]},{"title":"GradleForAndroid","slug":"GradleForAndroid","date":"2018-06-11T01:23:47.000Z","updated":"2018-06-11T02:08:14.807Z","comments":true,"path":"2018/06/11/GradleForAndroid/","link":"","permalink":"http://joinyon.top/2018/06/11/GradleForAndroid/","excerpt":"","text":"Gradle for Android 读完本文我可以了解到： Android应用的构建过程 注意点 Android早期的构建工具 Ant Maven Android构建神器：Gradle Gradle的关键概念及构建生命周期 Gradle的两个关键概念：项目和任务 Gradle构建生命周期 Gradle Wrapper 总结 鸣谢 Android应用的构建过程Android应用的构建过程十分复杂，如图所示： 主要有以下几个步骤： 主要的资源文件（layout，values等）都被 aapt 编译，并且在一个R文件中引用 Java代码被Java编译器编译成JVM字节码(.class文件) JVM字节码再被dex工具转换成dalvik字节码（.dex文件） 然后这些.dex文件、编译过的资源文件和其他资源文件（比如图片）会被打包成一个apk apk文件在安装前会被debug/release的key文件签名 安装到设备 注意点 上面步骤中第一步是主要的资源文件，有些特别的资源文件就不会被编译，比如assets目录下的文件，raw目录下的文件以及图片，都不会被编译。只不过raw下的文件会在R文件里生成id 如果对apk正式签名，还需要使用zipalign工具对apk进行对齐操作，这样做的好处是当应用运行时会减少内存的开销 通过上面的了解，Android的构建过程十分复杂，如果每一步都要人工手动去完成的话，是费时费力的，效率太低，于是有了各种各样的构建工具。 Android早期的构建工具在Gradle之前被广泛使用的是Apache Ant和 Maven。 AntAnt 发布于2000年，很快成为Java项目最流行的构建工具。 Ant的优点： 简单、易学，不需要什么特殊的准备就能上手 基于过程式编程思想使得构建非常灵活 后来还能支持插件。 不足之处: 使用XML作为脚本配置格式，除非是很小的项目，否则它的XML文件就很快大得无法管理。MavenMaven 发布于2004年，目前是解决使用Ant所带来的一些问题。 Maven也是使用XML作为构建配置的文件格式，不过文件结构却有了巨大的变化： Ant 需要开发者将执行task所需的全部命令都列出来 Maven 依靠约定并提供现成可调用的目标 不仅如此， Maven 更重要的一个进步是具备从网络上自动下载依赖的能力（后来Ant通过lvy也具备了这个功能），这革命性地改变了我们开发软件的方式。Maven的缺点： 依赖管理不能很好地处理相同库文件不同版本之间的冲突（lvyz在这方面更好一些） XML作为配置文件的格式有严格的结构层次和标准，定制化目标很困难 Maven 主要解决了依赖管理的问题，然而使用XML的错误使他重蹈覆辙，实际上Maven很难写出复杂、定制化的构建脚本，在大型项目中，他经常什么“特别的事儿”还没干就有几百行代码，甚至不如Ant。 前辈们在反省前面两种构建工具的错误之后，提出了DSL（Domain Special Language，领域专用语言）的概念，目标是设计一套能够解决特定领域问题的语言。在构建方面，DSL的一个成功案例就是Gradle。 Android构建神器 Gradle 2012发布的Gradle深刻吸取前面几位前辈的经验和教训，集大家之所成，做了很多的改进。 Gradle有约定优于配置的原则，即为设置和属性提供默认值，这使得他比Ant或者Maven更容易上手。 Gradle构建脚本不再使用XML，而是使用Groovy的DSL进行书写（Groovy是一种基于Java虚拟机的动态语言，因此Android开发者看着会很熟悉），从而使得构建脚本比用Ant和Maven写的更清晰、简洁，下面是实现同样目标的Maven代码和Gradle代码对比: Gradle 既有Ant的强大和灵活性，又有Maven的依赖管理，支持插件且易于使用。因此一推出就获得广泛关注，2013年被Google选为Android Studio的默认构建工具。 Gradle设计的方式使他可以很容易地扩展构建和插入到现有的构建过程中，Google推广Gradle金额Android Studio时，目标是让代码复用、构建variant、配置和定制构建过程变得更加简单。 有人可能担心是否需要专门去学习新语言Groovy，《Gradle for Android》书中专门提到： Groovy代码非常易读，如果你学习过Java，那么学习Groovy的曲线不会陡峭 如果你想构建自己的任务和插件，那么对Groovy有更深次的理解尤为重要 不过因为Groovy是基于Java虚拟机的，所以你完全可以用Java或者其他基于Java虚拟机的语言来编写你的自定义插件。 Gradle的关键概念及构建生命周期Gradle的两个关键概念 项目和任务 项目每个build.gradle脚本构建文件代表一个项目project 任务task构建在脚本里： 每次构建至少包括一个项目，没干嘛项目里又至少包括一个任务。 Gradle构建生命周期一个Gradle构建通常包括下面三个阶段： 初始化 项目实例会在这时被创建，如果这个项目里有多个module，或者依赖多个library，并且他们都有对应的build.gradle文件，就会创建过个项目实例。 配置 在这个阶段构建脚本被执行，并且为每个项目实例创建和配置任务。 执行 在这个阶段Gradle将根据构建脚本配置决定哪些任务会被执行。 不同的任务之间可能有相互依赖，因此在配置阶段Gradle会产生依赖关系图，没有依赖的任务通常会被优先执行，然后一个接一个执行其他任务。一旦一个任务被执行过，就不会被再次执行。 Gradle WrapperGradle在不断的发展，有可能存在新版本不兼容旧版本的情况，于是官网为我们提供了 Gradle Wrapper，就是为了兼容和适配不同版本，确保构建是可重复的。 普通的Gradle脚步命令是： 1gradle ... 而Gradle Wrapper命令只是在gradle 后加个w：1gradlew ... 在Mac下略有不同：1./gradlew ... 开发者或者自动构建系统可以通过使用wapper来运行gradle命令，由它来搞定兼容等问题，因此我们甚至都不需要安装gradle，直接使用gradle wapper即可，就像Android Studio里推荐的一样： 上图所示并没有使用wrapper，是因为当运行gradlew命令时，gradle wrapper 会自动下载所需要但是你没有的gradle版本并使用。 这在多人协作时，很可能因为别人修改了gradle版本，上传到git，然后导致你运行命令时需要下载半天。 不过官方还是推荐使用wrapper，毕竟这样更稳定。 使用 gradle wrapper以后，gradle wrapper 会为每个项目下载一个gradle压缩包，路径在\\User\\yourname.gradle\\wrapper\\dists里： 总结Android Studio 占领市场后，构建工具Gradle的地位无人能敌，我们有必要学习、使用它来为我们创造价值。 摘抄这篇文章能初步了解Gradle的发展过程，它有什么优点，为什么会被广泛使用，有助于后续深入学习Gradle。 鸣谢本文转载自拭心 想了解更多参考： Java Build Tools: Ant vs Maven vs Gradle Why Build Your Java Projects with Gradle Rather than Ant or Maven? Android构建过程简述","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"知识点","slug":"知识点","permalink":"http://joinyon.top/tags/知识点/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"推广链PC上线百度招财猫，免费挖矿","slug":"推广链PC上线百度招财猫，免费挖矿","date":"2018-06-08T07:11:18.000Z","updated":"2018-06-08T07:18:33.470Z","comments":true,"path":"2018/06/08/推广链PC上线百度招财猫，免费挖矿/","link":"","permalink":"http://joinyon.top/2018/06/08/推广链PC上线百度招财猫，免费挖矿/","excerpt":"","text":"","categories":[{"name":"资讯","slug":"资讯","permalink":"http://joinyon.top/categories/资讯/"}],"tags":[{"name":"挖矿","slug":"挖矿","permalink":"http://joinyon.top/tags/挖矿/"}],"keywords":[{"name":"资讯","slug":"资讯","permalink":"http://joinyon.top/categories/资讯/"}]},{"title":"Android基础知识复习(持续更新)","slug":"Android基础知识复习","date":"2018-06-07T12:16:43.000Z","updated":"2018-08-07T08:34:48.842Z","comments":true,"path":"2018/06/07/Android基础知识复习/","link":"","permalink":"http://joinyon.top/2018/06/07/Android基础知识复习/","excerpt":"","text":"Part 1ANR问题 ANR排错一般有三种类型 KeyDispatchTimeout(5 seconds) –主要是类型按键或者触摸事件在特定时间内无响应。 BaroadcastTimeout(10 seconds) –BroadcastReceiver在特定时间内无法处理完成。 ServiceTimeout(20 seconds) –小概率事件Service在特定的时间内无法处理完成。 哪些操作会导致ANR 在主线程执行以下操作： 高耗时的操作，如图像变换 磁盘读写操作，数据库读写操作 大量的创建新对象 如何避免？ UI线程尽量只做跟UI相关的工作 耗时的操作（比如数据库操作，I/O，连接网络或者别的有可能阻塞UI线程的操作）把它放在单独的线程处理 尽量用Handler来处理UIThread和别的Thread之间的交互 解决逻辑 使用AsyncTask 在doInbackground()方法中执行耗时操作 在onPostExecuted()更新UI 使用Handler实现异步任务 在子线程中处理耗时操作 处理完成之后，通过handler.sendMessage()传递处理结果 在handler的handleMessage()方法中更新UI 或者使用handler.post()方法将消息放到Looper中 如何排查 首先分析log 从stace.txt文件查看调用stack，adb pull data/anr/trace.txt./mytraces.txt 看代码 仔细查看ANR的成因（I/O wait? block? memoryleak?） 监测ANR的Watchdog最近出来一个叫LeakCanary的工具 FC(Force Close)什么时候会出现 Error OOM,内存溢出 StackOverFlowError Runtime，比如说空指针异常 解决的办法 注意内存的使用和管理 使用Thread.UncaughtExceptionHandler接口 Android关于OOM的解决方案 OOM 内存溢出(Out Of Memory) 也就是内存占有量超过了VM所分配的最大 出现OOM的原因 加载对象过大 相应的资源过多，来不及释放 如何解决 在内存引用上做些处理，常用的有软引用、强化引用、弱引用 在内存中加载图片时直接在内存中做处理，如边界压缩 动态回收内存 优化Dalvik虚拟机的堆内存分配 自定义堆内存大小 禁止跟随屏幕旋转在清单文件中的Activity添加一下代码：1android:screenOrientation=&quot;portrait&quot; Fragment 的用法及分类 DialogFragment 替代Dialog的解决方案 与JS交互","categories":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}],"tags":[{"name":"差缺补漏","slug":"差缺补漏","permalink":"http://joinyon.top/tags/差缺补漏/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://joinyon.top/categories/Android/"}]},{"title":"何为Github Pages?","slug":"何为Github-Pages","date":"2018-06-06T09:02:35.000Z","updated":"2018-06-08T07:06:39.849Z","comments":true,"path":"2018/06/06/何为Github-Pages/","link":"","permalink":"http://joinyon.top/2018/06/06/何为Github-Pages/","excerpt":"","text":"本人在创建自己的Github Pages过程中遇到了种种麻烦，作为一个前端小白，遇到一个小问题要Google上半天，还不一定能一下解决，所以在初步搭建好自己的个人博客主页时，已经迫不及待的要记录下这次搭建的过程。由于本人英文水平不是很高，所以看起英文文档比较吃力，现在我要把自己好不容易读懂的文档翻译过来，方便下次查阅。 GitHub Pages是什么？ GitHub Pages使用指南 使用界限 GitHub Pages是什么？GitHub Pages是一个静态网站托管服务，它可以直接从你的GitHub仓库管理个人、组织或者项目的主页。 我们可以利用Jekyll Theme Chooser在线创建和发布GitHub Pages，如果你更喜欢离线去做，你可以使用GitHub Desktop或者command line来完成。 GitHub Pages是一个静态的站点寄存服务，它不支持服务端的代码，比如：PHP,Ruby,或者Python。 想了解更多不同类型的 GitHub Pages ，请参考用户，组织和项目主页 `警告:` GitHub Pages站点在互联网上是可以被公开的，尽管它的仓库是私有的，如果您有敏感的数据在你的页面仓库，您最好先删 除掉之后再进行发布。 GitHub Pages使用指南> Github Pages站点在2016年6月15日之后使用域名github.io通过HTTPS服务。如果你的站点是在2016年6月15日之前创建的，那么你可以使用支持HTTPS协议保持你的站点可访问。 > Github Pages站点不应该记录敏感信息，比如发送密码或者信用卡账号等内容。 > 当您使用 GitHub Pages 必须服从GitHub服务条款,以及严禁转让该权利。 使用界限Github Pages站点受以下几点使用限制： 使用command line添加一个已经存在的项目到GitHub用户,组织和项目主页","categories":[{"name":"工具","slug":"工具","permalink":"http://joinyon.top/categories/工具/"}],"tags":[{"name":"文档翻译","slug":"文档翻译","permalink":"http://joinyon.top/tags/文档翻译/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://joinyon.top/categories/工具/"}]},{"title":"我的第一篇blog","slug":"我的第一篇blog","date":"2018-06-06T08:36:02.000Z","updated":"2018-06-08T07:31:47.634Z","comments":true,"path":"2018/06/06/我的第一篇blog/","link":"","permalink":"http://joinyon.top/2018/06/06/我的第一篇blog/","excerpt":"","text":"为什么要写博客？","categories":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://joinyon.top/tags/随笔/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"http://joinyon.top/categories/生活/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-06T03:46:08.436Z","updated":"2018-06-08T07:25:32.050Z","comments":true,"path":"2018/06/06/hello-world/","link":"","permalink":"http://joinyon.top/2018/06/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://joinyon.top/tags/随笔/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://joinyon.top/categories/技术/"}]}]}