{"meta":{"title":"JoinYon's Blog","subtitle":"一个会思考的机器人","description":null,"author":"JoinYon","url":"http://yoursite.com"},"pages":[{"title":"标签","date":"2018-06-07T05:41:48.000Z","updated":"2018-06-07T05:43:57.562Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-06-07T05:46:07.000Z","updated":"2018-06-07T05:47:48.514Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"工具","date":"2018-06-08T06:34:46.000Z","updated":"2018-06-08T06:36:23.319Z","comments":true,"path":"resources/index.html","permalink":"http://yoursite.com/resources/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-06-07T06:09:01.000Z","updated":"2018-06-07T07:12:33.265Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"码农一枚，现居杭州。 座右铭 你是这个世界上独一无二的。 存在的就是合理的。 还没有第三条，等着我去发现。 交友宣言喜欢以茶会友，交朋友是拓展自己见闻的有效途径。 联系方式 关注我 新浪微博 GitHub coding.net 兴趣爱好我只是一个会coding的程序猿，我还有一些特殊爱好： 读书（微信读书，欢迎和我互相关注，点赞哦！） 写作（文笔不好，七八九流的，自我娱乐） 炒币（山寨币，虚拟币，梦想还是有的，说不定哪天财富自由了，偷笑。。。） 游泳（没有正规训练过，释放心情的好去处） 吃货（没有什么比美食诱人了）"}],"posts":[{"title":"比特币简介","slug":"比特币简介","date":"2018-06-11T02:29:54.000Z","updated":"2018-06-11T02:31:35.795Z","comments":true,"path":"2018/06/11/比特币简介/","link":"","permalink":"http://yoursite.com/2018/06/11/比特币简介/","excerpt":"","text":"","categories":[{"name":"区块链","slug":"区块链","permalink":"http://yoursite.com/categories/区块链/"}],"tags":[{"name":"比特币","slug":"比特币","permalink":"http://yoursite.com/tags/比特币/"}],"keywords":[{"name":"区块链","slug":"区块链","permalink":"http://yoursite.com/categories/区块链/"}]},{"title":"GradleForAndroid","slug":"GradleForAndroid","date":"2018-06-11T01:23:47.000Z","updated":"2018-06-11T02:08:14.807Z","comments":true,"path":"2018/06/11/GradleForAndroid/","link":"","permalink":"http://yoursite.com/2018/06/11/GradleForAndroid/","excerpt":"","text":"Gradle for Android 读完本文我可以了解到： Android应用的构建过程 注意点 Android早期的构建工具 Ant Maven Android构建神器：Gradle Gradle的关键概念及构建生命周期 Gradle的两个关键概念：项目和任务 Gradle构建生命周期 Gradle Wrapper 总结 鸣谢 Android应用的构建过程Android应用的构建过程十分复杂，如图所示： 主要有以下几个步骤： 主要的资源文件（layout，values等）都被 aapt 编译，并且在一个R文件中引用 Java代码被Java编译器编译成JVM字节码(.class文件) JVM字节码再被dex工具转换成dalvik字节码（.dex文件） 然后这些.dex文件、编译过的资源文件和其他资源文件（比如图片）会被打包成一个apk apk文件在安装前会被debug/release的key文件签名 安装到设备 注意点 上面步骤中第一步是主要的资源文件，有些特别的资源文件就不会被编译，比如assets目录下的文件，raw目录下的文件以及图片，都不会被编译。只不过raw下的文件会在R文件里生成id 如果对apk正式签名，还需要使用zipalign工具对apk进行对齐操作，这样做的好处是当应用运行时会减少内存的开销 通过上面的了解，Android的构建过程十分复杂，如果每一步都要人工手动去完成的话，是费时费力的，效率太低，于是有了各种各样的构建工具。 Android早期的构建工具在Gradle之前被广泛使用的是Apache Ant和 Maven。 AntAnt 发布于2000年，很快成为Java项目最流行的构建工具。 Ant的优点： 简单、易学，不需要什么特殊的准备就能上手 基于过程式编程思想使得构建非常灵活 后来还能支持插件。 不足之处: 使用XML作为脚本配置格式，除非是很小的项目，否则它的XML文件就很快大得无法管理。MavenMaven 发布于2004年，目前是解决使用Ant所带来的一些问题。 Maven也是使用XML作为构建配置的文件格式，不过文件结构却有了巨大的变化： Ant 需要开发者将执行task所需的全部命令都列出来 Maven 依靠约定并提供现成可调用的目标 不仅如此， Maven 更重要的一个进步是具备从网络上自动下载依赖的能力（后来Ant通过lvy也具备了这个功能），这革命性地改变了我们开发软件的方式。Maven的缺点： 依赖管理不能很好地处理相同库文件不同版本之间的冲突（lvyz在这方面更好一些） XML作为配置文件的格式有严格的结构层次和标准，定制化目标很困难 Maven 主要解决了依赖管理的问题，然而使用XML的错误使他重蹈覆辙，实际上Maven很难写出复杂、定制化的构建脚本，在大型项目中，他经常什么“特别的事儿”还没干就有几百行代码，甚至不如Ant。 前辈们在反省前面两种构建工具的错误之后，提出了DSL（Domain Special Language，领域专用语言）的概念，目标是设计一套能够解决特定领域问题的语言。在构建方面，DSL的一个成功案例就是Gradle。 Android构建神器 Gradle 2012发布的Gradle深刻吸取前面几位前辈的经验和教训，集大家之所成，做了很多的改进。 Gradle有约定优于配置的原则，即为设置和属性提供默认值，这使得他比Ant或者Maven更容易上手。 Gradle构建脚本不再使用XML，而是使用Groovy的DSL进行书写（Groovy是一种基于Java虚拟机的动态语言，因此Android开发者看着会很熟悉），从而使得构建脚本比用Ant和Maven写的更清晰、简洁，下面是实现同样目标的Maven代码和Gradle代码对比: Gradle 既有Ant的强大和灵活性，又有Maven的依赖管理，支持插件且易于使用。因此一推出就获得广泛关注，2013年被Google选为Android Studio的默认构建工具。 Gradle设计的方式使他可以很容易地扩展构建和插入到现有的构建过程中，Google推广Gradle金额Android Studio时，目标是让代码复用、构建variant、配置和定制构建过程变得更加简单。 有人可能担心是否需要专门去学习新语言Groovy，《Gradle for Android》书中专门提到： Groovy代码非常易读，如果你学习过Java，那么学习Groovy的曲线不会陡峭 如果你想构建自己的任务和插件，那么对Groovy有更深次的理解尤为重要 不过因为Groovy是基于Java虚拟机的，所以你完全可以用Java或者其他基于Java虚拟机的语言来编写你的自定义插件。 Gradle的关键概念及构建生命周期Gradle的两个关键概念 项目和任务 项目每个build.gradle脚本构建文件代表一个项目project 任务task构建在脚本里： 每次构建至少包括一个项目，没干嘛项目里又至少包括一个任务。 Gradle构建生命周期一个Gradle构建通常包括下面三个阶段： 初始化 项目实例会在这时被创建，如果这个项目里有多个module，或者依赖多个library，并且他们都有对应的build.gradle文件，就会创建过个项目实例。 配置 在这个阶段构建脚本被执行，并且为每个项目实例创建和配置任务。 执行 在这个阶段Gradle将根据构建脚本配置决定哪些任务会被执行。 不同的任务之间可能有相互依赖，因此在配置阶段Gradle会产生依赖关系图，没有依赖的任务通常会被优先执行，然后一个接一个执行其他任务。一旦一个任务被执行过，就不会被再次执行。 Gradle WrapperGradle在不断的发展，有可能存在新版本不兼容旧版本的情况，于是官网为我们提供了 Gradle Wrapper，就是为了兼容和适配不同版本，确保构建是可重复的。 普通的Gradle脚步命令是： 1gradle ... 而Gradle Wrapper命令只是在gradle 后加个w：1gradlew ... 在Mac下略有不同：1./gradlew ... 开发者或者自动构建系统可以通过使用wapper来运行gradle命令，由它来搞定兼容等问题，因此我们甚至都不需要安装gradle，直接使用gradle wapper即可，就像Android Studio里推荐的一样： 上图所示并没有使用wrapper，是因为当运行gradlew命令时，gradle wrapper 会自动下载所需要但是你没有的gradle版本并使用。 这在多人协作时，很可能因为别人修改了gradle版本，上传到git，然后导致你运行命令时需要下载半天。 不过官方还是推荐使用wrapper，毕竟这样更稳定。 使用 gradle wrapper以后，gradle wrapper 会为每个项目下载一个gradle压缩包，路径在\\User\\yourname.gradle\\wrapper\\dists里： 总结Android Studio 占领市场后，构建工具Gradle的地位无人能敌，我们有必要学习、使用它来为我们创造价值。 摘抄这篇文章能初步了解Gradle的发展过程，它有什么优点，为什么会被广泛使用，有助于后续深入学习Gradle。 鸣谢本文转载自拭心 想了解更多参考： Java Build Tools: Ant vs Maven vs Gradle Why Build Your Java Projects with Gradle Rather than Ant or Maven? Android构建过程简述","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}],"tags":[{"name":"知识点","slug":"知识点","permalink":"http://yoursite.com/tags/知识点/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}]},{"title":"推广链PC上线百度招财猫，免费挖矿","slug":"推广链PC上线百度招财猫，免费挖矿","date":"2018-06-08T07:11:18.000Z","updated":"2018-06-08T07:18:33.470Z","comments":true,"path":"2018/06/08/推广链PC上线百度招财猫，免费挖矿/","link":"","permalink":"http://yoursite.com/2018/06/08/推广链PC上线百度招财猫，免费挖矿/","excerpt":"","text":"","categories":[{"name":"资讯","slug":"资讯","permalink":"http://yoursite.com/categories/资讯/"}],"tags":[{"name":"挖矿","slug":"挖矿","permalink":"http://yoursite.com/tags/挖矿/"}],"keywords":[{"name":"资讯","slug":"资讯","permalink":"http://yoursite.com/categories/资讯/"}]},{"title":"Android基础知识复习(持续更新)","slug":"Android基础知识复习","date":"2018-06-07T12:16:43.000Z","updated":"2018-06-11T06:04:50.295Z","comments":true,"path":"2018/06/07/Android基础知识复习/","link":"","permalink":"http://yoursite.com/2018/06/07/Android基础知识复习/","excerpt":"","text":"Part 1ANR问题 ANR排错一般有三种类型 KeyDispatchTimeout(5 seconds) –主要是类型按键或者触摸事件在特定时间内无响应。 BaroadcastTimeout(10 seconds) –BroadcastReceiver在特定时间内无法处理完成。 ServiceTimeout(20 seconds) –小概率事件Service在特定的时间内无法处理完成。 哪些操作会导致ANR 在主线程执行以下操作： 高耗时的操作，如图像变换 磁盘读写操作，数据库读写操作 大量的创建新对象 如何避免？ UI线程尽量只做跟UI相关的工作 耗时的操作（比如数据库操作，I/O，连接网络或者别的有可能阻塞UI线程的操作）把它放在单独的线程处理 尽量用Handler来处理UIThread和别的Thread之间的交互 解决逻辑 使用AsyncTask 在doInbackground()方法中执行耗时操作 在onPostExecuted()更新UI 使用Handler实现异步任务 在子线程中处理耗时操作 处理完成之后，通过handler.sendMessage()传递处理结果 在handler的handleMessage()方法中更新UI 或者使用handler.post()方法将消息放到Looper中 如何排查 首先分析log 从tace.txt文件查看调用stack，adb pull data/anr/trace.txt./mytraces.txt 看代码 仔细查看ANR的成因（I/O wait? block? memoryleak?） 监测ANR的Watchdog最近出来一个叫LeakCanary的工具 FC(Force Close)什么时候会出现 Error OOM,内存溢出 StackOverFlowError Runtime，比如说空指针异常 解决的办法 注意内存的使用和管理 使用Thread.UncaughtExceptionHandler接口 Android关于OOM的解决方案 OOM 内存溢出(Out Of Memory) 也就是内存占有量超过了VM所分配的最大 出现OOM的原因 加载对象过大 相应的资源过多，来不及释放 如何解决 在内存引用上做些处理，常用的有软引用、强化引用、弱引用 在内存中加载图片时直接在内存中做处理，如边界压缩 动态回收内存 优化Dalvik虚拟机的堆内存分配 自定义堆内存大小","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}],"tags":[{"name":"差缺补漏","slug":"差缺补漏","permalink":"http://yoursite.com/tags/差缺补漏/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"}]},{"title":"何为Github Pages?","slug":"何为Github-Pages","date":"2018-06-06T09:02:35.000Z","updated":"2018-06-08T07:06:39.849Z","comments":true,"path":"2018/06/06/何为Github-Pages/","link":"","permalink":"http://yoursite.com/2018/06/06/何为Github-Pages/","excerpt":"","text":"本人在创建自己的Github Pages过程中遇到了种种麻烦，作为一个前端小白，遇到一个小问题要Google上半天，还不一定能一下解决，所以在初步搭建好自己的个人博客主页时，已经迫不及待的要记录下这次搭建的过程。由于本人英文水平不是很高，所以看起英文文档比较吃力，现在我要把自己好不容易读懂的文档翻译过来，方便下次查阅。 GitHub Pages是什么？ GitHub Pages使用指南 使用界限 GitHub Pages是什么？GitHub Pages是一个静态网站托管服务，它可以直接从你的GitHub仓库管理个人、组织或者项目的主页。 我们可以利用Jekyll Theme Chooser在线创建和发布GitHub Pages，如果你更喜欢离线去做，你可以使用GitHub Desktop或者command line来完成。 GitHub Pages是一个静态的站点寄存服务，它不支持服务端的代码，比如：PHP,Ruby,或者Python。 想了解更多不同类型的 GitHub Pages ，请参考用户，组织和项目主页 `警告:` GitHub Pages站点在互联网上是可以被公开的，尽管它的仓库是私有的，如果您有敏感的数据在你的页面仓库，您最好先删 除掉之后再进行发布。 GitHub Pages使用指南> Github Pages站点在2016年6月15日之后使用域名github.io通过HTTPS服务。如果你的站点是在2016年6月15日之前创建的，那么你可以使用支持HTTPS协议保持你的站点可访问。 > Github Pages站点不应该记录敏感信息，比如发送密码或者信用卡账号等内容。 > 当您使用 GitHub Pages 必须服从GitHub服务条款,以及严禁转让该权利。 使用界限Github Pages站点受以下几点使用限制： 使用command line添加一个已经存在的项目到GitHub用户,组织和项目主页","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"文档翻译","slug":"文档翻译","permalink":"http://yoursite.com/tags/文档翻译/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"我的第一篇blog","slug":"我的第一篇blog","date":"2018-06-06T08:36:02.000Z","updated":"2018-06-08T07:31:47.634Z","comments":true,"path":"2018/06/06/我的第一篇blog/","link":"","permalink":"http://yoursite.com/2018/06/06/我的第一篇blog/","excerpt":"","text":"为什么要写博客？","categories":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/categories/生活/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/categories/生活/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-06T03:46:08.436Z","updated":"2018-06-08T07:25:32.050Z","comments":true,"path":"2018/06/06/hello-world/","link":"","permalink":"http://yoursite.com/2018/06/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]}]}